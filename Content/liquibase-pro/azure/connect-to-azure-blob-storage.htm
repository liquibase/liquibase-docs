<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title>How to connect Liquibase to Azure Blob Storage</title>
    </head>
    <body>
        <h1>Connect to Azure Blob Storage</h1>
        <p>To connect Liquibase to Azure Blob Storage, you authenticate using Azure service principal credentials and reference your files with <code>az://</code> URLs. This setup enables Liquibase to securely read from and write to Azure Blob Storage when running commands such as <code><a href="../../commands/update/update.html">update</a></code>, <code><a href="../../commands/inspection/snapshot.html">snapshot</a></code>, and <code><a href="../../commands/inspection/diff-changelog.html">diff-changelog</a></code>. The connection is established automatically at runtime when Liquibase detects an <code>az://</code> path and valid azure credentials.</p>
        <p>This guide will walk you through how to set up your azure credentials as environment variables and test that you are able to establish a connection to Azure.</p>
        <h2>1. Set up <a href="https://docs.liquibase.com/concepts/connections/liquibase-environment-variables.html">environment variables</a>. </h2>
        <p>Environment variables are key-value pairs used to securely pass configuration data such as credentials and connection details to applications.</p>
        <p>To connect Liquibase to Azure Blob Storage, you must set specific environment variables that allow Liquibase to authenticate with your Azure storage account. These variables are used at runtime to establish a secure connection and authorize access to Blob Storage resources.</p>
        <p>You can use the following code in the command-line interface (CLI) to set these environment variables before running Liquibase commands.<br /></p>
        <p>Before you run the example code, be sure to:</p>
        <ul>
            <li>Update <i>your_storage_account</i> with your storage account name. </li>
            <li>Update <i>your_tenant_id</i> with your <a href="https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant">tenant ID</a>. </li>
            <li>Update <i>your_client_id</i> with your <a href="https://learn.microsoft.com/en-us/azure/healthcare-apis/register-application#application-id-client-id">client ID</a>. </li>
            <li>Update <i>your_client_secret</i> with your <a href="https://learn.microsoft.com/en-us/azure/healthcare-apis/register-application#certificates--secrets">client secret</a>. </li>
        </ul>
        <h3>
            <br />Example Code</h3>
        <h4>Windows<br /><br /></h4><code class="language-text">set LIQUIBASE_AZURE_STORAGE_ACCOUNT="your_storage_account"<br />set AZURE_TENANT_ID="your_tenant_id"<br />set AZURE_CLIENT_ID="your_client_id"<br />set AZURE_CLIENT_SECRET="your_client_secret"</code><code><br /></code>
        <h4>Linux/MacOS<br /><br /></h4><code class="language-text">export LIQUIBASE_AZURE_STORAGE_ACCOUNT="your_storage_account"<br />export AZURE_TENANT_ID="your_tenant_id"<br />export AZURE_CLIENT_ID="your_client_id"<br />export AZURE_CLIENT_SECRET="your_client_secret"</code>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This sets the environment variables temporarily for the duration of the current terminal session. Once you close the terminal, this setting will be lost and you will need to reset the environment variables for your new terminal session. These variables include sensitive information like client secrets, so we do not recommend persisting them to avoid long-term storage in configuration files.</p>
        <h2>2. Verify the connection</h2>
        <p>To confirm that Liquibase is successfully connected to Azure Blob Storage, you can run the snapshot command to output a file directly to your Blob Storage container using the following example code.</p>
        <p>Before you run the example code, be sure to:</p>
        <ul>
            <li>
                <p>Replace <i>your_blob_container</i> with the name of your Blob Storage container in Azure where you would like to upload the file.</p>
            </li>
        </ul>
        <h3>Example Code</h3>
        <br /><code class="language-text">liquibase snapshot \
<br />			 --snapshot-format=json \
<br />		--output-file="az://<i>your_blob_container</i>/test-snapshot.json"<br /></code>
        <p>After running the command, go to the Azure portal and navigate to your Blob Storage account and container to verify that the <code>test-snapshot.json</code> file was uploaded successfully.</p>
        <h2>Next Steps</h2>
        <ul>
            <li><a href="store-snapshots-diffs-and-sql-output-from-Liquibase-in-Azure-Blob-Storage.htm">Store Snapshots, Diffs, and SQL Output from Liquibase in Azure Blob Storage
			</a> — Now that you've connected to azure and stored a file, you can write additional Liquibase files to Azure Blob Storage, allowing you to store them centrally and access them remotely.</li>
            <li><a href="load-and-execute-changelogs-flows-and-properties-from-azure-blog-storage.htm">Load and Execute Changelogs, Flows, and Properties from Azure Blob Storage</a> — You can load and execute Liquibase files directly from Azure Blob Storage, enabling you to run database changes without storing the files on your local system.</li>
        </ul>
    </body>
</html>