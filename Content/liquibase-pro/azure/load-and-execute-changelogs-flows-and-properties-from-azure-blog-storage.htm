<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Load and execute changelogs, flows, and properties from Azure Blob Storage</h1>
        <p>Liquibase supports loading and executing files directly from Azure Blob Storage. This includes <a href="../../concepts/changelogs/home.html">changelog</a>, <a href="../flow/home.htm">Flow</a>, and <code><a href="../../concepts/connections/creating-config-properties.html">liquibase.properties</a></code> files that define how Liquibase runs and what changes it applies to your database.</p>
        <p>By using the <code>az://</code> URL format, you can reference files stored in Azure Blob Storage when running Liquibase commands. This enables remote execution, supports centralized file management, and ensures consistency across environments and teams.</p>
        <p>This article shows you how to reference and execute Liquibase files stored in Azure Blob Storage, when to use each file type, and how to configure your commands for remote access.</p>
        <h2 id="requirements">Requirements</h2>
        <ul>
            <li>Liquibase&#160;4.32.0+</li>
            <li><MadCap:variable name="General.LBPro" /> license. </li>
            <li><a href="https://learn.microsoft.com/en-us/azure/storage/common/storage-account-create?tabs=azure-portal">Azure storage account</a>
            </li>
        </ul>
        <h2>Prerequisites </h2>
        <ul>
            <li><a href="https://learn.microsoft.com/en-us/azure/role-based-access-control/role-assignments-portal">Add the Storage Blob Data Contributor condition to your storage account using role assignment in Azure</a>
            </li>
            <li><a href="install-azure-extension.htm">Install the Liquibase Azure extension</a>
            </li>
            <li>
                <MadCap:xref href="../license-key.htm">Apply your [%=General.LBPro%] License Key</MadCap:xref>
            </li>
            <li><a href="connect-to-azure-blob-storage.htm">Connect Liquibase to Azure Blob Storage</a>
            </li>
        </ul>
        <h4>
            <br />Load and execute a changelog file</h4>
        <p>You can upload your changelog file to Azure Blog Storage using the <a href="https://portal.azure.com/">Azure Porta</a>l. Once your changelog file is stored in Azure Blob Storage, you can reference it with the <code>--changelog-file</code> argument to execute updates or generate SQL output.</p>
        <p>Before you run the example code, be sure to:</p>
        <ul>
            <li>Replace <i>your_blob_container</i> with your Azure Blob Storage container name or path.
            </li>
            <li>Replace <i>my-changelog.sql</i> with the file name of your changelog stored in Azure.
            </li>
        </ul>
        <br /><code class="language-text">liquibase update \
<br />		--changelog-file=az://<i style="font-weight: bold;">your_blob_container</i>/my-changelog.sql</code>
        <p>Ways you can verify your changes:</p>
        <ul>
            <li><b>Check the Liquibase command output</b> – it will confirm which changeSets ran or were skipped.
            </li>
            <li><b>Inspect the database</b> – verify that the changes (e.g., new tables, columns) are present.
            </li>
            <li><b>Check the <a href="../../concepts/tracking-tables/databasechangelog-table.html">DATABASECHANGELOG table</a></b> – Liquibase logs all executed changeSets here. Look for new rows with matching id, author, and filename.
            </li>
        </ul>
        <h4>
            <br />Load and execute a flow file</h4>
        <p>Flow files define automated, multi-step processes that may include snapshots, updates, or checks. Once a flow file is stored in Azure Blob Storage, you can execute it using the <code>--flow-file</code> option.</p>
        <p>Before you run the example code, be sure to:</p>
        <ul>
            <li>Replace <i>your_blob_container</i> with your Azure container name.</li>
            <li>Replace <i>liquibase.flowfile.yaml</i> with your flow file’s name or path.</li>
        </ul><code><br />liquibase flow \
<br />--flow-file=az://<i style="font-weight: bold;">your_blob_container</i>/liquibase.flowfile.yaml</code>
        <p>Ways you can verify your changes:</p>
        <ul>
            <li><b>Review the CLI output </b>– each step in the flow will print status messages (e.g., “Snapshot created” or “Update successful”).</li>
            <li><b>Check for generated files</b> – if your flow writes output (like a snapshot), confirm the file appears in Azure Blob Storage..
			</li>
            <li><b>Validate changes via the database</b> – if the flow includes update or diff, inspect the database or output files as appropriate.</li>
        </ul>
        <h4>
            <br />Load a properties file</h4>
        <p>You can upload your <code>liquibase.properties</code> file to the Azure Blog Storage using the Azure Portal. The <code>liquibase.properties</code> file contains settings that configure how Liquibase commands run. Once the <code>liquibase.properties</code> file is stored, you can use the <code>--defults-file</code> option to tell Liquibase where to load its configuration from. </p>
        <p>Before you run the example code, be sure to:</p>
        <ul>
            <li>Replace <i>your_blob_container</i> with the name of your Azure container.
            </li>
            <li>Replace <i>liquibase.properties</i> with your properties file name or path.
            </li>
        </ul><code><br />liquibase update \
<br />		--defaults-file=az://<i style="font-weight: bold;">your_blob_container</i>/liquibase.properties<br /><br /></code>
        <p>Ways you can verify your changes:</p>
        <ul>
            <li>
                <p>Changes appear in the DATABASECHANGELOG table or the database, depending on the command used.</p>
            </li>
        </ul>
        <h2>Related Topics</h2>
        <ul>
            <li><a href="load-and-execute-changelogs-flows-and-properties-from-azure-blog-storage.htm">Load and execute changelogs, flows, and properties from Azure Blob storage</a>
            </li>
        </ul>
    </body>
</html>