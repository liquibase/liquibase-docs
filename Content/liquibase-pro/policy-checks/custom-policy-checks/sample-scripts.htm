<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/sample-scripts.html" />
        <meta name="description" content="Sample Python scripts to use as Liquibase Custom Policy Checks." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Sample Custom Policy Check Scripts</h1>
        <p>This page provides executable sample Python scripts that you can run as Custom Policy Checks in Liquibase. These samples are representative of how you can structure your own scripts.</p>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/text/checks-sample-scripts-hatnote.flsnp" />
        <h2>Guidance on writing Python code</h2>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-custom-policy-checks-isolation.flsnp" />
        <h3>Liquibase modules</h3>
        <p>When you download the <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">Liquibase Checks extension</a>, you also get a built-in set of <b>Liquibase modules</b> that you can use to easily call the <a href="https://contribute.liquibase.com/code/api/">Liquibase API</a>. For example, there are modules containing functions to:</p>
        <ul>
            <li>Find the ID of a changeset</li>
            <li>Get a list of columns in a table</li>
            <li>Check if a database object is a table, column, index, foreign key, or other object</li>
            <li>Modify internal Python script bindings</li>
        </ul>
        <p>For a list of Liquibase modules and functions you can call on, see <MadCap:xref href="liquibase-python-modules.htm">[%=General.Liquibase%] Python Modules</MadCap:xref>.</p>
        <h3>Python libraries</h3>
        <p>If you're new to Python, read the <a href="https://docs.python.org/3/tutorial/index.html">official Python tutorial</a> before writing any scripts. See the <a href="https://docs.python.org/3/library/index.html#library-index">Python Standard Library</a> for information on built-in functions. You can always import these at the beginning of your script.</p>
        <p>Liquibase comes pre-installed with a GraalPy virtual environment. In addition to the built-in <a href="liquibase-python-modules.htm">Liquibase modules</a>, this virtual environment contains the following Python modules that aren't part of the Python Standard Library:</p>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/text/checks-python-native-modules.flsnp" />
        <p>However, you <b>cannot</b> install additional modules in the built-in virtual environment because it is packaged in the Liquibase checks extension JAR file. To install additional modules, you must <b>create your own virtual environment</b> and install them yourself, including a package containing the Liquibase API. For more information, see <MadCap:xref href="python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref>.</p>
        <h3>Looping behavior</h3>
        <p>When you execute the <code><a href="../../../commands/policy-checks/commands/run.htm">checks run</a></code> command, Liquibase always runs every enabled policy check against <b>every object the check targets</b>. This works the same for Custom Policy Checks. For example, Liquibase runs any custom policy check with a <code>--<MadCap:xref href="../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref></code> setting of:</p>
        <ul>
            <li><code class="language-text">changelog</code>: <b>once per changeset</b> in that changelog. If the changelog uses <code><MadCap:xref href="../../../change-types/include.html">include</MadCap:xref></code> or <code><MadCap:xref href="../../../change-types/includeall.html">includeAll</MadCap:xref></code> to reference child changelogs, the script also runs once per changeset in each of those child changelogs.</li>
            <li><code class="language-text">database</code>: <b>once per database object</b>. Liquibase generates a database <MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref> once and then runs your script against every object in the snapshot. Liquibase runs your check against the schema(s) you specify.</li>
        </ul>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you write a custom policy check that is individually performance-heavy, and you have a very large changelog or database, Liquibase may take a long time to run your custom check against all objects.</p>
        <h3>Script status</h3>
        <p>Your Python script doesn't need to return a value. Liquibase uses an object called <code class="language-text">Status</code> to track the state of your check:</p>
        <ul>
            <li>Whether the check has triggered (fired)</li>
            <li>The message to display as output</li>
        </ul>
        <p>At the point in your script where the check should trigger, use the <code class="language-text">liquibase_utilities</code> module to modify the <code class="language-text">Status</code> object:</p><pre><code class="language-python">import liquibase_utilities as lb

liquibase_status = lb.get_status()

if [trigger condition]:
    liquibase_status.fired = True
    liquibase_status.message = lb.get_script_message()
    sys.exit(1)

False</code></pre>
        <p>Notes on the preceding code sample:</p>
        <ul>
            <li><code class="language-text">liquibase_utilities.get_status().fired</code> is set to <code class="language-text">False</code> by default. You must set it to <code class="language-text">True</code> or else the Liquibase policy checks framework assumes the check didn't trigger.</li>
            <li><code class="language-text">liquibase_utilities.get_script_message()</code> returns the static string you specify when you create your Liquibase custom policy check object in the CLI.<ul><li>If you left <code class="language-text">SCRIPT_MESSAGE</code> blank while configuring your check in the CLI, <code class="language-text">get_script_message()</code> returns an empty string. If you want to add a message later, you have to <MadCap:xref href="../../../commands/policy-checks/commands/customize.htm">customize</MadCap:xref> your check or specify your message directly in your Python script as a string.</li><li>If you want to insert dynamic content into this string, such as the name of a database object, see <MadCap:xref href="dynamic-status-messages.htm">Write Dynamic Status Messages for Custom Policy Checks</MadCap:xref>.</li></ul></li>
            <li>Normally, <code class="language-text">sys.exit(1)</code> signifies a program failure. However, in this case you just want to use it to force Python to exit. In this case, Liquibase is working just how you want it to! You can specify a more meaningful exit code by configuring the severity level of your custom check in the CLI. See <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>.</li>
            <li>Specify <code class="language-text">False</code> at the end of your script to follow Python convention. This code is evaluated if the check doesn't trigger, but has no effect.</li>
        </ul>
        <h2>Sample scripts</h2>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#changelog_example" id="label_changelog_example" class="js-tablist__link">Changelog check</a>
                </li>
                <li class="js-tablist__item"><a href="#database_example" id="label_database_example" class="js-tablist__link">Database check</a>
                </li>
                <li class="js-tablist__item"><a href="#sqlquery_example" id="label_sqlquery_example" class="js-tablist__link">Database SQL Query check</a>
                </li>
            </ul>
            <div id="changelog_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-python"># This script checks for the phrase "DELETE FROM" without "WHERE"

# Modules come from Liquibase, SQLParse, and Python
import liquibase_utilities
import sqlparse
import sys

# Retrieve log handler
# Ex. liquibase_logger.info(message)
liquibase_logger = liquibase_utilities.get_logger()

# Retrieve status handler
liquibase_status = liquibase_utilities.get_status()

# Retrieve all changes in changeset
changes = liquibase_utilities.get_changeset().getChanges()

# Loop through all changes (within a single changeset)
for change in changes:

    # LoadData change types are not currently supported
    if "loaddatachange" in change.getClass().getSimpleName().lower():
        continue

    # Retrieve sql as string, remove extra whitespace
    raw_sql = liquibase_utilities.strip_comments(liquibase_utilities.generate_sql(change)).casefold()
    raw_sql = " ".join(raw_sql.split())

    # Split sql into statements
    raw_statements = liquibase_utilities.split_statements(raw_sql)
    for raw_statement in raw_statements:

        # Get list of token objects, convert to string
        tokens = liquibase_utilities.tokenize(raw_statement)
        keywords = [str(token) for token in tokens if token.is_keyword or isinstance(token, sqlparse.sql.Where)]
        keywords = [keyword for keyword in " ".join(keywords).split()]

        # Look for delete
        if len(keywords) &gt;= 2 and keywords[0] == "delete" and keywords[1] == "from" and "where" not in keywords:
            liquibase_status.fired = True
            liquibase_status.message = liquibase_utilities.get_script_message()
            sys.exit(1)

# Default return code
False</code></pre>
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-changelog.flsnp" />
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-changelog-best-practices.flsnp" />
            </div>
            <div id="database_example" class="js-tabcontent">
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/code/checks-custom-sample-script-database.flsnp" />
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-database.flsnp" />
            </div>
            <div id="sqlquery_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-python">### 
						### Retrieve table from check definition
						###
						table_name = liquibase_utilities.get_arg("TABLE_NAME")
						###
						### Build SQL
						###
						sql_query = f"select count(*) from {table_name};"
						###
						### Execute SQL - returns a list of dictionaries
						###
						row_count = liquibase_utilities.query_for_list(sql_query, None, ";")[0]["COUNT"]
						###
						### Show output
						###
						liquibase_status.fired = True
						status_message = str(liquibase_utilities.get_script_message()).replace("__TABLE_NAME__", f"\"{table_name}\"")
						status_message = status_message.replace("__ROW_COUNT__", f"{row_count}")
						liquibase_status.message = status_message
				sys.exit(1)</code></pre>
            </div>
        </div>
        <p>If you need help deploying a finished check, see <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>.</p>
        <h2>Related links</h2>
        <ul>
            <li><a href="https://github.com/liquibase/custom_policychecks/tree/main/Python">GitHub: liquibase/custom_policychecks</a>
            </li>
        </ul>
    </body>
</html>