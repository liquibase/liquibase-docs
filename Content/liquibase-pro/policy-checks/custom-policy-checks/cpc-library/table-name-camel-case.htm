<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/cpc-library/table-names-camel-case.html" />
        <meta name="description" content="tableNameMustBeCamelCase is a custom policy check that checks for uppercase table names during creation." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><code>tableNameMustBeCamelCase</code>
        </h1>
        <p><code>tableNameMustBeCamelCase </code>is a custom policy check that checks for uppercase table names during creation.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Only basic CREATE statements are supported and constraint names must be provided, not auto-generated.</p>
        <p>Learn how to create and customize the <code>tableNameMustBeCamelCase</code> Liquibase Custom Policy Check using a Python script. </p>
        <p>This example works for <b>relational databases</b>. You can use this check as it is or customize it further to fit your needs in your SQL database.</p>
        <p>For a conceptual overview of this feature, see <MadCap:xref href="../home.htm">Custom Policy Checks</MadCap:xref>.<br /></p>
        <table style="margin-left: auto; margin-right: auto;">
            <col style="width: 69px;" />
            <col />
            <thead>
                <tr>
                    <th>Scope</th>
                    <th>Database</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>Database</td>
                    <td>Relational</td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Liquibase Prerequisites</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <ul>
                    <li>Install Liquibase 4.29.0+</li>
                    <li>Configure a valid <a href="../../../license-key.htm"><MadCap:variable name="General.LBPro" /> license key</a></li>
                    <li>Ensure the Liquibase Checks extension&#160;is installed. <b>In Liquibase 4.31.0+, it is already installed in the <code class="language-text">/liquibase/internal/lib</code> directory, so no action is needed.</b> If the checks JAR is not installed, <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">download <code class="language-text">liquibase-checks-&lt;version&gt;.jar</code></a> and put it in the <code class="language-text">liquibase/lib</code> directory. <ul><li><b>Maven users only:</b> Add this dependency to your <code class="language-text">pom.xml</code> file:</li></ul></li><pre xml:space="preserve"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt;
    &lt;artifactId&gt;liquibase-checks&lt;/artifactId&gt;
    &lt;version&gt;<MadCap:variable name="software-versions.latest-liquibase-checks" />&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
                    <li>Java Development Kit 17+
(available for Open JDK and Oracle JDK)</li>
                    <li>Linux, macOS, or Windows operating system</li>
                    <li>Familiarity with Liquibase concepts: <MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref>, <MadCap:xref href="../../../../concepts/changelogs/changeset.html">Changeset</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/commands/home.htm">Policy Checks Commands</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref>, and <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref></li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Python prerequisites</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Before creating a custom policy check with Python, we recommend being familiar with:</p>
                <ul>
                    <li><a href="https://docs.python.org/3/reference/index.html">Python 3.10.14+</a>. (See here for the <a href="https://docs.python.org/3/tutorial/index.html">official Python tutorial</a>)</li>
                    <li>Optional: General coding and Python best practices which will improve your check performance:</li>
                    <ul>
                        <li>Efficient handling of structured data objects</li>
                        <li>Effective and targeted parsing of text, objects, and SQL</li>
                        <li>Using regular expressions and other pattern-matching tools within Python</li>
                        <li>Using Python <a href="https://docs.python.org/3/tutorial/venv.html">virtual environments</a>. Liquibase comes with a built-in virtual environment for Liquibase Custom Policy Checks. The built-in environment includes Liquibase Python modules and some common external Python modulesâ€”no configuration needed. However, if you want to install additional modules, or if you want your IDE to recognize the Liquibase modules, you must <MadCap:xref href="../python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref> separately.</li>
                    </ul>
                </ul>
                <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Downloading Python itself is not required to create custom checks</b> in the Liquibase checks framework, but it may be useful to test checks against Python 3.10.14+.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Step-by-step</h2>
        <p>These steps describe how to create the Custom Policy Check. It does not exist by default in <MadCap:variable name="General.LBPro" />.</p>
        <ol>
            <li>Create a Check Settings file:&#160;<MadCap:xref href="../../workflows/checks-settings-file.htm">Use the Checks Settings Configuration File</MadCap:xref></li>
            <li>
                <p>Add this code to your <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/workflows/checks-settings-file.html">Checks Settings file</a>: </p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption>tableNameMustBeCamelCase Quotes Python Script</MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">###
### This script checks for camelCase table names during createTable
###
### Notes:
### 1. Only basic createTable statements are supported

###
### Helpers come from Liquibase
###
import re
import sys
import liquibase_utilities


def find_substring_indices(string_list, substring):
    """
    Finds the indices of list elements containing a specified substring.

    Args:
        string_list: A list of strings.
        substring: The substring to search for.

    Returns:
        A list of indices where the substring is found, or an empty list if not found.
    """
    return [index for index, string in enumerate(string_list) if substring in string.casefold()]

def is_camel_case(input_string):
    """
    Checks if a string is in camel case.

    A string is considered camel case if it:
    - Contains only letters (a-z, A-Z) and optionally numbers (0-9).
    - Contains both lowercase and uppercase letters.
    - Does not start with a number.

    Args:
        input_string: The string to check.

    Returns:
        True if the string is in camel case, False otherwise.
    """
    if not isinstance(input_string, str):
        return False

    if not re.match(r"^[a-zA-Z][a-zA-Z0-9]*$", input_string):
        return False

    if input_string[0].isdigit():
        return False
    
    if not any(char.islower() for char in input_string) or not any(char.isupper() for char in input_string):
      return False

    return True

def extract_substring(text, start_char, end_char):
    """
    Extracts the substring between the first occurrence of start_char and end_char in text.

    Args:
        text: The string to search within.
        start_char: The character marking the beginning of the substring.
        end_char: The character marking the end of the substring.

    Returns:
        The extracted substring, or an empty string if start_char or end_char are not found,
        or if end_char appears before start_char.
    """
    try:
        start_index = text.index(start_char) + 1
        end_index = text.index(end_char, start_index)
        return text[start_index:end_index]
    except ValueError:
        return ""


###
### Retrieve log handler
### Ex. liquibase_logger.info(message)
###
liquibase_logger = liquibase_utilities.get_logger()

###
### Retrieve status handler
###
liquibase_status = liquibase_utilities.get_status()

###
### Retrieve all changes in changeset
###
changes = liquibase_utilities.get_changeset().getChanges()

###
### Loop through all changes
###
for change in changes:
    ###
    ###
    ### Split SQL into a list of strings to remove whitespace
    ###
    sql_list = liquibase_utilities.generate_sql(change).split()
    # print ("sql_list:" + str(sql_list))
    
    ###
    ### Locate CREATE TABLE in list
    ###
    if "create" in map(str.casefold, sql_list) and "table" in map(str.casefold, sql_list):
        index_table = [token.lower() for token in sql_list].index("table")
        if index_table + 1 &lt; len(sql_list):
            table = sql_list[index_table + 1]

            if "\"" in table:
                table_name = extract_substring (table, "\"", "\"")
            else:
                table_name = table

            isCamelCase = is_camel_case(table_name)

            print ("Table name: " + table_name + ", " + str(isCamelCase))


            if not isCamelCase:
                liquibase_status.fired = True
                status_message = "Table name \"" + f"{table_name}" + "\" is NOT camelCase."
                liquibase_status.message = status_message
                sys.exit(1)

###
### Default return code
###
False</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </li>
            <li>
                <p><b>Initiate the customization process</b>. In the CLI, run this command:<br /><code><code class="language-text">liquibase checks customize --check-name=CustomCheckTemplate</code></code><br />The CLI prompts you to finish configuring your file. A message displays:</p><pre><code class="language-text">This check cannot be customized directly because one or more fields does not have a default value.</code></pre>
                <p>Liquibase will then create a copy of <code class="language-text">CustomCheckTemplate</code> and initiate the customization workflow.</p>
            </li>
            <li>
                <p>Give your check a short name so you can easily identify what Python script it is associated with (up to 64 alpha-numeric characters only).<br />In this example we will name the check:<br /><code>tableNameMustBeCamelCase</code></p>
            </li>
            <li>
                <p>Set the Severity to return a code of 0-4 when triggered. These severity codes allow you to determine if the job moves forward or stops when this check triggers. <br />Learn more here:&#160;<MadCap:xref href="../../workflows/automation-severity-exit-code.htm">Use Policy Checks in Automation: Severity and Exit Code</MadCap:xref><br />options: <code>'INFO'=0</code>, <code>'MINOR'=1</code>,<code> 'MAJOR'=2</code>,<code> 'CRITICAL'=3</code>, <code>'BLOCKER'=4</code></p>
            </li>
            <li>Set <b><code class="language-text">SCRIPT_DESCRIPTION</code></b>. In this example, we will set the description to:<pre><code class="language-text">This script ensures table names are camelCase during table creation.</code></pre></li>
            <li>Set <b><code class="language-text">SCRIPT_SCOPE</code></b>. In this example, we will set the scope to <code class="language-text">changelog</code>.                 </li>
            <ul>
                <li><code class="language-text">changelog</code>: for example, if your check looks for syntax patterns or attributes in your Liquibase&#160;<MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref> (the changes you author in your repository). With this value, the check runs <b>once per <MadCap:variable name="General.changeset"></MadCap:variable></b>. </li>
            </ul>
            <li>Set the <b><code class="language-text">SCRIPT_MESSAGE</code></b>. This message will display when the check is triggered. In this example we will use:<br /><code class="language-text">Table __TABLE_NAME__ must be camelCase. It is recommended you fix the casing before proceeding.</code></li>
            <li>Set the <b><code class="language-text">SCRIPT_PATH</code></b>. This is the relative path where your script is stored in relation to the changelog specified in <code class="language-text">--changelog-file</code>, whether it is stored locally or in a repository. <br />In this example, we will set the path to: <code class="language-text">scripts/table-names-camelcase.py</code>.</li>
            <li>This policy check does not require a <b><code class="language-text">SCRIPT_ARGUMENT</code></b>, so leave this field blank.</li>
            <li>Set the <b><code class="language-text">REQUIRES_SNAPSHOT</code></b>. If your script scope is <code class="language-text">changelog</code>, set whether the check requires a database <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref>. Specify <code class="language-text">true</code> if your check needs to inspect database objects. (If your script scope is <code class="language-text">database</code>, Liquibase always takes a snapshot, so this prompt does not appear.)</li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The larger your database, the more performance impact a snapshot causes. If you cannot run a snapshot due to memory limitations, see <MadCap:xref href="../../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</p>
        </ol>
        <p>You have now successfully created and customized a policy check!</p>
        <h2>Next steps</h2>
        <ul>
            <li>
                <MadCap:xref href="../run-check.htm">Run a Custom Policy Check</MadCap:xref>
            </li>
        </ul>
        <h3>Related Topics</h3>
        <p>
            <MadCap:xref href="../sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>
        </p>
    </body>
</html>