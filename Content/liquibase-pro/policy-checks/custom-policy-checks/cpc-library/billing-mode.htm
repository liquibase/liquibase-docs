<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1><code>billingMode</code>
        </h1>
        <p><code>billingMode </code>is a custom policy check that  ensures the billing mode for new tables is PROVISIONED.</p>
        <h2>Prerequisites</h2>
        <ul>
            <li>Create a Check Settings file:&#160;<MadCap:xref href="../../workflows/checks-settings-file.htm">Use the Checks Settings Configuration File</MadCap:xref></li>
        </ul>
        <h2>Step-by-step</h2>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">These steps describe how to create the custom policy check. It does not exist by default in <MadCap:variable name="General.LBPro" />.</p>
        <ol>
            <li>
                <p>Add this code to your <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/workflows/checks-settings-file.html">Checks Settings file</a>: </p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption>
                        <p>billingMode Python Script</p>
                    </MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">###
### This script ensures the billing mode for new tables is PROVISIONED.
###
### Notes:

###
### Helpers come from Liquibase
###
import sys
import liquibase_utilities

###
### Retrieve log handler
### Ex. liquibase_logger.info(message)
###
liquibase_logger = liquibase_utilities.get_logger()

###
### Retrieve status handler
###
liquibase_status = liquibase_utilities.get_status()

###
### Retrive billing mode from check definition
###
billing_mode = liquibase_utilities.get_arg("BILLING_MODE")
if len(billing_mode) == 0:
    liquibase_logger.error(f"Missing billing mode from check definition.")
    sys.exit(1)

###
### Retrieve all changes in changeset
###
changes = liquibase_utilities.get_changeset().getChanges()

###
### Loop through all changes
###
for change in changes:
    change_type = change.getClass().getSimpleName()
    if change_type.casefold() != "DynamoCreateTableChange".casefold():
        liquibase_logger.info(f"{change_type} changetype skipped.")
        continue
    new_billing_mode = change.getBillingMode()
    if new_billing_mode.casefold() != billing_mode.casefold():
        liquibase_status.fired = True
        liquibase_status.message = str(liquibase_utilities.get_script_message()).replace("__BILLING_MODE__", f"'{billing_mode}'")
        sys.exit(1)

###
### Default return code
###
False</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </li>
            <li>
                <p>In the CLI, enter this command:<br /><code>liquibase checks copy --check-name=UserDefinedLabelCheck</code></p>
            </li>
            <li>
                <p>Give your check a short name for easy identification (up to 64 alpha-numeric characters only) such as this:<br /><code>billingMode</code></p>
            </li>
            <li>
                <p>Set the Severity to return a code of 0-4 when triggered. These severity codes allow you to determine if the job moves forward or stops when this check triggers. <br />Learn more here:&#160;<MadCap:xref href="../../workflows/automation-severity-exit-code.htm">Use Policy Checks in Automation: Severity and Exit Code</MadCap:xref><br />options: 'INFO'=0, 'MINOR'=1, 'MAJOR'=2, 'CRITICAL'=3, 'BLOCKER'=4 [INFO]</p>
            </li>
            <li>
                <p>Set the OPERATOR to the CONTAINS&#160;option.</p>
            </li>
            <li>
                <p>Set the SEARCH_STRING (options: a string, or a valid regular expression): <code>(?i:crq\d+)</code></p>
            </li>
        </ol>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>
                <p>Sample Passing Changeset</p>
            </MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">--changeset user.name:films_01 labels:CRQ123456
create table films_01 (
  id int, 
  name varchar(30)
);</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>
                <p>Sample Failing Changeset</p>
            </MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">--changeset user.name:films_01 labels:v.1.0.1
create table films_01 (
  id int, 
  name varchar(30)
);</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetCaption>
                <p>Sample Error Message</p>
            </MadCap:codeSnippetCaption>
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">CHANGELOG CHECKS
----------------
Checks completed validation of the changelog and found the following issues:

Check Name:         Check for User Defined Label (CRQLabelRequired)
Changeset ID:       table_missing_crq
Changeset Filepath: changelogs/ddl/missing_crq.sql
Check Severity:     INFO (Return code: 4)
Message:            Changeset label: '' did not match the pattern: matches the regular expression '(?i:crq\d+)'. Please review this label.</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
    </body>
</html>