<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:conditions="Default.EXCLUDE">
    <head>
    </head>
    <body>
        <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><code>illegalAlter</code>
        </h1>
        <p><code>illegalAlter </code>is a custom policy check that addresses <a href="https://www.bytebase.com/blog/fault-in-schema-migration-outage/">this MySQL 8.0 issue</a>.</p>
        <p>Learn how to create and customize the <code>illegalAlter</code> Liquibase Custom Policy Check using a Python script. For a conceptual overview of this feature, see <MadCap:xref href="../home.htm">Custom Policy Checks</MadCap:xref>.</p>
        <h2>Prerequisites</h2>
        <h3>Liquibase prerequisites</h3>
        <ul>
            <li>Install Liquibase 4.29.0+</li>
            <li>Configure a valid <a href="../../../license-key.htm"><MadCap:variable name="General.LBPro" /> license key</a></li>
            <li>Ensure the Liquibase Checks extension&#160;is installed. <b>In Liquibase 4.31.0+, it is already installed in the <code>/liquibase/internal/lib</code> directory, so no action is needed.</b> If the checks JAR is not installed, <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">download <code>liquibase-checks-&lt;version&gt;.jar</code></a> and put it in the <code>liquibase/lib</code> directory. <ul><li><b>Maven users only:</b> Add this dependency to your <code>pom.xml</code> file:</li></ul></li><pre xml:space="preserve"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt;
    &lt;artifactId&gt;liquibase-checks&lt;/artifactId&gt;
    &lt;version&gt;<MadCap:variable name="software-versions.latest-liquibase-checks" />&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
            <li>Java Development Kit 17+
(available for Open JDK and Oracle JDK)</li>
            <li>Linux, macOS, or Windows operating system</li>
            <li>Familiarity with Liquibase concepts: <MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref>, <MadCap:xref href="../../../../concepts/changelogs/changeset.html">Changeset</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/commands/home.htm">Policy Checks Commands</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref>, and <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref></li>
        </ul>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Python prerequisites</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Before creating a custom policy check with Python, we recommend being familiar with:</p>
                <ul>
                    <li><a href="https://docs.python.org/3/reference/index.html">Python 3.10.14+</a>. (See here for the <a href="https://docs.python.org/3/tutorial/index.html">official Python tutorial</a>)</li>
                    <li>Optional: General coding and Python best practices which will improve your check performance:</li>
                    <ul>
                        <li>Efficient handling of structured data objects</li>
                        <li>Effective and targeted parsing of text, objects, and SQL</li>
                        <li>Using regular expressions and other pattern-matching tools within Python</li>
                        <li>Using Python <a href="https://docs.python.org/3/tutorial/venv.html">virtual environments</a>. Liquibase comes with a built-in virtual environment for Liquibase Custom Policy Checks. The built-in environment includes Liquibase Python modules and some common external Python modulesâ€”no configuration needed. However, if you want to install additional modules, or if you want your IDE to recognize the Liquibase modules, you must <MadCap:xref href="../python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref> separately.</li>
                    </ul>
                </ul>
                <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Downloading Python itself is not required to create custom checks</b> in the Liquibase checks framework, but it may be useful to test checks against Python 3.10.14+.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Step-by-step</h2>
        <p>These steps describe how to create the Custom Policy Check. It does not exist by default in <MadCap:variable name="General.LBPro" />.</p>
        <ol>
            <li>Create a Check Settings file:&#160;<MadCap:xref href="../../workflows/checks-settings-file.htm">Use the Checks Settings Configuration File</MadCap:xref></li>
            <li>
                <p>Add this code to your <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/workflows/checks-settings-file.html">Checks Settings file</a>: </p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption>
                        <p>illegalAlter Quotes Python Script</p>
                    </MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">import sys
import liquibase_utilities

#
# This check addresses this MySQL 8.0 issue
# 
# https://www.bytebase.com/blog/fault-in-schema-migration-outage/
#
#

def isMySQL8():
    database = liquibase_utilities.get_database()
    product_name = str(database.getDatabaseProductName())
    version = str(database.getDatabaseProductVersion())
    logger.info("Database version is " + version)
    if product_name != "MySQL" or version.startswith("8.0") == False:
        logger.info("Skipping " + product_name + " version " + version)
        return False
    return True

def table_exists(table_name):
    table = None 
    logger.info("Table name " + table_name)
    tables = snapshot['snapshot']['objects']['liquibase.structure.core.Table']
    for t in tables:
        if table_name == t['table']['name']:
            table = t
            break
    return table

def column_exists(column_name):
    column = None
    columns = snapshot['snapshot']['objects']['liquibase.structure.core.Column']
    for c in columns:
        if column_name == c['column']['name']:
            column = c['column']
            break
    if column != None:
        coltype = column['type']['typeName']
        if column == None or coltype != "VARCHAR": 
            return None
    return column

def statementIsAlterTable(tokens):
    #
    # Make sure the SQL modify statement is of the form
    # ALTER TABLE &lt;table&gt; MODIFY &lt;column&gt; &lt;data type&gt;
    # 
    alter_to_upper = str(tokens[0]).upper()
    table_to_upper = str(tokens[2]).upper()
    modify_to_upper = str(tokens[6]).upper()
    if (alter_to_upper != 'ALTER' or table_to_upper != 'TABLE' or modify_to_upper != 'MODIFY'):
        return False 
    return True

#
# Get the logger handle
#
logger = liquibase_utilities.get_logger()

if not isMySQL8():
    status = liquibase_utilities.get_status()
    status.fired = False
    sys.exit(1)

script_name = liquibase_utilities.get_script_path()
message = "The script name is '" + script_name + "'"
logger.info(message)

#
# Get the JSON snapshot object
#
snapshot = liquibase_utilities.get_snapshot()

#
# Get the SQL
# Split into individual statements
#
changes = liquibase_utilities.get_changeset().getChanges()
for change in changes:
    sql = liquibase_utilities.generate_sql(change)
    sql = liquibase_utilities.strip_comments(sql)
    logger.info("Processing SQL " + sql)
    statements = liquibase_utilities.split_statements(sql)
    for statement in statements:
        #
        # Break into tokens
        #
        tokens = liquibase_utilities.tokenize(statement)
        if not statementIsAlterTable(tokens):
            continue 

        #
        # Make sure the new datatype is VARCHAR
        #
        data_type = str(tokens[10])
        if not data_type.upper().startswith('VARCHAR'):
            continue 

        #
        # Check to see if the table and column exist and the data type is VARCHAR
        #
        table_name = str(tokens[4])
        table = table_exists(table_name)
        if table == None: 
            continue 
        column_name = str(tokens[8])
        column = column_exists(column_name)
        if column == None:
            continue 

        #
        # Check the size
        # If it is out of range then set the status.fired to True and create a message
        #
        col_size_text = column['type']['columnSize'].split('!')[0]
        col_size = int(col_size_text)
        mod_size = data_type.replace("(","").replace(")","").replace("VARCHAR","")
        i_mod_size = int(mod_size)
        if col_size &lt; 256 and i_mod_size &gt;= 256:
            status = liquibase_utilities.get_status()
            status.fired = True
            status.message = liquibase_utilities.get_script_message()
            status.message = status.message.replace("&lt;TABLE_NAME&gt;",table['table']['name'])
            status.message = status.message.replace("&lt;COLUMN_NAME&gt;",column['name'])
            status.message = status.message.replace("&lt;OLD_SIZE&gt;", str(col_size))
            status.message = status.message.replace("&lt;NEW_SIZE&gt;", str(mod_size))
            status.message = status.message.replace("&lt;SQL&gt;", sql)
            if status.message == None:
                status.message = \
                    "Column '" + table_name + "." + column['name'] + \
                    "' has an illegal size modification from '" + str(col_size) + "' to '" + mod_size + "' in SQL %n'" + \
                    sql + "'"
            sys.exit(1)
#
# Fall through to return False
#
False</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </li>
            <li>
                <p><b>Initiate the customization process</b>. In the CLI, run this command:<br /><code><code>liquibase checks customize --check-name=CustomCheckTemplate</code></code><br />The CLI prompts you to finish configuring your file. A message displays:</p><pre><code>This check cannot be customized directly because one or more fields does not have a default value.</code></pre>
                <p>Liquibase will then create a copy of <code>CustomCheckTemplate</code> and initiate the customization workflow.</p>
            </li>
            <li>
                <p>Give your check a short name so you can easily identify what Python script it is associated with (up to 64 alpha-numeric characters only).<br />In this example we will name the check:<br /><code>illegalAlter</code></p>
            </li>
            <li>
                <p>Set the Severity to return a code of 0-4 when triggered. These severity codes allow you to determine if the job moves forward or stops when this check triggers. <br />Learn more here:&#160;<MadCap:xref href="../../workflows/automation-severity-exit-code.htm">Use Policy Checks in Automation: Severity and Exit Code</MadCap:xref><br />options: <code>'INFO'=0</code>, <code>'MINOR'=1</code>,<code> 'MAJOR'=2</code>,<code> 'CRITICAL'=3</code>, <code>'BLOCKER'=4</code></p>
            </li>
            <li>Set <b><code>SCRIPT_DESCRIPTION</code></b>. In this example, we will set the description to:<pre><code>This script checks for quotes in identifier names.</code></pre></li>
            <li>Set <b><code>SCRIPT_SCOPE</code></b>. In this example, we will set the scope to <code>database</code>.                 <p>You should set the scope to <code>changelog</code> or <code>database</code> depending on what your custom script does:</p></li>
            <ul>
                <li><code>changelog</code>: for example, if your check looks for syntax patterns or attributes in your Liquibase&#160;<MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref> (the changes you author in your repository). With this value, the check runs <b>once per <MadCap:variable name="General.changeset"></MadCap:variable></b>. </li>
                <li><code>database</code>: for example, if your check looks for the presence of keys, indexes, or table name patterns in your database schema (including Liquibase&#160;<MadCap:xref href="../../../../concepts/tracking-tables/tracking-tables.htm">Tracking Tables</MadCap:xref>). With this value, the check runs <b>once for each database object</b>.</li>
            </ul>
            <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">It is a best practice for your custom checks to have <b>only one scope</b>, not both scopes.</p>
            <li>Set the <b><code>SCRIPT_MESSAGE</code></b>. This message will display when the check is triggered. In this example we will use:<br /><code>This script identified quotes in identifier names.</code></li>
            <li>Set the <b><code>SCRIPT_PATH</code></b>. This is the relative path where your script is stored in relation to the changelog specified in <code>--changelog-file</code>, whether it is stored locally or in a repository. <br />In this example, we will set the path to: <code>scripts/custom_check_no_tables.py</code>.</li>
            <li>Set the <b><code>SCRIPT_ARGUMENT</code></b>. This allows you to pass dynamic information into the Custom Policy Check without modifying the Python code. <MadCap:snippetText src="../../../../Z_Resources/Snippets/text/checks-get-arg-example.flsnp" /> If you <MadCap:xref href="../../../../commands/policy-checks/commands/customize.htm">customize</MadCap:xref> your check later, you can specify a new value in the&#160;CLI. If you don't need dynamic arguments, leave this field blank.</li>
            <li>Set the <b><code>REQUIRES_SNAPSHOT</code></b>. If your script scope is <code>changelog</code>, set whether the check requires a database <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref>. Specify <code>true</code> if your check needs to inspect database objects. (If your script scope is <code>database</code>, Liquibase always takes a snapshot, so this prompt does not appear.)</li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The larger your database, the more performance impact a snapshot causes. If you cannot run a snapshot due to memory limitations, see <MadCap:xref href="../../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</p>
        </ol>
        <p>You have now successfully created and customized a policy check!</p>
        <h2>Next steps</h2>
        <ul>
            <li>
                <MadCap:xref href="../run-check.htm">Run a Custom Policy Check</MadCap:xref>
            </li>
        </ul>
        <h3>Related Topics</h3>
        <p>
            <MadCap:xref href="../sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>
        </p>
    </body>
</html>