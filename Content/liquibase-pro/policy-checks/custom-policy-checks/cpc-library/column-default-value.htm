<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/cpc-library/column-default-value.html" />
        <meta name="description" content="collectionMustHaveValidator is a custom policy check that  checks for a validator when creating a new collection." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><code>columnDefaultValue</code>
        </h1>
        <p><code>columnDefaultValue</code> is a custom policy check that  ensures new columns do not have default values explicity listed.</p>
        <p>Learn how to create and customize the <code>columnDefaultValue</code> Liquibase Custom Policy Check using a Python script. </p>
        <p>This example was tested on <b>Oracle</b>. You can use this check as it is or customize it further to fit your needs in your SQL database.</p>
        <p>For a conceptual overview of this feature, see <MadCap:xref href="../home.htm">Custom Policy Checks</MadCap:xref>.</p>
        <table style="margin-left: auto; margin-right: auto;">
            <col style="width: 69px;" />
            <col />
            <thead>
                <tr>
                    <th>Scope</th>
                    <th>Database</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>database</td>
                    <td>Oracle</td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Liquibase Prerequisites</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <ul>
                    <li>Install Liquibase 4.29.0+</li>
                    <li>Configure a valid <a href="../../../license-key.htm"><MadCap:variable name="General.LBPro" /> license key</a></li>
                    <li>Ensure the Liquibase Checks extension&#160;is installed. <b>In Liquibase 4.31.0+, it is already installed in the <code>/liquibase/internal/lib</code> directory, so no action is needed.</b> If the checks JAR is not installed, <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">download <code>liquibase-checks-&lt;version&gt;.jar</code></a> and put it in the <code>liquibase/lib</code> directory. <ul><li><b>Maven users only:</b> Add this dependency to your <code>pom.xml</code> file:</li></ul></li><pre xml:space="preserve"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt;
    &lt;artifactId&gt;liquibase-checks&lt;/artifactId&gt;
    &lt;version&gt;<MadCap:variable name="software-versions.latest-liquibase-checks" />&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
                    <li>Java Development Kit 17+
(available for Open JDK and Oracle JDK)</li>
                    <li>Linux, macOS, or Windows operating system</li>
                    <li>Familiarity with Liquibase concepts: <MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref>, <MadCap:xref href="../../../../concepts/changelogs/changeset.html">Changeset</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/commands/home.htm">Policy Checks Commands</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref>, and <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref></li>
                </ul>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Python prerequisites</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Before creating a custom policy check with Python, we recommend being familiar with:</p>
                <ul>
                    <li><a href="https://docs.python.org/3/reference/index.html">Python 3.10.14+</a>. (See here for the <a href="https://docs.python.org/3/tutorial/index.html">official Python tutorial</a>)</li>
                    <li>Optional: General coding and Python best practices which will improve your check performance:</li>
                    <ul>
                        <li>Efficient handling of structured data objects</li>
                        <li>Effective and targeted parsing of text, objects, and SQL</li>
                        <li>Using regular expressions and other pattern-matching tools within Python</li>
                        <li>Using Python <a href="https://docs.python.org/3/tutorial/venv.html">virtual environments</a>. Liquibase comes with a built-in virtual environment for Liquibase custom policy checks. The built-in environment includes Liquibase Python modules and some common external Python modulesâ€”no configuration needed. However, if you want to install additional modules, or if you want your IDE to recognize the Liquibase modules, you must <MadCap:xref href="../python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref> separately.</li>
                    </ul>
                </ul>
                <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Downloading Python itself is not required to create custom checks</b> in the Liquibase checks framework, but it may be useful to test checks against Python 3.10.14+.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Step-by-step</h2>
        <p>These steps describe how to create the Custom Policy Check. It does not exist by default in <MadCap:variable name="General.LBPro" />.</p>
        <ol>
            <li>Create a Check Settings file:&#160;<MadCap:xref href="../../workflows/checks-settings-file.htm">Use the Checks Settings Configuration File</MadCap:xref></li>
            <li>
                <p>Add this code to your <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/workflows/checks-settings-file.html">Checks Settings file</a>: </p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption>
                        <p>columnDefaultValue Python Script</p>
                    </MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">###
### This script ensures new columns do not have default values explicity listed
###
### Notes:
### 1. Only basic ALTER table statements are supported
### 2. Single and multiple columns in an alter statement *are* supported
###

###
### Helpers come from Liquibase
###
import sys
import liquibase_utilities

###
### Functions
###

###
### Retrieve log handler
### Ex. liquibase_logger.info(message)
###
liquibase_logger = liquibase_utilities.get_logger()

###
### Retrieve status handler
###
liquibase_status = liquibase_utilities.get_status()

###
### Retrieve all changes in changeset
###
changes = liquibase_utilities.get_changeset().getChanges()

###
### Loop through all changes
###
for change in changes:
    ###
    ### LoadData change types are not currently supported
    ###
    if "loaddatachange" in change.getClass().getSimpleName().lower():
        liquibase_logger.info("LoadData change type not supported. Statement skipped.")
        continue
    ###
    ### Retrieve sql as string, remove extra whitespace
    ###
    raw_sql = liquibase_utilities.strip_comments(liquibase_utilities.generate_sql(change)).casefold()
    raw_sql = " ".join(raw_sql.split())
    ###
    ### Split sql into statements
    ###
    raw_statements = liquibase_utilities.split_statements(raw_sql)
    for raw_statement in raw_statements:
        ###
        ### Split raw_statement into list, look for alter table, remove schema if provided
        ###
        sql_list = raw_statement.split()
        try:
            if sql_list[0] == "alter" and sql_list[1] == "table" and sql_list[3] == "add":
                ### Table name
                table_name = sql_list[2].split(".")[-1]
                start = table_name.rfind("(")
                if start != -1:
                    table_name = table_name[0:start]
            else:
                raise UserWarning
        except (IndexError, ValueError):
            liquibase_logger.warning(f"Unsupported Alter statement skipped: {raw_statement}")
            continue
        except UserWarning:
            liquibase_logger.info(f"Non Alter statement skipped: {raw_statement}")
            continue
        ###
        ### ALTER
        ###
        found = False
        search_string = " add ("
        start = raw_statement.find(search_string)
        ###
        ### ALTER TABLE NAME ADD column type [DEFAULT value]
        ###
        if start == -1:
            if raw_statement.find("default") != -1:
                found = True
                column_name = sql_list[4]
        ###
        ### ALTER TABLE NAME ADD (column1 type1 [DEFAULT value1], column2 type2, [DEFAULT value2], ...)
        ###
        else:
            start += len(search_string)
            end = raw_statement.rfind(")")
            if end != -1:
                column_list = raw_statement[start:end].split(",")
                for column in column_list:
                    if "default" in column:
                        found = True
                        column_name = column.split()[0].strip()
        ###
        ### Report matches
        ###
        if found == True:
            liquibase_status.fired = True
            status_message = str(liquibase_utilities.get_script_message()).replace("__COLUMN_NAME__", f"\"{column_name}\"")
            status_message = status_message.replace("__TABLE_NAME__", f"\"{table_name}\"")
            liquibase_status.message = status_message
            sys.exit(1)

###
### Default return code
###
False</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </li>
            <li>
                <p><b>Initiate the customization process</b>. In the CLI, run this command:<br /><code><code>liquibase checks customize --check-name=CustomCheckTemplate</code></code><br />The CLI prompts you to finish configuring your file. A message displays:</p><pre><code>This check cannot be customized directly because one or more fields does not have a default value.</code></pre>
                <p>Liquibase will then create a copy of <code>CustomCheckTemplate</code> and initiate the customization workflow.</p>
            </li>
            <li>
                <p>Give your check a short name so you can easily identify what Python script it is associated with (up to 64 alpha-numeric characters only).<br />In this example we will name the check:<br /><code>columnDefaultValue</code></p>
            </li>
            <li>
                <p>Set the Severity to return a code of 0-4 when triggered. These severity codes allow you to determine if the job moves forward or stops when this check triggers. <br />Learn more here:&#160;<MadCap:xref href="../../workflows/automation-severity-exit-code.htm">Use Policy Checks in Automation: Severity and Exit Code</MadCap:xref><br />options: <code>'INFO'=0</code>, <code>'MINOR'=1</code>,<code> 'MAJOR'=2</code>,<code> 'CRITICAL'=3</code>, <code>'BLOCKER'=4</code></p>
            </li>
            <li>Set <b><code>SCRIPT_DESCRIPTION</code></b>. In this example, we will set the description to:<pre><code>This script ensures new columns do not have default values explicity listed.</code></pre></li>
            <li>Set <b><code>SCRIPT_SCOPE</code></b>. In this example, we will set the scope to <code>changelog</code>. The Python sample provided in this tutorial requires it.</li>
            <ul>
                <li><code>changelog</code>: for example, if your check looks for syntax patterns or attributes in your Liquibase&#160;<MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref> (the changes you author in your repository). With this value, the check runs <b>once per <MadCap:variable name="General.changeset"></MadCap:variable></b>. </li>
            </ul>
            <li>Set the <b><code>SCRIPT_MESSAGE</code></b>. This message will display when the check is triggered. In this example we will use:<br /><code>This script identified  that Column __COLUMN_NAME__ in table __TABLE_NAME__ should not have a default value.</code></li>
            <li>Set the <b><code>SCRIPT_PATH</code></b>. This is the relative path where your script is stored in relation to the changelog specified in <code>--changelog-file</code>, whether it is stored locally or in a repository. <br />In this example, we will set the path to: <code>scripts/column-default-value.py</code>.</li>
            <li>This check does not need a <b><code>SCRIPT_ARGUMENT</code></b>, so leave it blank.</li>
            <li>Set the <b><code>REQUIRES_SNAPSHOT</code></b>. If your script scope is <code>changelog</code>, set whether the check requires a database <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref>. Specify <code>true</code> if your check needs to inspect database objects. (If your script scope is <code>database</code>, Liquibase always takes a snapshot, so this prompt does not appear.)</li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The larger your database, the more performance impact a snapshot causes. If you cannot run a snapshot due to memory limitations, see <MadCap:xref href="../../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</p>
        </ol>
        <p>You have now successfully created and customized a policy check!</p>
        <h2>Next steps</h2>
        <ul>
            <li>
                <MadCap:xref href="../run-check.htm">Run a Custom Policy Check</MadCap:xref>
            </li>
        </ul>
        <h3>Related Topics</h3>
        <p>
            <MadCap:xref href="../sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>
        </p>
    </body>
</html>