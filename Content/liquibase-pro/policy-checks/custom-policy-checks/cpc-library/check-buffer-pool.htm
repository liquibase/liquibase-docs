<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/cpc-library/check-buffer-pool.html" />
        <meta name="description" content="checkBufferPool is a custom policy check that  checks that the Buffer Pool specified in the tablespace matches the default Buffer Pool for the database." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>
            <head>
            </head>
        </h1>
        <body>
            <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
            <h1><code>checkBufferPool</code>
            </h1>
            <p><code>checkBufferPool</code> is a custom policy check that  checks that the Buffer Pool specified in the tablespace matches the default Buffer Pool for the database.</p>
            <p>Learn how to create and customize the <code>checkBufferPool</code> Liquibase Custom Policy Check using a Python script. For a conceptual overview of this feature, see <MadCap:xref href="../home.htm">Custom Policy Checks</MadCap:xref>.</p>
            <h2>Prerequisites</h2>
            <h3>Liquibase prerequisites</h3>
            <ul>
                <li>Install Liquibase 4.29.0+</li>
                <li>Configure a valid <a href="../../../license-key.htm"><MadCap:variable name="General.LBPro" /> license key</a></li>
                <li>Ensure the Liquibase Checks extension&#160;is installed. <b>In Liquibase 4.31.0+, it is already installed in the <code class="language-text">/liquibase/internal/lib</code> directory, so no action is needed.</b> If the checks JAR is not installed, <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">download <code class="language-text">liquibase-checks-&lt;version&gt;.jar</code></a> and put it in the <code class="language-text">liquibase/lib</code> directory. <ul><li><b>Maven users only:</b> Add this dependency to your <code class="language-text">pom.xml</code> file:</li></ul></li><pre xml:space="preserve"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt;
    &lt;artifactId&gt;liquibase-checks&lt;/artifactId&gt;
    &lt;version&gt;<MadCap:variable name="software-versions.latest-liquibase-checks" />&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
                <li>Java Development Kit 17+
(available for Open JDK and Oracle JDK)</li>
                <li>Linux, macOS, or Windows operating system</li>
                <li>Familiarity with Liquibase concepts: <MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref>, <MadCap:xref href="../../../../concepts/changelogs/changeset.html">Changeset</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/subcommands/home.htm">Policy Checks Commands</MadCap:xref>, <MadCap:xref href="../../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref>, and <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref></li>
            </ul>
            <MadCap:dropDown>
                <MadCap:dropDownHead>
                    <MadCap:dropDownHotspot>Python prerequisites</MadCap:dropDownHotspot>
                </MadCap:dropDownHead>
                <MadCap:dropDownBody>
                    <p>Before creating a custom policy check with Python, we recommend being familiar with:</p>
                    <ul>
                        <li><a href="https://docs.python.org/3/reference/index.html">Python 3.10.14+</a>. (See here for the <a href="https://docs.python.org/3/tutorial/index.html">official Python tutorial</a>)</li>
                        <li>Optional: General coding and Python best practices which will improve your check performance:</li>
                        <ul>
                            <li>Efficient handling of structured data objects</li>
                            <li>Effective and targeted parsing of text, objects, and SQL</li>
                            <li>Using regular expressions and other pattern-matching tools within Python</li>
                            <li>Using Python <a href="https://docs.python.org/3/tutorial/venv.html">virtual environments</a>. Liquibase comes with a built-in virtual environment for Liquibase Custom Policy Checks. The built-in environment includes Liquibase Python modules and some common external Python modules—no configuration needed. However, if you want to install additional modules, or if you want your IDE to recognize the Liquibase modules, you must <MadCap:xref href="../python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref> separately.</li>
                        </ul>
                    </ul>
                    <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Downloading Python itself is not required to create custom checks</b> in the Liquibase checks framework, but it may be useful to test checks against Python 3.10.14+.</p>
                </MadCap:dropDownBody>
            </MadCap:dropDown>
            <h2>Step-by-step</h2>
            <p>These steps describe how to create the Custom Policy Check. It does not exist by default in <MadCap:variable name="General.LBPro" />.</p>
            <ol>
                <li>Create a Check Settings file:&#160;<MadCap:xref href="../../workflows/checks-settings-file.htm">Use the Checks Settings Configuration File</MadCap:xref></li>
                <li>
                    <p>Add this code to your <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/workflows/checks-settings-file.html">Checks Settings file</a>: </p>
                    <MadCap:codeSnippet>
                        <MadCap:codeSnippetCopyButton />
                        <MadCap:codeSnippetCaption>
                            <p>checkBufferPool Python Script</p>
                        </MadCap:codeSnippetCaption>
                        <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">###
### This script checks that the Buffer Pool specified in the tablespace
### matches the default Buffer Pool for the Database.
###
###
### This script throws the following errors:
### 1) Multiple CREATE TABLESPACE statements found in changeset. Only one CREATE TABLESPACE allowed per changeset.
### 2) Default Buffer Pool Not Found for Database {database_name}.
### 3) Multiple BUFFER POOL statements found in CREATE TABLESPACE statement. Only one Buffer Pool can be specified.
### 4) Buffer Pool Not Found in CREATE TABLESPACE script.
### 5) CREATE TABLESPACE Buffer Pool (buffer_name) must match the default Buffer Pool (default_buffer_pool) for the database (database_name).
###
### Sample Tablespace:
###
###  CREATE TABLESPACE SBA01003
###    IN DBA0001
###    USING STOGROUP SYSPOOL1
###    PRIQTY 720 SECQTY 720
###    ERASE  NO
###    FREEPAGE 5 PCTFREE 15 FOR UPDATE 0
###    GBPCACHE CHANGED
###    TRACKMOD YES
###    MAXPARTITIONS 20
###    LOGGED
###    DSSIZE 8 G
###    SEGSIZE 32
###    BUFFERPOOL BP0
###    LOCKSIZE ANY
###    LOCKMAX SYSTEM....
###
### Query to find default Buffer Pool:
### 
### SELECT BPOOL FROM SYSIBM.SYSDATABASE WHERE NAME = 'DBA0001';

###
### Helpers come from Liquibase
###
import liquibase_utilities
import re
import sys

###
### main
###

###
### Retrieve log handler
### Ex. liquibase_logger.info(message)
###
liquibase_logger = liquibase_utilities.get_logger()

###
### Retrieve status handler
###
liquibase_status = liquibase_utilities.get_status()

###
### Define regex patterns for a Tablespace's DatabaseName and BufferPool
###
regex_pattern_database = f"(?is)CREATE\s+TABLESPACE\s+\w+\s+IN\s+(\w+)"
regex_pattern_bufferpool = f"(?is)BUFFERPOOL\s+(\S+)"

###
### Retrieve all changes in changeset
###
changes = liquibase_utilities.get_changeset().getChanges()

###
### Loop through all changes
###
for change in changes:
    ###
    ### LoadData change types are not currently supported
    ###
    if "loaddatachange" in change.getClass().getSimpleName().lower():
        continue
    ###
    ### Split sql into a list of strings to remove whitespace
    ###
    raw_sql = liquibase_utilities.generate_sql(change)
    
    ###
    ### Look for database regex in SQL
    ###
    database_list = re.findall(regex_pattern_database, raw_sql)
    
    if len(database_list) &gt; 1:
        liquibase_status.fired = True                  
        status_message = f"Multiple CREATE TABLESPACE statements found in changeset. Only one CREATE TABLESPACE allowed per changeset."
        liquibase_status.message = status_message
        sys.exit(1)
        break
    else:
        database_name = ''.join(database_list)
        
        ### 
        ### End check if script does not contain regex pattern
        ###    
        if database_name is None or database_name == '':
            break
        else:
            ### print(f"Database Name: {database_name}")
            
            ###
            ### Execute query to get the default buffer pool for the database
            ###
            sql_query = f"SELECT BPOOL FROM SYSIBM.SYSDATABASE WHERE NAME = '{database_name}'"
            default_buffer_pool_list = liquibase_utilities.query_for_list(sql_query, None, ";")
            
            if len(default_buffer_pool_list) == 0:
                ### print(f"Default Buffer Pool Not Found for Database {database_name}")
                
                liquibase_status.fired = True                  
                status_message = f"Default Buffer Pool Not Found for Database {database_name}."
                liquibase_status.message = status_message
                sys.exit(1)
                break
            else:
            
                default_buffer_pool = default_buffer_pool_list [0]["BPOOL"].strip()
                ### print(f"Default Buffer Pool: {default_buffer_pool}")
                
                ###
                ### Look for bufferpool regex in SQL
                ###
                buffer_pool_list = re.findall(regex_pattern_bufferpool, raw_sql)
                
                if len(buffer_pool_list) &gt; 1:
                    liquibase_status.fired = True                  
                    status_message = f"Multiple BUFFER POOL statements found in CREATE TABLESPACE statement. Only one Buffer Pool can be specified."
                    liquibase_status.message = status_message
                    sys.exit(1)
                    break
                else:
                
                    buffer_pool = ''.join(buffer_pool_list)
                    
                    if buffer_pool is None or buffer_pool == '':
                        ### print(f"Buffer Pool Not Found in script {buffer_pool}")
                       
                        liquibase_status.fired = True                  
                        status_message = f"Buffer Pool Not Found in CREATE TABLESPACE script."
                        liquibase_status.message = status_message
                        sys.exit(1)
                        break
                        
                    else:
                        ### print(f"Buffer Pool in script: {buffer_pool}")
                        
                        ###
                        ### Check that the buffer pool values match
                        ###
                        
                        if buffer_pool != default_buffer_pool:
                            
                            liquibase_status.fired = True                    
                            status_message = str(liquibase_utilities.get_script_message()).replace("__BUFFER_POOL__", f"{buffer_pool}")
                            status_message = status_message.replace("__DEFAULT_BUFFER_POOL__", f"{default_buffer_pool}")
                            status_message = status_message.replace("__DATABASE_NAME__", f"{database_name}")
                            liquibase_status.message = status_message
                            sys.exit(1)
                            break

###
### Default return code
###
False</MadCap:codeSnippetBody>
                    </MadCap:codeSnippet>
                </li>
                <li>
                    <p><b>Initiate the customization process</b>. In the CLI, run this command:<br /><code><code class="language-text">liquibase checks customize --check-name=CustomCheckTemplate</code></code><br />The CLI prompts you to finish configuring your file. A message displays:</p><pre><code class="language-text">This check cannot be customized directly because one or more fields does not have a default value.</code></pre>
                    <p>Liquibase will then create a copy of <code class="language-text">CustomCheckTemplate</code> and initiate the customization workflow.</p>
                </li>
                <li>
                    <p>Give your check a short name so you can easily identify what Python script it is associated with (up to 64 alpha-numeric characters only).<br />In this example we will name the check:<br /><code>checkBufferPool</code></p>
                </li>
                <li>
                    <p>Set the Severity to return a code of 0-4 when triggered. These severity codes allow you to determine if the job moves forward or stops when this check triggers. <br />Learn more here:&#160;<MadCap:xref href="../../workflows/automation-severity-exit-code.htm">Use Policy Checks in Automation: Severity and Exit Code</MadCap:xref><br />options: <code>'INFO'=0</code>, <code>'MINOR'=1</code>,<code> 'MAJOR'=2</code>,<code> 'CRITICAL'=3</code>, <code>'BLOCKER'=4</code></p>
                </li>
                <li>Set <b><code class="language-text">SCRIPT_DESCRIPTION</code></b>. In this example, we will set the description to:<pre><code class="language-text">This script checks that the Buffer Pool specified in the tablespace matches the default Buffer Pool for the database.</code></pre></li>
                <li>Set <b><code class="language-text">SCRIPT_SCOPE</code></b>. In this example, we will set the scope to <code class="language-text">changelog</code>.                </li>
                <ul>
                    <li><code class="language-text">changelog</code>: for example, if your check looks for syntax patterns or attributes in your Liquibase&#160;<MadCap:xref href="../../../../concepts/changelogs/home.html">Changelog</MadCap:xref> (the changes you author in your repository). With this value, the check runs <b>once per <MadCap:variable name="General.changeset"></MadCap:variable></b>. </li>
                </ul>
                <li>Set the <b><code class="language-text">SCRIPT_MESSAGE</code></b>. This message will display when the check is triggered. In this example we will use:<br /><code class="language-text">CREATE TABLESPACE Buffer Pool (__BUFFER_POOL__) must match the default Buffer Pool (__DEFAULT_BUFFER_POOL__) for the database (__DATABASE_NAME__).</code></li>
                <li>Set the <b><code class="language-text">SCRIPT_PATH</code></b>. This is the relative path where your script is stored in relation to the <MadCap:variable name="General.changelog" /> specified in <code class="language-text">--changelog-file</code>, whether it is stored locally or in a repository. <br />In this example, we will set the path to: <code class="language-text">scripts/check-buffer-pool.py</code>.</li>
                <li>This check does not require a <b><code class="language-text">SCRIPT_ARGUMENT</code></b>, so leave this blank.</li>
                <li>Set the <b><code class="language-text">REQUIRES_SNAPSHOT</code></b>. If your script scope is <code class="language-text">changelog</code>, set whether the check requires a database <MadCap:xref href="../../../../commands/inspection/snapshot.html">snapshot</MadCap:xref>. Specify <code class="language-text">true</code> if your check needs to inspect database objects. (If your script scope is <code class="language-text">database</code>, Liquibase always takes a snapshot, so this prompt does not appear.)</li>
                <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The larger your database, the more performance impact a snapshot causes. If you cannot run a snapshot due to memory limitations, see <MadCap:xref href="../../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</p>
            </ol>
            <p>You have now successfully created and customized a policy check!</p>
            <h2>Next steps</h2>
            <ul>
                <li>
                    <MadCap:xref href="../run-check.htm">Run a Custom Policy Check</MadCap:xref>
                </li>
            </ul>
            <h3>Related Topics</h3>
            <p>
                <MadCap:xref href="../sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>
            </p>
        </body>
    </body>
</html>