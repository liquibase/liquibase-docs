<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/liquibase-python-modules.html" />
        <meta name="description" content="Liquibase provides a API to enable users to write Python Custom Policy Checks." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Liquibase Python Modules</h1>
        <p>Liquibase provides an API you can call on in your Python <MadCap:xref href="home.htm">Custom Policy Checks</MadCap:xref>. The <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">Liquibase Checks extension</a> comes with several modules you can import in your scripts to access this API:</p>
        <ul>
            <li><code class="language-text">liquibase_changesets</code>
            </li>
            <li><code class="language-text">liquibase_constants</code>
            </li>
            <li><code class="language-text">liquibase_database</code>
            </li>
            <li><code class="language-text">liquibase_json</code>
            </li>
            <li><code class="language-text">liquibase_utilities</code>
            </li>
        </ul>
        <p>This documentation page lists the <b>callable methods and functions</b> contained in these Python modules. You can use these to access necessary information about your <MadCap:variable name="General.changelog" /> and database to run your Custom Policy Checks.</p>
        <p>The Liquibase Python modules are a layer on top of the <a href="https://contribute.liquibase.com/code/api/">Liquibase API</a>, which is written in Java (<a href="https://javadoc.liquibase.com/liquibase-core/">Javadocs</a>). They contain functions that wrap many of the native Java methods Liquibase uses. This allows you to access Liquibase functions in a more Pythonic way to improve ease of use and interoperability. However, it is still possible to call directly on Java methods in your&#160;Python code.</p>
        <p>For real-world Python scripts that access these modules, see <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>.</p>
        <h2>Python modules</h2>
        <p>The <a href="https://docs.python.org/3/library/index.html">Python Standard Library</a> is included when you download Python. Liquibase also natively supports the following Python modules:</p>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/text/checks-python-native-modules.flsnp" />
        <p>You can use these modules for additional functionality in your Custom Policy Checks, such as parsing complex SQL queries.</p>
        <p>The built-in Liquibase virtual environment cannot support additional modules. If you want to use more, you must create your own virtual environment and configure Liquibase to run scripts using your custom executable instead.</p>
        <p>In your custom virtual environment, you can install the Liquibase Python modules and natively supported Python modules in a package called <code class="language-text">liquibase-checks-python</code>. For more information, see <MadCap:xref href="python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref>.</p>
        <h2>Import syntax</h2>
        <p>By default, you can import Liquibase modules using the following syntax:</p><pre><code class="language-python">import &lt;module name&gt;</code></pre>
        <p>If you use a <a href="python-virtual-environment.htm">custom virtual environment</a> instead of the built-in virtual environment Liquibase provides, you must use the following syntax instead:</p><pre><code class="language-python">from liquibase-checks-python import &lt;module name&gt;</code></pre>
        <h2><code>liquibase_changesets</code>
        </h2>
        <p>These functions are available to you after importing <code class="language-text">liquibase_changesets</code>.</p>
        <p>Functions to pull information from the given <MadCap:variable name="General.changeset" /> path. The <MadCap:variable name="General.changeset" /> is always the input parameter for these attributes.</p>
        <table style="width: 100%;">
            <col />
            <col />
            <thead>
                <tr>
                    <th>Function</th>
                    <th>Return</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code class="language-text">get_author(changeset)</code>
                    </td>
                    <td>Returns the <MadCap:variable name="General.changeset" /> author</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_contexts(changeset)</code>
                    </td>
                    <td>Returns the <MadCap:variable name="General.changeset" /> contexts</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_file_path(changeset)</code>
                    </td>
                    <td>Returns the <MadCap:variable name="General.changeset" /> file path</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_id(changeset)</code>
                    </td>
                    <td>Returns the <MadCap:variable name="General.changeset" /> ID</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_labels(changeset)</code>
                    </td>
                    <td>Returns the <MadCap:variable name="General.changeset" /> labels</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_always_run(changeset)</code>
                    </td>
                    <td>Returns the value of <code><MadCap:xref href="../../../concepts/changelogs/attributes/run-always.htm">runAlways</MadCap:xref></code> for this <MadCap:variable name="General.changeset" /></td>
                </tr>
                <tr>
                    <td><code class="language-text">is_run_on_change(changeset)</code>
                    </td>
                    <td>Returns the value of <code><MadCap:xref href="../../../concepts/changelogs/attributes/runonchange.htm">runOnChange</MadCap:xref></code> for this <MadCap:variable name="General.changeset" /></td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_database</code>
        </h2>
        <p>These functions are available to you after importing <code class="language-text">liquibase_database</code>.</p>
        <p>Methods to access, or return, database attributes. The database is always the input parameter for these attributes.</p>
        <table style="width: 100%;">
            <col />
            <col />
            <thead>
                <tr>
                    <th>Function</th>
                    <th>Return</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code class="language-text">get_database_product_name(database)</code>
                    </td>
                    <td>Returns the database product name</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_database_product_version(database)</code>
                    </td>
                    <td>Returns the database product version</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_default_schema_name(database)</code>
                    </td>
                    <td>Returns the default schema for this database</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_short_name(database)</code>
                    </td>
                    <td>Returns the database short name</td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_json</code>
        </h2>
        <p>These functions are available to you after importing <code class="language-text">liquibase_json</code>.</p>
        <p>Functions to access, or return, JSON attributes. These are functions to parse a JSON <MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref> of your database and access, or return, dictionary objects.</p>
        <table style="width: 100%;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th>Function</th>
                    <th>Input Parameter</th>
                    <th>Return</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code class="language-text">get_column(snapshot, table_name, column_name)</code>
                    </td>
                    <td><b><code class="language-text">snapshot</code>:</b> the snapshot to parse
<br /><b><code class="language-text">table_name</code>:</b> the name of the table to search for
<br /><b><code class="language-text">column_name</code>:</b> the name of the column to search for</td>
                    <td>Returns the specified Column Dict object for a table</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_column_size(column)</code>
                    </td>
                    <td><b><code class="language-text">column</code>:</b> the Column Dict object</td>
                    <td>Returns the specified Column's size</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_column_type_name(column)</code>
                    </td>
                    <td><b><code class="language-text">column</code>:</b> the Column Dict object</td>
                    <td>Returns the specified Column's type name</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_columns(snapshot, table_name)</code>
                    </td>
                    <td><b><code class="language-text">snapshot</code>:</b> the snapshot to parse
<br /><b><code class="language-text">table_name</code>:</b> the name of the table to search for</td>
                    <td>
                        <p>Returns a list of Column Dict objects for a table such as a JSON serialized representation of the Liquibase internal <code class="language-text">DatabaseObject</code> class.</p>
                        <p>Example output:</p><pre><code class="language-json">{'column': {'name': 'name', 'nullable': True, 'order': '1!{java.lang.Integer}', 'relation': 'liquibase.structure.core.Table#0eab104', 'snapshotId': '0eab105', 'type': {'characterOctetLength': '20!{java.lang.Integer}', 'columnSize': '20!{java.lang.Integer}', 'columnSizeUnit': 'BYTE!{liquibase.structure.core.DataType$ColumnSizeUnit}', 'dataTypeId': '1!{java.lang.Integer}', 'radix': '10!{java.lang.Integer}', 'typeName': 'bpchar'}}}</code></pre>
                    </td>
                </tr>
                <tr>
                    <td><code class="language-text">get_indexes(snapshot, table_name)</code>
                    </td>
                    <td><b><code class="language-text">snapshot</code>:</b> the snapshot to parse
<br /><b><code class="language-text">table_name</code>:</b> the name of the table to search for
                    </td>
                    <td>Returns a List of Index Dict objects for a table</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_primary_key(snapshot, table_name)</code>
                    </td>
                    <td><b><code class="language-text">snapshot</code>:</b> the snapshot to parse
<br /><b><code class="language-text">table_name</code>:</b> the name of the table to search for
                    </td>
                    <td>Returns a Primary Key Dict object for a table</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_table(snapshot, table_name)</code>
                    </td>
                    <td><b><code class="language-text">snapshot</code>:</b> the snapshot to parse
<br /><b><code class="language-text">table_name</code>:</b> the name of the table to search for
                    </td>
                    <td>Returns the requested table object</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_tables(snapshot)</code>
                    </td>
                    <td><b><code class="language-text">snapshot</code>:</b> the snapshot to parse</td>
                    <td>Returns a list of Table Dict objects</td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_utilities</code>
        </h2>
        <p>These functions are available to you after importing <code class="language-text">liquibase_utilities</code>.</p>
        <p>Utilities are general script helpers that retrieve content frequently searched for.</p>
        <table style="width: 100%;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th>Function</th>
                    <th>Input Parameter</th>
                    <th>Return</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code class="language-text">generate_sql(change)</code>
                    </td>
                    <td><b><code class="language-text">change</code>:</b> the change to generate SQL from</td>
                    <td>
                        <p>Returns the SQL associated with this change that Liquibase would deploy to your database. The function returns any inline SQL (<a href="../../../concepts/changelogs/sql-format.html">formatted SQL</a> or <code><MadCap:xref href="../../../change-types/sql.html">sql</MadCap:xref></code>&#160;<MadCap:variable name="General.changetypes" />) or SQL within referenced files (<code><MadCap:xref href="../../../change-types/sql-file.html">sqlFile</MadCap:xref></code>) it finds. Otherwise, it generates SQL from any modeled <MadCap:variable name="General.changetypes" />s (like <code><MadCap:xref href="../../../change-types/create-table.html">createTable</MadCap:xref></code>) it finds, similar to running the <code><MadCap:xref href="../../../commands/update/update-sql.htm">update-sql</MadCap:xref></code> command.</p>
                        <p>Does not include Liquibase-specific SQL, like updates to the <MadCap:xref href="../../../concepts/tracking-tables/databasechangelog-table.html">[%=General.databasechangelog%] table</MadCap:xref>.</p>
                        <p>Example:</p><pre xml:space="preserve"><code class="language-python">changes = liquibase_utilities.get_changes()
sql = liquibase_utilities.generate_sql(change[0])
if "something bad" in sql:
    status.fired = True
    sys.exit(1) # exit from the check</code></pre>
                    </td>
                </tr>
                <tr>
                    <td><code class="language-text">get_arg(name)</code>
                    </td>
                    <td><b><code class="language-text">name</code>:</b> the argument to find</td>
                    <td>Return the value of the script argument you specified while creating or customizing your check in the&#160;CLI. <MadCap:snippetText src="../../../Z_Resources/Snippets/text/checks-get-arg-example.flsnp" /></td>
                </tr>
                <tr>
                    <td><code class="language-text">get_binding(key)</code>
                    </td>
                    <td><b><code class="language-text">key</code>:</b> the binding to access
<br /></td>
                    <td>Returns the binding object at the given key</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_cache(key, default_value)</code>
                    </td>
                    <td><b><code class="language-text">key</code>:</b> the look up key
<br /><b><code class="language-text">default_value</code>:</b> the value to put for the key if no value present</td>
                    <td>Returns the stored key/value pairs currently held by a dict object that are available between script executions. For example, you can count the number of times a check triggers by adding a counter that updates for each feature. If there is no current value, returns the default value.</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_changes()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Returns the set of Liquibase change objects that the check is actively examining. Custom policy checks run against a single <MadCap:variable name="General.changeset" /> at a time, so this refers to a list of <MadCap:variable name="General.changetypes" />s within a single <MadCap:variable name="General.changeset" />.</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_changeset()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Returns the <MadCap:variable name="General.changeset" /> object Liquibase is actively examining</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_column_type(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check</td>
                    <td>Returns the data type of the column of a database object. Examples include: <code class="language-text">varchar</code>, <code class="language-text">integer</code>, etc. If the database object is not a column, returns <code class="language-text">None</code>.</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_database()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Returns the Liquibase database object</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_database_object()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the <code class="language-text">DatabaseObject</code> that is being referenced in a database-scoped check</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_database_snapshot()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the <code class="language-text">DatabaseSnapshot</code> object as a string</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_dbutil()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the <code class="language-text">db_util</code> object used to check for object existence or to snapshot the <code class="language-text">DatabaseObject</code> and return it</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_logger()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the Liquibase logger</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_object_type_name(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the <code class="language-text">database_object</code> to return the type for</td>
                    <td>Return the object type of a given database object as a string</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_script_message()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the message for the script. This is the message you specify in the CLI when you create a custom policy check.</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_script_path()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the path of the script. This is the path you specify in the CLI when you create a custom policy check.</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_snapshot()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the snapshot as a JSON object. If no snapshot is available, return <code class="language-text">None</code>.</td>
                </tr>
                <tr>
                    <td><code class="language-text">get_status()</code>
                    </td>
                    <td>&#160;</td>
                    <td>Return the <code class="language-text">Status</code> object, which is used to set the check fired status and return a message. <b>Required</b> to tell Liquibase whether a check has triggered.</td>
                </tr>
                <tr>
                    <td><code class="language-text">has(object_type, schema_name, object_name)</code>
                    </td>
                    <td><b><code class="language-text">object_type</code>:</b> the object type
<br /><b><code class="language-text">schema_name</code>:</b> the schema name
<br /><b><code class="language-text">object_name</code>:</b> the object name</td>
                    <td>Returns <code class="language-text">true</code> if there is an object of this type and name in the schema, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">has_relation(object_type, object_name, relation_type, relation_schema_name, relation_name)</code>
                    </td>
                    <td><b><code class="language-text">object_type</code>:</b> the object type
<br /><b><code class="language-text">object_name</code>:</b> the object name
<br /><b><code class="language-text">relation_type</code>:</b> the type of relation (Table or View)
<br /><b><code class="language-text">relation_schema_name</code>:</b> the schema of the relation object
<br /><b><code class="language-text">relation_name</code>:</b> the name of the relation</td>
                    <td>Returns <code class="language-text">true</code> if there is an object of this type that has a relation object that matches the relation type, schema, and name. Returns <code class="language-text">false</code> if no items match the provided criteria.</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_catalog(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Returns <code class="language-text">true</code> if the database object is a catalog, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_check_constraint(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a check constraint, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_column(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a column, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_database_package(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a database package, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_database_package_body(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a database package body, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_foreign_key(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a foreign key, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_function(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a function, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_index(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br style="font-weight: bold;" /></td>
                    <td>Return <code class="language-text">true</code> if the database object is an index, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_primary_key(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /><b><br /></b></td>
                    <td>Return <code class="language-text">true</code> if the database object is a primary key, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_schema(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a schema, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_sequence(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a sequence, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_stored_database_logic(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check</td>
                    <td>Return <code class="language-text">true</code> if the database object is stored database logic, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_stored_procedure(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a stored procedure, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_synonym(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a synonym, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_table(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a table, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_trigger(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /><b><br /></b></td>
                    <td>Return <code class="language-text">true</code> if the database object is a trigger, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_unique_constraint(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a unique constraint, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">is_view(database_object)</code>
                    </td>
                    <td><b><code class="language-text">database_object</code>:</b> the database object to check
<br /></td>
                    <td>Return <code class="language-text">true</code> if the database object is a view, <code class="language-text">false</code> otherwise</td>
                </tr>
                <tr>
                    <td><code class="language-text">put_cache(key, value)</code>
                    </td>
                    <td><b><code class="language-text">key</code>:</b> the key to use
<br /><b><code class="language-text">value</code>:</b> the value to put in the cache</td>
                    <td>Places the stored key/value pairs held by a dict object that are available between script executions.</td>
                </tr>
                <tr>
                    <td><code class="language-text">query_for_list(sql, sql_file, end_delimiter)</code>
                    </td>
                    <td><b><code class="language-text">sql</code>:</b> the SQL to execute
<br /><b><code class="language-text">sql_file</code>:</b> the SQL file to execute
<br /><b><code class="language-text">end_delimiter</code>:</b> the end delimiter to use</td>
                    <td>Executes a SQL statement or script. Returns the result of the SQL as a list</td>
                </tr>
                <tr>
                    <td><code class="language-text">snapshot_object(object_type, object_name, relation_type, schema_name, relation_name)</code>
                    </td>
                    <td><b><code class="language-text">object_type:</code></b> the type of the object, like Table
<br /><b><code class="language-text">object_name</code>:</b> the objects name
<br /><b><code class="language-text">relation_type</code>:</b> a type of relation that we need to snapshot to access the object
<br /><b><code class="language-text">schema_name</code>:</b> the schema for the relation
<br /><b><code class="language-text">relation_name</code>:</b> the name of the relation</td>
                    <td>Returns a Liquibase model object that represents the database object specified</td>
                </tr>
                <tr>
                    <td><code class="language-text">split_sql(sql_string, strip_comments_flag, end_delimiter, changeset)</code>
                    </td>
                    <td><b><code class="language-text">sql_string</code>:</b> the SQL to process
<br /><b><code class="language-text">strip_comments_flag</code>:</b> set to <code class="language-text">true</code> to strip out comments
<br /><b><code class="language-text">end_delimiter</code>:</b> the end delimiter to use while processing the SQL
<br /><b><code class="language-text">changeset</code>:</b> the change set associated with the SQL
<br /></td>
                    <td>Returns an array of SQL lines</td>
                </tr>
                <tr>
                    <td><code class="language-text">split_statements(sql_string)</code>
                    </td>
                    <td><b><code class="language-text">sql_string</code>:</b> the SQL string to split
<br /></td>
                    <td>Splits a string of SQL into individual statements. Returns the list of SQL strings</td>
                </tr>
                <tr>
                    <td><code class="language-text">strip_comments(sql_string)</code>
                    </td>
                    <td><b><code class="language-text">sql_string</code>:</b> the SQL to strip
<br /></td>
                    <td>Strips comments from a SQL string. Returns the SQL string with comments removed</td>
                </tr>
                <tr>
                    <td><code class="language-text">tokenize(statement)</code>
                    </td>
                    <td><b><code class="language-text">statement</code>:</b> the statement to tokenize
<br /></td>
                    <td>Tokenizes a statement which was created by the <code><a href="https://sqlparse.readthedocs.io/en/latest/">sqlparse</a></code> Python module. Returns the tokenized statement as a list</td>
                </tr>
            </tbody>
        </table>
        <h2><code>liquibase_constants</code>
        </h2>
        <p>These functions are available to you after importing <code class="language-text">liquibase_constants</code>.</p>
        <p>Constants are an unchangeable set of well-known constants that are used to access the script bindings. They are definitions of internal Python classes Liquibase uses to enable Custom Policy Checks via Python scripts.</p>
        <p class="warning" MadCap:autonum="&lt;b&gt;Warning: &lt;/b&gt;">You should be familiar with what a Python class is and how classes can have variables which are the equivalent of a constant. Most users will not need to use these unless you are debugging a complex custom policy check you have created.</p>
        <h3><code>Constant</code> methods</h3>
        <ul>
            <li><code class="language-text">__init__(self)</code>
            </li>
            <li><code class="language-text">__setattr__(self, name, value)</code>
            </li>
        </ul>
        <h3><code>Constant</code> data descriptors</h3>
        <ul>
            <li><code class="language-text">__dict__</code>
            </li>
            <li><code class="language-text">__weakref__</code>
            </li>
        </ul>
        <h3><code>ScriptConstant</code> data descriptors</h3>
        <ul>
            <li><code class="language-text">__dict__</code>
            </li>
            <li><code class="language-text">__weakref__</code>
            </li>
        </ul>
        <h3><code>ScriptConstant</code> data and other attribute definitions</h3>
        <ul>
            <li><code class="language-text">ARGS_SUFFIX = '_arg_binding'</code>
            </li>
            <li><code class="language-text">CACHE_BINDING = 'cache_binding'</code>
            </li>
            <li><code class="language-text">CHANGESET_BINDING = 'changeSet_binding'</code>
            </li>
            <li><code class="language-text">CHANGES_BINDING = 'changes_binding'</code>
            </li>
            <li><code class="language-text">DATABASE_BINDING = 'database_binding'</code>
            </li>
            <li><code class="language-text">DATABASE_OBJECT_BINDING = 'databaseObject_binding'</code>
            </li>
            <li><code class="language-text">DATABASE_SNAPSHOT_BINDING = 'databaseSnapshot_binding'</code>
            </li>
            <li><code class="language-text">DBUTIL_BINDING = 'dbutil_binding'</code>
            </li>
            <li><code class="language-text">LOGGER_BINDING = 'logger_binding'</code>
            </li>
            <li><code class="language-text">SCRIPT_MESSAGE_BINDING = 'scriptMessage_binding'</code>
            </li>
            <li><code class="language-text">SCRIPT_PATH_BINDING = 'script_path_binding'</code>
            </li>
            <li><code class="language-text">STATUS_BINDING = 'status_binding'</code>
            </li>
        </ul>
    </body>
</html>