<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/checks-python-package.html" />
        <meta name="description" content="The Liquibase Checks Python Package provides an API to enable helper scripts when write Python custom policy checks." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><MadCap:variable name="General.Liquibase" /> Checks Python Package</h1>
        <p><MadCap:variable name="General.Liquibase" /> Helper Scripts are Python scripts that provide an API&#160;that allows you to access objects or <MadCap:variable name="General.Liquibase" /> functionality with <MadCap:xref href="home.htm">Custom Policy Checks</MadCap:xref>. When helper scripts are enabled within a custom policy check,  the check goes through all the <MadCap:variable name="General.changeset" />s or database objects that have not deployed and looks for the specific content set in the custom policy check. <MadCap:variable name="General.Liquibase" /> will then decide if the check fires or not depending on what is specified with the helper script. <MadCap:variable name="General.Liquibase" /> provides a Python package <code>liquibase-checks-python</code> to assist your helper scripts with in-IDE documentation and auto complete. These helper scripts and Python package significantly reduce the time it will take to find the information you are looking for. </p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The <a href="https://docs.liquibase.com/workflows/liquibase-pro/extensions-list.html">Checks  extension</a>, which includes all Custom Policy Check functionality, is available to <MadCap:variable name="General.Liquibase" /> Pro 4.29+  users.</p>
        <table style="width: 100%; margin-left: auto; margin-right: auto;">
            <caption style="font-weight: bold;">Compatible Versions</caption>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>Python</td>
                    <td>3.10.14</td>
                </tr>
                <tr>
                    <td>GraalPy</td>
                    <td>24.0.0</td>
                </tr>
            </tbody>
        </table>
        <h2>Create a virtual environment</h2>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">A virtual environment and using the GraalPy Python runtime are optional steps and are not required to use Custom Policy Checks.</p>
        <p>You  can use the provided <a href="https://docs.python.org/3/tutorial/venv.html">virtual environment</a> that is part of the <MadCap:variable name="General.LBPro" /> release or your own Python virtual environment. If you need to utilize your own virtual environment you will need to have Python 3.10 installed on your system. This virtual environment is stored in a directory on your local file system.</p>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><MadCap:variable name="General.Liquibase" /> custom policy checks use GraalPy to execute your custom checks. We recommend <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/#installing-graalpy">downloading and using the GraalPy Python runtime</a> if you are working in a virtual environment. The  package installer is available when using a virtual environment. The GraalPy implementation of <code>pip</code> may choose package versions other than the latest when it ships patches to improve performance.</p>
        <p><MadCap:variable name="General.Liquibase" /> bundles and utilizes GraalPy to execute Python scripts via Java. GraalPy also provides patches to certain packages that facilitates a smooth workflow with Java when installing those packages. Python scripts can be stored anywhere text files are stored including:&#160;CWD, local paths, S3, or the GitHub extension, etc. </p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This is only recommended to users who are familiar with building and deploying Python virtual environments.</p>
        <h3>Step-by-step instructions</h3>
        <ol>
            <li>Run <code>python -m venv .your/path/to/venv</code> to create a <code>.your/path/to/venv</code> directory which contains (many) Python executables.</li>
            <li>Run the following command to <b>activate the virtual environment</b>:<br /><ul><li>Windows: <code>&lt;path\to\venv&gt;\Scripts\activate</code></li><li>Unix or MacOS:&#160;<code>source &lt;path/to/venv&gt;/bin/activate</code><br /></li></ul></li>
            <li>Once the environment is active, install packages using <code>pip install &lt;some package&gt;</code>.</li>
            <li> Provide a path to the Python executable that is based on your virtual environment so <MadCap:variable name="General.Liquibase" /> can recognize the environment.<br /><code>liquibase --script-python-executable-path ./your/path/to/venv/bin/python checks run --check-name MySweetPythonCheck --checks-scripts-enabled --checks-scope database</code></li>
        </ol>
        <h2>Install the Python package</h2>
        <p>Now that you've configured and ran a standard custom policy check you're ready to cover using the Python package. <MadCap:variable name="General.Liquibase" /> provides a Python package called <code>liquibase-checks-python</code> to assist with in-IDE documentation and auto complete with your helper scripts. Install our Python package by following these instructions.</p>
        <p>If&#160;you want the custom policy check helper scripts <b>with  in-IDE documentation and auto-complete</b>, you must complete the <b>Install the Python package</b> steps first. If you want the custom policy check helper scripts <b>without those features</b>, skip that section and follow the <b>Access helper scripts</b> steps.</p>
        <h3>Install the Python package step-by-step</h3>
        <p>This option allows you to enhance your checks further with usage of specific items within the Python package.</p>
        <ol>
            <li>In your virtual environment, install the Python package by running <code>pip install liquibase-checks-python</code> in the CLI.</li>
            <li>In your custom policy check file, replace <code>import liquibase_utilities</code> with <code>from liquibase_checks_python import liquibase_utilities</code> in your Python script.<br /><MadCap:codeSnippet><MadCap:codeSnippetCopyButton /><MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">import sys # useful for indicating a check has been triggered
from liquibase_checks_python import liquibase_utilities as lb # this is where we are importing our liquibase_utilities helper script provided by the liquibase-checks-python package

obj = lb.get_database_object() # this gets the database object the liquibase policy check is examining
status = lb.get_status() # this gets the status object of the liquibase check, used for reporting status and messages from the custom policy check

if lb.is_table(obj): # function provided from liquibase utilities
	status.fired = True # indicates the custom check has been triggered
	status.message = No tables allowed! # set the message of the custom check, which liquibase will return
	sys.exit(1) # exit from the check</MadCap:codeSnippetBody></MadCap:codeSnippet><p>You have successfully activated the  Checks Python package.</p></li>
        </ol>
        <h2 MadCap:conditions="exclude.future">Access helper scripts</h2>
        <h3 MadCap:conditions="exclude.future">Step-by-step</h3>
        <ol MadCap:conditions="exclude.future">
            <li>Navigate to your Custom Policy Check Python script that you want to implement helper scripts in.</li>
            <li MadCap:conditions="exclude.future">Next you will include a specific helper script function in your Custom Policy Check Python script.<br />In this example we will include <code>logger = liquibase_utilities.get_logger</code> to pull the <MadCap:variable name="General.Liquibase" /> log.<br /><ul><li><MadCap:codeSnippet><MadCap:codeSnippetCopyButton /><MadCap:codeSnippet><MadCap:codeSnippetCopyButton /><MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">import sys # useful for indicating a check has been triggered
from liquibase_checks_python import liquibase_utilities as lb # this is where we are importing our liquibase_utilities helper script provided by the liquibase-checks-python package

liquibase_logger = liquibase_utilities.get_logger()
obj = lb.get_database_object() # this retrieves the database object the Liquibase policy check is examining
status = lb.get_status() # this retrieves the status object of the liquibase check, used for reporting status and messages from the custom policy check

if lb.is_table(obj): # function provided from liquibase utilities
	status.fired = True # indicates the custom check has been triggered
	status.message = No tables allowed! # set the message of the custom check, which Liquibase will return
	sys.exit(1) # exit from the check</MadCap:codeSnippetBody></MadCap:codeSnippet></MadCap:codeSnippet></li></ul></li>
            <li>Run this command to enable your custom policy check in the CLI.<br></br><code>liquibase checks run --check-name &lt;custom_policy_check_example&gt; --checks-scripts-enabled</code><br></br>When the custom check runs with these specifications it will retrieve any content it finds based on the packages and the helper script functions you chose to include and will display it in the CLI or in a report.<br></br>In this example, <MadCap:variable name="General.Liquibase"></MadCap:variable> will produce the log information when you call on this Custom Policy Check because it includes <code>logger = liquibase_utilities.get_logger</code>.</li>
        </ol>
    </body>
</html>