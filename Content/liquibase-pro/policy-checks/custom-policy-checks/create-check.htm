<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/create-check.html" />
        <meta name="description" content="This tutorial shows you how to create a General.Liquibase custom policy check." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Create a Custom Policy Check</h1>
        <p>This tutorial shows you how to create, customize, and run a Liquibase custom policy check using a sample Python script. For a conceptual overview of this feature, see <MadCap:xref href="home.htm">Custom Policy Checks</MadCap:xref>.</p>
        <p>For examples of more advanced Python scripts and guidance on writing Python code to use in the Liquibase policy checks framework, see <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>.</p>
        <h2>Prerequisites</h2>
        <h3>Liquibase prerequisites</h3>
        <ul>
            <li>Install Liquibase 4.29.0+</li>
            <li>Configure a valid <a href="../../license-key.htm"><MadCap:variable name="General.LBPro" /> license key</a></li>
            <li>Ensure the Liquibase Checks extension&#160;is installed. <b>In Liquibase 4.31.0+, it is already installed in the <code class="language-text">/liquibase/internal/lib</code> directory, so no action is needed.</b> If the checks JAR is not installed, <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">download <code class="language-text">liquibase-checks-&lt;version&gt;.jar</code></a> and put it in the <code class="language-text">liquibase/lib</code> directory. Or, if you use Maven, add this dependency to your <code class="language-text">pom.xml</code> file:</li><pre xml:space="preserve"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt;
    &lt;artifactId&gt;liquibase-checks&lt;/artifactId&gt;
    &lt;version&gt;<MadCap:variable name="software-versions.latest-liquibase-checks" />&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
            <li>Java Development Kit 17+
(available for Open JDK and Oracle JDK)</li>
            <li>Linux, macOS, or Windows operating system</li>
            <li>Familiarity with Liquibase concepts: <MadCap:xref href="../../../concepts/changelogs/home.html">Changelog</MadCap:xref>, <MadCap:xref href="../../../concepts/changelogs/changeset.html">Changeset</MadCap:xref>, <MadCap:xref href="../../../commands/policy-checks/commands/home.htm">Policy Checks Commands</MadCap:xref>, <MadCap:xref href="../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref>, and <MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref></li>
        </ul>
        <h3>Python prerequisites</h3>
        <p>Before creating a custom policy check with Python, we recommend being familiar with:</p>
        <ul>
            <li><a href="https://docs.python.org/3/reference/index.html">Python 3.10.14+</a>. (See here for the <a href="https://docs.python.org/3/tutorial/index.html">official Python tutorial</a>)</li>
            <li>Optional: General coding and Python best practices which will improve your check performance:</li>
            <ul>
                <li>Efficient handling of structured data objects</li>
                <li>Effective and targeted parsing of text, objects, and SQL</li>
                <li>Using regular expressions and other pattern-matching tools within Python</li>
                <li>Using Python <a href="https://docs.python.org/3/tutorial/venv.html">virtual environments</a>. Liquibase comes with a built-in virtual environment for Liquibase Custom Policy Checks. The built-in environment includes Liquibase Python modules and some common external Python modules—no configuration needed. However, if you want to install additional modules, or if you want your IDE to recognize the Liquibase modules, you must <MadCap:xref href="python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref> separately.</li>
            </ul>
        </ul>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Downloading Python itself is not required to create custom checks</b> in the Liquibase checks framework, but it may be useful to test checks against Python 3.10.14+.</p>
        <h2>Create a checks settings file</h2>
        <ol>
            <li><b>Create a <a href="../workflows/checks-settings-file.htm">checks settings file</a></b> if you don't already have one. In the&#160;CLI, run this command:</li><pre><code class="language-text">liquibase checks show</code></pre>
            <li>If you don't have a checks settings file, a prompt appears that allows you to create one. Confirm the file creation in the prompt. By default, the settings file is named <code class="language-text">liquibase.checks-settings.conf</code>.</li>
        </ol>
        <h2>Create a new custom policy check</h2>
        <ol>
            <li><b>Create a new file</b> in your Liquibase working directory or a subdirectory like <code class="language-text">/scripts</code>. This file will contain the Python script that is your custom policy check. In this example, we title our new file <code class="language-text">custom_check_no_tables.py</code>.</li>
            <li><b>Open</b> the new <code class="language-text">custom_check_no_tables.py</code> file and add the following custom policy check to it:</li><pre xml:space="preserve"><code class="language-python"># import Liquibase modules containing useful functions
import liquibase_utilities as lb
import sys

# define reusable variables
obj = lb.get_database_object()  # database object to examine
liquibase_status = lb.get_status()  # Status object of the check

# write check logic
# this condition checks if the current object is a table
# and whether it starts with the prefix 'tbl_'
if lb.is_table(obj) and not obj.getName().lower().startswith("tbl_"):
    # indicate that the custom check has been triggered
    liquibase_status.fired = True
    # set the message for Liquibase to return when check is triggered
    liquibase_status.message = "Tables must start with the prefix tbl_. Add this prefix."
    # halt execution of the script
    sys.exit(1)

# default return code
False</code></pre>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Liquibase will run the check against every object in the database, so this script doesn't need a Python looping mechanism to iterate through database objects.</p>
        </ol>
        <h2>Configure and customize your new check in the CLI</h2>
        <ol>
            <li><b>Initiate the customization process</b>. In the CLI, run this command:</li><pre><code class="language-text">liquibase checks customize --check-name=CustomCheckTemplate</code></pre>
            <p>The CLI prompts you to finish configuring your file. A message displays:</p><pre><code class="language-text">This check cannot be customized directly because one or more fields does not have a default value.</code></pre>
            <p>Liquibase will then create a copy of <code class="language-text">CustomCheckTemplate</code> and initiate the customization workflow.</p>
            <li><b>Give your new check a short name</b> for easier identification. In this example, we will name the check <code class="language-text">CustomCheckNoTables</code>.</li>
            <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">For ease of use, it is a best practice to name your custom check after your Python script.</p>
            <li>Set the <b>severity</b> to return a code of 0–4 when triggered. In this example, we will set the severity to <code class="language-text">1</code>. <br /><br />These severity codes allow you to determine if the job moves forward or stops when this check triggers. <br />Learn more here:&#160;<MadCap:xref href="../workflows/automation-severity-exit-code.htm">Use Policy Checks in Automation: Severity and Exit Code</MadCap:xref><br />Options:</li>
            <MadCap:snippetBlock src="../../../Z_Resources/Snippets/def/attributes/cli/policy-checks/cli-checks-severity-customization.flsnp" />
            <li>Set <b><code class="language-text">SCRIPT_DESCRIPTION</code></b>. In this example, we will set the description to:</li><pre><code class="language-text">This script looks to see if any tables exist and notifies you if one is detected.</code></pre>
            <li>Set <b><code class="language-text">SCRIPT_SCOPE</code></b>. In this example, we will set the scope to <code class="language-text">database</code>. The Python sample provided in this tutorial requires it.</li>
            <p>In general, you should set the scope to <code class="language-text">changelog</code> or <code class="language-text">database</code> depending on what your custom script does:</p>
            <ul>
                <li><code class="language-text">changelog</code>: for example, if your check looks for syntax patterns or attributes in your Liquibase&#160;<MadCap:xref href="../../../concepts/changelogs/home.html">Changelog</MadCap:xref> (the changes you author in your repository). With this value, the check runs <b>once per <MadCap:variable name="General.changeset" /></b>. </li>
                <li><code class="language-text">database</code>: for example, if your check looks for the presence of keys, indexes, or table name patterns in your database schema (including Liquibase&#160;<MadCap:xref href="../../../concepts/tracking-tables/tracking-tables.htm">Tracking Tables</MadCap:xref>). With this value, the check runs <b>once for each database object</b>.</li>
            </ul>
            <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">It is a best practice for your custom checks to have <b>only one scope</b>, not both scopes.<br /></p>
            <li>Set <b><code class="language-text">SCRIPT_MESSAGE</code></b>. This message will display when the check is triggered. In this example we will leave this blank, as we are handling the message in the script.</li>
            <li>Set <b><code class="language-text">SCRIPT_PATH</code></b>. This is the relative or absolute path where your script is stored in relation to the <MadCap:variable name="General.changelog" /> specified in <code class="language-text">--changelog-file</code>, whether it is stored locally or in a repository. In this example, we will set the path to: <code class="language-text">scripts/custom_check_no_tables.py</code>.
			<p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">It is important to note that users can use relative or absolute paths in this step.</p></li>
            <li>Set <b><code class="language-text">SCRIPT_ARGUMENT</code></b>. This allows you to pass dynamic information into the custom policy check without modifying the Python code. <MadCap:snippetText src="../../../Z_Resources/Snippets/text/checks-get-arg-example.flsnp" /><br /> If you <MadCap:xref href="../../../commands/policy-checks/commands/customize.htm">customize</MadCap:xref> your check later, you can specify a new value in the&#160;CLI. If you don't need dynamic arguments, leave this field blank.<ul><li><b>Optional:</b>&#160;In Liquibase Pro 4.31+, Custom Policy Checks users can use <a href="https://docs.liquibase.com/concepts/changelogs/property-substitution.html">property substitution</a> when they are setting the <code>SCRIPT_ARGS</code> during <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/create-check.html#:~:text=custom_check_no_tables.py.-,Set SCRIPT_ARGUMENT,-. This allows you">check creation</a>. You can reference properties such as environment variables, CLI arguments, or values from the defaults file using standard property substitution syntax. <br /></li></ul></li>
            <li>Set <b><code class="language-text">REQUIRES_SNAPSHOT</code></b>. If your script scope is <code class="language-text">changelog</code>, set whether the check requires a database <MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref>. Specify <code class="language-text">true</code> if your check needs to inspect database objects. (If your script scope is <code class="language-text">database</code>, Liquibase always takes a snapshot, so this prompt does not appear.)</li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The larger your database, the more performance impact a snapshot causes. If you cannot run a snapshot due to memory limitations, see <MadCap:xref href="../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</p>
        </ol>
        <p>You have now successfully created and customized a policy check!</p>
        <h2>Next steps</h2>
        <ul>
            <li>
                <MadCap:xref href="run-check.htm">Run a Custom Policy Check</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="troubleshoot.htm">Troubleshooting a scope mismatch attribute error</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>: see examples of real-world scripts for Custom Policy Checks that you can adapt</li>
            <li>
                <MadCap:xref href="liquibase-python-modules.htm">[%=General.Liquibase%] Python Modules</MadCap:xref>: learn how to access the Liquibase API&#160;to write more custom checks</li>
            <li>
                <MadCap:xref href="dynamic-status-messages.htm">Write Dynamic Status Messages for Custom Policy Checks</MadCap:xref>: improve the usability of your checks with better output messages</li>
        </ul>
    </body>
</html>