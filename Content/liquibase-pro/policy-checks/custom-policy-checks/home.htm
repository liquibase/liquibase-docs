<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/home.html" />
        <meta name="description" content="Custom Policy Checks enable the creation of any kind of check that matches your needs via python scripts. This feature expands the Liquibase checks horizon and allows all Pro users who write Python scripts to create any check for the workflow at hand." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1><MadCap:variable name="General.LBPro" /> Custom Policy Checks</h1>
        <p>Custom Policy Checks are Python scripts that let you specify advanced policies using the Liquibase&#160;<MadCap:xref href="../home.htm">Policy Checks</MadCap:xref> framework. Using Custom Policy Checks, you can enforce compliance for a wide array of security, code standards, data quality, and more.</p>
        <p>While it's possible to configure the behavior of many <a href="../checks/home.htm">built-in Liquibase policy checks</a> using regular expressions (such as <code><MadCap:xref href="../checks/changelog-checks/patterna-followed-bypatternb.htm">PatternAFollowedByPatternB</MadCap:xref></code>), those checks may not be robust enough for complex governance requirements. In contrast, you can use Custom Policy Checks to create unique checks for any situation in your Liquibase workflow.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This is a <MadCap:variable name="General.LBPro"></MadCap:variable> feature, so you need a <a href="https://docs.liquibase.com/workflows/liquibase-pro/how-to-apply-your-liquibase-pro-license-key.html" target="_blank"><MadCap:variable name="General.LBPro"></MadCap:variable> License Key</a> to use it.</p>
        <h2>Business benefits</h2>
        <ul>
            <li><b>Ensure compliance</b> to your specific issues and tech stack</li>
            <li><b>Develop</b> at your own cadence</li>
            <li><b>Share easily</b> across your entire organization</li>
            <li><b>Easily customize</b> from a base template</li>
        </ul>
        <h2>Prerequisites</h2>
        <h3>Liquibase prerequisites</h3>
        <ul>
            <li>Install Liquibase 4.29.0+</li>
            <li>Configure a valid <a href="../../license-key.htm"><MadCap:variable name="General.LBPro" /> license key</a></li>
            <li>Ensure the Liquibase Checks extension&#160;is installed. <b>In Liquibase 4.31.0+, it is already installed in the <code>/liquibase/internal/extensions</code> directory, so no action is needed.</b> If the checks JAR is not installed, <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">download <code>liquibase-checks-&lt;version&gt;.jar</code></a> and put it in the <code>liquibase/lib</code> directory. Or, if you use Maven, add this dependency to your <code>pom.xml</code> file:</li><pre xml:space="preserve"><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.liquibase.ext&lt;/groupId&gt;
    &lt;artifactId&gt;liquibase-checks&lt;/artifactId&gt;
    &lt;version&gt;<MadCap:variable name="software-versions.latest-liquibase-checks" />&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
            <li>Java Development Kit 17+
(available for Open JDK and Oracle JDK)</li>
            <li>Linux, macOS, or Windows operating system</li>
            <li>Familiarity with Liquibase concepts: <MadCap:xref href="../../../concepts/changelogs/home.html">Changelog</MadCap:xref>, <MadCap:xref href="../../../concepts/changelogs/changeset.html">Changeset</MadCap:xref>, <MadCap:xref href="../../../commands/policy-checks/commands/home.htm">Policy Checks Commands</MadCap:xref>, <MadCap:xref href="../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref>, and <MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref></li>
        </ul>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Python prerequisites</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Before creating a custom policy check with Python, we recommend being familiar with:</p>
                <ul>
                    <li><a href="https://docs.python.org/3/reference/index.html">Python 3.10.14+</a>. (See here for the <a href="https://docs.python.org/3/tutorial/index.html">official Python tutorial</a>)</li>
                    <li>Optional: General coding and Python best practices which will improve your check performance:</li>
                    <ul>
                        <li>Efficient handling of structured data objects</li>
                        <li>Effective and targeted parsing of text, objects, and SQL</li>
                        <li>Using regular expressions and other pattern-matching tools within Python</li>
                        <li>Using Python <a href="https://docs.python.org/3/tutorial/venv.html">virtual environments</a>. Liquibase comes with a built-in virtual environment for Liquibase Custom Policy Checks. The built-in environment includes Liquibase Python modules and some common external Python modulesâ€”no configuration needed. However, if you want to install additional modules, or if you want your IDE to recognize the Liquibase modules, you must <MadCap:xref href="python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref> separately.</li>
                    </ul>
                </ul>
                <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;"><b>Downloading Python itself is not required to create custom checks</b> in the Liquibase checks framework, but it may be useful to test checks against Python 3.10.14+.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Quickstart: Create a custom policy check</h2>
        <p>For a detailed, <b>step-by-step tutorial</b> of creating and deploying a check, see <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>. This tutorial explains:</p>
        <ul>
            <li><b>Prerequisites</b> for using Custom Policy Checks</li>
            <li><b>Downloading</b> the <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">Liquibase Checks extension</a></li>
            <li><b>Creating</b> your first custom policy check based on a template</li>
            <li><b>Configuring</b> your check in the Liquibase checks framework</li>
            <li><b>Running</b> your check using Liquibase commands</li>
        </ul>
        <h2>Sample Custom Policy Checks</h2>
        <p>For sample Python scripts that you can run as policy checks, see <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>.</p>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/text/checks-sample-scripts-hatnote.flsnp">
        </MadCap:snippetBlock>
        <p>If you need help deploying your check, see <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>.</p>
        <h2>Liquibase checks framework</h2>
        <p>The logic of a custom policy check goes in a Python (<code>.py</code>) script file:</p>
        <ul>
            <li>You can associate each custom policy check with one Python script. (Your Python script can reference modules and helper scripts.)</li>
            <li>You can write and modify that script without using Liquibase commands: it's just a Python file.</li>
            <li>You should store all your Python scripts in the Liquibase working directory or other accessible location.</li>
            <li>You should keep the logic for different checks in different Python files.</li>
        </ul>
        <h3>Liquibase commands</h3>
        <p>You can integrate your Python file into Liquibase by using the same <MadCap:xref href="../../../commands/policy-checks/commands/home.htm">Policy Checks Commands</MadCap:xref> you would use to copy a built-in policy check. Specifically, there is a built-in policy check called <code>CustomChecksTemplate</code> that you can <MadCap:xref href="../../../commands/policy-checks/commands/copy.htm">copy</MadCap:xref> and <MadCap:xref href="../../../commands/policy-checks/commands/customize.htm">customize</MadCap:xref> to specify your own logic. In the CLI, you specify a short name for your custom check in Liquibase, the Python script containing the check logic to run, and other configurations like the check's severity level.</p>
        <p>You should write your Python script to test one changeset or database object. Like other checks, you can deploy Custom Policy Checks by using the <code><MadCap:xref href="../../../commands/policy-checks/commands/run.htm">run</MadCap:xref></code> command. Liquibase then runs your Python script over all the objects in the domain you specify:</p>
        <ul>
            <li><b>Once per changeset</b> in your changelog (if you set <code>--checks-scope=changelog</code>)</li>
            <li><b>Once per object</b> in a database <MadCap:xref href="../../../commands/inspection/snapshot.html">snapshot</MadCap:xref> (if you set <code>--checks-scope=database</code>)</li>
        </ul>
        <p>Custom policy checks are <b>disabled by default</b>. You can enable them by setting the <code>checks run</code> command parameter <code>--checks-scripts-enabled=true</code> using any of the standard methods to set <a href="../../../parameters/home.htm">Liquibase parameters</a>.</p>
        <h3>Automation</h3>
        <p>You can <a href="../workflows/automation-severity-exit-code.htm">deploy Custom Policy Checks into your CI/CD automation</a> the same way as built-in checks. This allows your code to be robust but keeps your processes simple.</p>
        <p>When you configure your custom policy check, specify a severity code (exit code)&#160;for that check. Your external CI/CD tools can use this exit code to know how to react when a check triggers in your pipeline.</p>
        <h3>Python runtime dependencies</h3>
        <p>Liquibase is a Java application. On the back-end, Liquibase uses the <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/">GraalPy</a> API to run all custom policy check Python scripts via Java. Liquibase runs Custom Policy Checks in a built-in <a href="https://docs.python.org/3/tutorial/venv.html">Python virtual environment</a> that comes with the Liquibase checks extension JAR. <a href="https://www.graalvm.org/latest/reference-manual/polyglot-programming/">GraalVM</a> also provides "patches" for some Python packages, such as replacing some C extensions with Java implementations. This optimizes performance to ensure your Python scripts run efficiently.</p>
        <p>Optionally, you can run your Python scripts in a custom virtual environment. To learn how to configure one, see <MadCap:xref href="python-virtual-environment.htm">Create a Python Virtual Environment</MadCap:xref>.</p>
        <h2>Python script pseudocode</h2>
        <p>Any Python script you use in the custom policy check framework includes:</p>
        <ol>
            <li>Imports of useful <a href="liquibase-python-modules.htm"><MadCap:variable name="General.Liquibase"></MadCap:variable> modules</a> to access the Liquibase API.</li>
            <li>Clearly named variables that call on functions in the Liquibase modules (for ease of use).</li>
            <li>The logic of your custom check; the code for Liquibase to run against a changeset or database object.</li>
            <li>A default return code (<code>False</code>).</li>
        </ol>
        <p>To demonstrate that structure, here's some Python pseudocode:</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#changelog_example" id="label_changelog_example" class="js-tablist__link">Changelog check pseudocode</a>
                </li>
                <li class="js-tablist__item"><a href="#database_example" id="label_database_example" class="js-tablist__link">Database check pseudocode</a>
                </li>
            </ul>
            <div id="changelog_example" class="js-tabcontent"><pre xml:space="preserve"><code>import modules

define a reusable variable = use Liquibase modules to get changelog object information

for each change type in the changeset:
    if this condition is met, then do the following:
        tell liquibase = the check triggered!
        send this message as output = "NOOOOO"
        exit script with return code 1

otherwise, return false</code></pre>
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-changelog.flsnp" />
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-changelog-best-practices.flsnp" />
            </div>
            <div id="database_example" class="js-tabcontent"><pre xml:space="preserve"><code>import modules

define a reusable variable = use Liquibase modules to get database object information

if this condition is met, then do the following:
    tell liquibase = the check triggered!
    send this message as output = "NOOOOO"
    exit script with return code 1

otherwise, return false</code></pre>
                <MadCap:snippetBlock src="../../../Z_Resources/Snippets/note/checks-python-loop-database.flsnp" />
            </div>
        </div>
        <p>For executable code samples, see <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>.</p>
        <p>To configure your Python script in the Liquibase policy checks framework, see <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>.</p>
        <p>To display more advanced output when checks trigger, see <MadCap:xref href="dynamic-status-messages.htm">Write Dynamic Status Messages for Custom Policy Checks</MadCap:xref>.</p>
        <h2>Limitations</h2>
        <ul>
            <li>The <code><MadCap:xref href="../../../change-types/load-data.html">loadData</MadCap:xref></code>&#160;<MadCap:variable name="General.changetypes" /> is not supported.</li>
            <li>When you run <code>checks run --checks-scope=database</code> (or if you tell Liquibase to require a snapshot on a changelog-scoped check), Liquibase generates a database snapshot. If your database contains a very large number of complex objects, the <code>snapshot</code> command may take a long time to execute.<ul><li>If you experience memory limitations while trying to generate the snapshot for database-scoped checks, see <MadCap:xref href="../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</li><li>If you want to manually create a snapshot to run database-scoped checks against an offline version of your database, see the instructions on <code><MadCap:xref href="../../../commands/policy-checks/command-parameters/checks-scope.htm">checks-scope</MadCap:xref></code>.</li></ul></li>
            <li>As of Liquibase 4.30.0, you can use the Custom Policy Checks framework only to analyze your changelog and database. You cannot natively use Custom Policy Checks against other Liquibase resources like <a href="../../../concepts/connections/creating-config-properties.html">properties files</a> and <a href="../../flow/home.htm">flow files</a>.</li>
        </ul>
        <h2>Related links</h2>
        <ul>
            <li>
                <MadCap:xref href="../../../parameters/policy-checks/home.htm">[%=General.Liquibase%] Parameters for Policy Checks</MadCap:xref>
            </li>
        </ul>
    </body>
</html>