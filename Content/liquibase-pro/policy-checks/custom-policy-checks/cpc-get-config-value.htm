<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/cpc-get-config-value.html" />
        <meta name="description" content="The liquibase_utilities.get_config_value   python helper function allows you retrieve any configuration property which includes environment variables, system properties, flow files, flow variables, and checks run command line arguments." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Retrieve any configuration property in a Custom Policy check</h1>
        <p>The <code>liquibase_utilities.get_config_value</code>
python helper function allows you to retrieve any configuration property which includes environment variables, system properties, flow files, flow variables, and <code>checks run</code> command line arguments. Conceptually, it works like property substitution within a Custom Policy check.</p>
        <p>Syntax:&#160;<code>liquibase_utilities.get_config_value("<i>CONFIGURATION_PROPERTY_VALUE</i>")</code><![CDATA[
]]></p>
        <h2>Before you begin</h2>
        <ul>
            <li>
                <MadCap:xref href="home.htm">[%=General.LBPro%] Custom Policy Checks</MadCap:xref>
            </li>
            <li>Ensure the property you want to pull into your Custom policy check is set in one of the following ways:&#160;<br /><ul><li><a href="../../../concepts/connections/creating-config-properties.html">Liquibase properties file</a> (defaults file)</li><li>Global <a href="../../flow/home.htm">flow file</a> argument</li><li>Global CLI parameter</li><li>JVM system property (<MadCap:xref href="../../../concepts/connections/java-opts-environment-variable.htm">JAVA_OPTS Environment Variable</MadCap:xref>)</li><li><MadCap:xref href="../../../concepts/connections/liquibase-environment-variables.htm">[%=General.Liquibase%] Environment Variables</MadCap:xref></li></ul></li>
        </ul>
        <h2>Step-by-step</h2>
        <h3>Create a checks settings file</h3>
        <ol>
            <li><b>Create a <a href="../workflows/checks-settings-file.htm">checks settings file</a></b> if you don't already have one. In the&#160;CLI, run this command:</li><pre><code>liquibase checks show</code></pre>
            <li>If you don't have a checks settings file, a prompt appears that allows you to create one. Confirm the file creation in the prompt. By default, the settings file is named <code>liquibase.checks-settings.conf</code>.</li>
        </ol>
        <h3>Create a new custom policy check</h3>
        <ol>
            <li><b>Create a new file</b> in your Liquibase working directory or a subdirectory like <code>/scripts</code>. This file will contain the Python script that is your custom policy check. In this example, we title our new file <code>custom_check_no_tables.py</code>.</li>
            <li><b>Open</b> the new <code>custom_check_no_tables.py</code> file and add the following custom policy check to it:</li><pre xml:space="preserve"><code class="language-python"># import Liquibase modules containing useful functions
import liquibase_utilities as lb
import sys

# define reusable variables
obj = lb.get_database_object()  # database object to examine
liquibase_status = lb.get_status()  # Status object of the check

# write check logic
# this condition checks if the current object is a table
# and whether it starts with the prefix 'tbl_'
if lb.is_table(obj) and not obj.getName().lower().startswith("tbl_"):
    # indicate that the custom check has been triggered
    liquibase_status.fired = True
    # set the message for Liquibase to return when check is triggered
    liquibase_status.message = "Tables must start with the prefix tbl_. Add this prefix."
    # halt execution of the script
    sys.exit(1)

# default return code
False</code></pre>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Liquibase will run the check against every object in the database, so this script doesn't need a Python looping mechanism to iterate through database objects.</p>
            <li>Navigate to your Custom policy check Python script and add the configuration value desired. This configuration value could be an environment variable, a system property, flow file, flow variable, or a checks run argument.<br />Helper function syntax:&#160;<code>config_value=liquibase_utilities.get_config_value("<i>your-config-value</i>")<br /></code><table style="margin-left: auto; margin-right: auto;"><col /><thead><tr><th><p>Examples of helper functions</p></th></tr></thead><tbody><tr><td><code>dbplatfrom = liquibase_utilities.get_config_value("dbplatform")</code></td></tr><tr><td><code>currentloglevel = liquibase_utilities.get_config_value("LIQUIBASE_LOG_LEVEL")</code></td></tr><tr><td><code>currentchangelog = liquibase_utilities.get_config_value("changelogfile")</code></td></tr></tbody></table></li>
            <li>
                <p>In this example, we will add the following piece of code to the Custom policy check which pulls in two configuration values called <code>loglevel</code> and <code>mychangelog</code> . You can replace myloglevel and mychangelog with any property configured in the liquibase.properties file, flow file, global CLI&#160;parameters, JVM&#160;system properties, or as an environment variable.</p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;">#pull the database url, loglevel, and changelogfile into this policy check message.
						myloglevel = liquibase_utilities.get_config_value("loglevel")
						mychangelog = liquibase_utilities.get_config_value("changelogfile")	
						logger.info("LOG LEVEL = " + myloglevel)
						logger.info("CHANGELOG FILE = " + mychangelog)
						</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
                <p>Once the helper function is added, your script will look something like this:</p>
                <MadCap:codeSnippet>
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption>
                        <p>Custom policy check Python script with the Get config value </p>
                    </MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: Python;"># import Liquibase modules containing useful functions
						import liquibase_utilities as lb
						import sys

						# define reusable variables
						obj = lb.get_database_object()  # database object to examine
						liquibase_status = lb.get_status()  # Status object of the check
						
						#pull the database loglevel and changelogfile into this policy check message.
						myloglevel = liquibase_utilities.get_config_value("loglevel")
						mychangelog = liquibase_utilities.get_config_value("changelogfile")	
						logger.info("LOG LEVEL = " + myloglevel)
						logger.info("CHANGELOG FILE = " + mychangelog)
						
						# write check logic
						# this condition checks if the current object is a table
						# and whether it starts with the prefix 'tbl_'
						if lb.is_table(obj) and not obj.getName().lower().startswith("tbl_"):
						# indicate that the custom check has been triggered
						liquibase_status.fired = True
						# set the message for Liquibase to return when check is triggered
						liquibase_status.message = "Tables must start with the prefix tbl_. Add this prefix."
						# halt execution of the script
						sys.exit(1)

						# default return code
						False
						
						
				</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </li>
        </ol>
        <h2>Next steps</h2>
        <ul>
            <li>
                <MadCap:xref href="run-check.htm">Run a Custom Policy Check</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="troubleshoot.htm">Troubleshooting a scope mismatch attribute error</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>: see examples of real-world scripts for Custom Policy Checks that you can adapt</li>
            <li>
                <MadCap:xref href="liquibase-python-modules.htm">[%=General.Liquibase%] Python Modules</MadCap:xref>: learn how to access the Liquibase API&#160;to write more custom checks</li>
            <li>
                <MadCap:xref href="dynamic-status-messages.htm">Write Dynamic Status Messages for Custom Policy Checks</MadCap:xref>: improve the usability of your checks with better output messages</li>
        </ul>
    </body>
</html>