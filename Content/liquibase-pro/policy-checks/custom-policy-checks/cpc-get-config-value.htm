<?xml version="1.0" encoding="utf-8"?>
<html>
    <head><title><MadCap:variable name="Heading.Level1" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/cpc-get-config-value.html" />
        <meta name="description" content="The liquibase_utilities.get_config_value   python helper function allows you retrieve any configuration property which includes environment variables, system properties, flow files, flow variables, and checks run command line arguments." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Retrieve any configuration property in a Custom Policy check</h1>
        <p>The <code>liquibase_utilities.get_config_value</code>
python helper function allows you retrieve any configuration property which includes environment variables, system properties, flow files, flow variables, and <code>checks run</code> command line arguments. Conceptually, it works like property substitution within a Custom Policy check.</p>
        <p>Syntax:&#160;<code>liquibase_utilities.get_config_value("<i>CONFIGURATION_PROPERTY_VALUE</i>")</code><![CDATA[
]]></p>
        <h2>Before you begin</h2>
        <ul>
            <li>
                <MadCap:xref href="home.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">[%=General.LBPro%] Custom Policy Checks</MadCap:xref>
            </li>
        </ul>
        <h2>Step-by-step</h2>
        <h3>Create a checks settings file</h3>
        <ol>
            <li><b>Create a <a href="../workflows/checks-settings-file.htm">checks settings file</a></b> if you don't already have one. In the&#160;CLI, run this command:</li><pre><code class="language-text">liquibase checks show</code></pre>
            <li>If you don't have a checks settings file, a prompt appears that allows you to create one. Confirm the file creation in the prompt. By default, the settings file is named <code class="language-text">liquibase.checks-settings.conf</code>.</li>
        </ol>
        <h3>Create a new custom policy check</h3>
        <ol>
            <li><b>Create a new file</b> in your Liquibase working directory or a subdirectory like <code class="language-text">/scripts</code>. This file will contain the Python script that is your custom policy check. In this example, we title our new file <code class="language-text">custom_check_no_tables.py</code>.</li>
            <li><b>Open</b> the new <code class="language-text">custom_check_no_tables.py</code> file and add the following custom policy check to it:</li><pre xml:space="preserve"><code class="language-python"># import Liquibase modules containing useful functions
import liquibase_utilities as lb
import sys

# define reusable variables
obj = lb.get_database_object()  # database object to examine
liquibase_status = lb.get_status()  # Status object of the check

# write check logic
# this condition checks if the current object is a table
# and whether it starts with the prefix 'tbl_'
if lb.is_table(obj) and not obj.getName().lower().startswith("tbl_"):
    # indicate that the custom check has been triggered
    liquibase_status.fired = True
    # set the message for Liquibase to return when check is triggered
    liquibase_status.message = "Tables must start with the prefix tbl_. Add this prefix."
    # halt execution of the script
    sys.exit(1)

# default return code
False</code></pre>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Liquibase will run the check against every object in the database, so this script doesn't need a Python looping mechanism to iterate through database objects.</p>
        </ol>
        <h3>Configure and customize your new check in the CLI</h3>
        <ol>
            <li><b>Initiate the customization process</b>. In the CLI, run this command:</li><pre><code class="language-text">liquibase checks customize --check-name=CustomCheckTemplate</code></pre>
            <p>The CLI prompts you to finish configuring your file. A message displays:</p><pre><code class="language-text">This check cannot be customized directly because one or more fields does not have a default value.</code></pre>
            <p>Liquibase will then create a copy of <code class="language-text">CustomCheckTemplate</code> and initiate the customization workflow.</p>
            <li><b>Give your new check a short name</b> for easier identification. In this example, we will name the check <code class="language-text">CustomCheckNoTables</code>.</li>
            <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">For ease of use, it is a best practice to name your custom check after your Python script.</p>
            <li>Set the <b>severity</b> to return a code of 0–4 when triggered. In this example, we will set the severity to <code class="language-text">1</code>. <br /><br />These severity codes allow you to determine if the job moves forward or stops when this check triggers. <br />Learn more here:&#160;<MadCap:xref href="../workflows/automation-severity-exit-code.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Use Policy Checks in Automation: Severity and Exit Code</MadCap:xref><br />Options:</li>
            <MadCap:snippetBlock src="../../../Z_Resources/Snippets/def/attributes/cli/policy-checks/cli-checks-severity-customization.flsnp" style="font-weight: bold;" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" />
            <li>Set <b><code class="language-text">SCRIPT_DESCRIPTION</code></b>. In this example, we will set the description to:</li><pre><code class="language-text">This script looks to see if any tables exist and notifies you if one is detected.</code></pre>
            <li>Set <b><code class="language-text">SCRIPT_SCOPE</code></b>. In this example, we will set the scope to <code class="language-text">database</code>. The Python sample provided in this tutorial requires it.</li>
            <p>In general, you should set the scope to <code class="language-text">changelog</code> or <code class="language-text">database</code> depending on what your custom script does:</p>
            <ul>
                <li><code class="language-text">changelog</code>: for example, if your check looks for syntax patterns or attributes in your Liquibase&#160;<MadCap:xref href="../../../concepts/changelogs/home.html" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Changelog</MadCap:xref> (the changes you author in your repository). With this value, the check runs <b>once per <MadCap:variable name="General.changeset" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" /></b>. </li>
                <li><code class="language-text">database</code>: for example, if your check looks for the presence of keys, indexes, or table name patterns in your database schema (including Liquibase&#160;<MadCap:xref href="../../../concepts/tracking-tables/tracking-tables.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Tracking Tables</MadCap:xref>). With this value, the check runs <b>once for each database object</b>.</li>
            </ul>
            <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">It is a best practice for your custom checks to have <b>only one scope</b>, not both scopes.<br /></p>
            <li>Set <b><code class="language-text">SCRIPT_MESSAGE</code></b>. This message will display when the check is triggered. In this example we will leave this blank, as we are handling the message in the script.</li>
            <li>Set <b><code class="language-text">SCRIPT_PATH</code></b> to the location of your script. You can provide either:<ul><li>a <b>relative path</b>, which is based on the location of the changelog file you specify with <code>--changelog-file</code>. This means that the path is relative to where that changelog file is stored.<br /><b>Example:</b>&#160;If your changelog is in a folder called <code>project/</code>, and your script is in <code>project/scripts/</code>, the relative path to the script would be <code>scripts/your-script.py</code>.<br /><b>OR</b></li><li>An <b>absolute path</b>, which starts from the root of the your computer's file system and includes the full path to the script. <br />Example:&#160;The full path to the script would be:&#160;<code>/Users/yourname/project/scripts/your-script.py</code><br /><br />In this example, we will set the path to: <code class="language-text">scripts/custom_check_no_tables.py</code>.
			</li></ul></li>
            <li>Set the <b><code class="language-text">SCRIPT_ARG</code></b>. This allows you to pass dynamic information into the custom policy check without modifying the Python code.<br />Run the <code>get_config_value</code> command to pull the desired value into the Custom Policy Check formula.<br /><br />In this example, we will pull in the<code> changelogfile</code> argument:<br /><code>&#160;config_value=liquibase_utilities.get_config_value("<i>changelogfile</i>")</code><br /> If you <MadCap:xref href="../../../commands/policy-checks/commands/customize.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">customize</MadCap:xref> your check later, you can specify a new value in the&#160;CLI. If you don't need dynamic arguments, leave this field blank.</li>
            <li>Set <b><code class="language-text">REQUIRES_SNAPSHOT</code></b>. If your script scope is <code class="language-text">changelog</code>, set whether the check requires a database <MadCap:xref href="../../../commands/inspection/snapshot.html" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">snapshot</MadCap:xref>. Specify <code class="language-text">true</code> if your check needs to inspect database objects. (If your script scope is <code class="language-text">database</code>, Liquibase always takes a snapshot, so this prompt does not appear.)</li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">The larger your database, the more performance impact a snapshot causes. If you cannot run a snapshot due to memory limitations, see <MadCap:xref href="../../../workflows/limitations/memory-limits-inspecting-large-schemas.htm">Memory Limits of Inspecting Large Schemas</MadCap:xref>.</p>
        </ol>
        <p>You have now successfully created and customized a policy check!</p>
        <h2>Next steps</h2>
        <ul>
            <li>
                <MadCap:xref href="run-check.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Run a Custom Policy Check</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="troubleshoot.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Troubleshooting a scope mismatch attribute error</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="sample-scripts.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Sample Custom Policy Check Scripts</MadCap:xref>: see examples of real-world scripts for Custom Policy Checks that you can adapt</li>
            <li>
                <MadCap:xref href="liquibase-python-modules.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">[%=General.Liquibase%] Python Modules</MadCap:xref>: learn how to access the Liquibase API&#160;to write more custom checks</li>
            <li>
                <MadCap:xref href="dynamic-status-messages.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Write Dynamic Status Messages for Custom Policy Checks</MadCap:xref>: improve the usability of your checks with better output messages</li>
        </ul>
        <ol>
            <li>Navigate to your Custom Policy Check Python script and add the configuration value desired. This configuration value could be an environment variable, a system property, flow file, flow variable, or a checks run argument.<br />Here is the syntax:&#160;<code>config_value=liquibase_utilities.get_config_value("<i>your-config-value</i>")</code></li>
            <li>During the <code>set SCRIPT_ARGS</code> step of <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/create-check.html">Custom Policy Check creation</a>, run the <code>get_config_value</code> command to pull the desired value into the Custom Policy Check formula.<br /><br />In this example, we will use the<code> changelogfile</code> argument:<br /><code>&#160;config_value=liquibase_utilities.get_config_value("<i>changelogfile</i>")</code></li>
            <li>Set the configuration value in any of the options described below.
                <p> You can set this parameter in the following ways:</p><table style="width: 100%;"><col /><col /><thead><tr><th>Option</th><th>Syntax</th></tr></thead><tbody><tr><td><a href="../../../concepts/connections/creating-config-properties.html">Liquibase properties file</a> (defaults file)</td><td><pre xml:space="preserve"><code class="language-text">liquibase.getConfigValue: &lt;string&gt;</code></pre></td></tr><tr><td>Global <a href="../../flow/home.htm">flow file</a> argument (example)</td><td><pre xml:space="preserve"><code class="language-text">stages:
  Default:
    actions:
      - type: liquibase
        command: update
        globalArgs: { get-config-value: "&lt;string&gt;" }</code></pre></td></tr><tr><td>Global CLI parameter</td><td><pre xml:space="preserve"><code class="language-text">liquibase
 --get-config-value=&lt;string&gt;&#160;update
 --changelog-file=example-changelog.xml</code></pre></td></tr><tr><td><p>JVM system property (<MadCap:xref href="../../../concepts/connections/java-opts-environment-variable.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">JAVA_OPTS Environment Variable</MadCap:xref>)</p></td><td><p>Unix:</p><pre><code>JAVA_OPTS="TEST_SCRIPT_ARG="changelogfile"</code></pre><p>Windows:</p><pre><code class="language-text">JAVA_OPTS=-D"liquibase.<MadCap:variable name="parameters-global-command.case-camel" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" />"=<MadCap:variable name="parameters-global-command.value-type" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" /></code></pre></td></tr><tr><td><MadCap:xref href="../../../concepts/connections/liquibase-environment-variables.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">[%=General.Liquibase%] Environment Variables</MadCap:xref></td><td><pre><code class="language-text">LIQUIBASE_COMMAND_CHANGELOG_FILE=&lt;string&gt;</code></pre></td></tr></tbody></table></li>
            <li>
                <p>For more information, see <MadCap:xref href="../../../parameters/working-with-command-parameters.htm" xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">Working with Command Parameters</MadCap:xref>.</p>
            </li>
            <li>
                <br />
            </li>
            <br />
        </ol>
    </body>
</html>