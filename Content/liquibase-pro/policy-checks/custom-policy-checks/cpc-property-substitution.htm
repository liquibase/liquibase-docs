<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/cpc-property-substitution.html" />
        <meta name="description" content="In Liquibase Pro 4.31+, users who utilize Custom Policy Checks can use property substitution when they are setting the SCRIPT_ARGS during check creation. You can reference properties such as environment variables, CLI arguments, or values from the defaults file using standard property substitution syntax." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Custom&#160;Policy Check property substitution</h1>
        <p>In Liquibase Pro 4.31+, you can utilize Custom Policy Checks alongside property substitution when setting the <code>SCRIPT_ARGS</code> during <a href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/create-check.html#:~:text=custom_check_no_tables.py.-,Set SCRIPT_ARGUMENT,-. This allows you">check creation</a>. You can reference properties such as environment variables, CLI arguments, or values from the <MadCap:variable name="General.liquiPropFile" /> file using standard property substitution syntax. This enables dynamic and context-aware scripting, such as configuring behavior based on runtime attributes like the current Git branch or target environment. It makes your Custom Policy Checks more flexible, reusable, and maintainable. The values to replace in your Custom Policy Check are described using the <code>${property.name}</code> syntax.</p>
        <h2>Uses</h2>
        <p>By substituting values for replacement values in the format of <code>${property.name}</code>, you can use the same <code>SCRIPT_ARGS</code> to reflect small environmental changes.</p>
        <p>For example, your tablespace name in Oracle may differ from environment to environment, but you want to only write one create table changeset that can be used in all of your environments.</p>
        <h2>Example scenario 1:</h2>
        <p>In this example, a Python script needs to run against a target URL, but you don’t know the URL ahead of time. Instead of hard coding it, you can use the value that Liquibase sets for <code>liquibase.command.url</code>, since that’s always the correct target for each operation. <br /><br />By adding the below script to the Custom Policy Check script, Liquibase can then use that value automatically.<br /><br /><code>targeturl= "${liquibase.command.url}"</code></p>
        <h2>Example scenario 2:&#160;</h2>
        <p>In this example, the script needs to behave differently depending on who owns the pipeline. If the pipeline name starts with <code>UK_DEV_APPS_</code>, you want to run a conditional action. I can do this by passing a variable like <code>${PIPELINE_NAME}</code> into my script, and using Python to check if the name starts with <code>UK_DEV_APPS_</code>. <br /><br />By adding the below script to the Custom Policy Check script, <MadCap:variable name="General.CompanyName" /> can decide whether to run certain actions or skip them.<br /><br /><code>pipelinename="${PIPELINE.TEAM}"</code><br /></p>
        <h2>Next steps</h2>
        <p>
            <MadCap:xref href="apply-cpc-property-substitution.htm">Apply Custom Policy Checks Property Substitution</MadCap:xref>
        </p>
    </body>
</html>