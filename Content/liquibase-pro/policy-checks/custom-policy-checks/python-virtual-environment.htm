<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/python-virtual-environment.html" />
        <meta name="description" content="This tutorial demonstrates how to create a Python virtual environment with GraalPy to use with Liquibase Custom Policy Checks." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Create a Python Virtual Environment</h1>
        <p>When you write <MadCap:xref href="home.htm">Custom Policy Checks</MadCap:xref>, you can access the Liquibase API by using <MadCap:xref href="liquibase-python-modules.htm">[%=General.Liquibase%] Python Modules</MadCap:xref>. </p>
        <p>Liquibase is a Java application, so it uses the <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/">GraalPy</a> runtime on the back-end to execute all Python scripts for Custom Policy Checks. Liquibase runs all Python scripts in a built-in <a href="https://docs.python.org/3/tutorial/venv.html">local Python virtual environment</a>. Virtual environments help you isolate your projects so that you can have different versions of modules in each one.</p>
        <p>This tutorial shows you how to create a custom Python virtual environment instead of using the one Liquibase provides.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">In Liquibase 4.31.0+ these modules are available  in the <MadCap:variable name="General.Liquibase" /> download and our Docker container. On versions previous to <MadCap:variable name="General.Liquibase" /> 4.31.0, these modules are available when you download the <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">Liquibase Checks extension</a>, along with a few natively supported Python modules.</p>
        <h2>Uses</h2>
        <p>You can <a href="create-check.htm">create and run Custom Policy Checks</a> exlusively using the <b>built-in virtual environment</b> and modules that come with the Liquibase Checks extension.</p>
        <p>However, you must create a <b>custom virtual environment</b> if you want to:</p>
        <ul>
            <li><b>Write policy checks using some external Python modules.</b> Python installs its <a href="https://docs.python.org/3/library/index.html">standard library</a> when you download it. Additionally, the Liquibase Checks JAR comes with several Liquibase modules as well as a few external modules (<code><a href="https://simplejson.readthedocs.io/en/latest/">simplejson</a></code>, <code><a href="https://sqlparse.readthedocs.io/en/latest/">sqlparse</a></code>, and <code><a href="https://urllib3.readthedocs.io/en/stable/">urllib3</a></code>). However, if you create a virtual environment, you can install any modules you want, including the built-in modules with the <code>liquibase-checks-python</code> package.</li>
            <li><b>Ensure your IDE recognizes the Liquibase API.</b> By default, your IDE does not know to look in a Java JAR file for Python-language libraries. As a result, your IDE can't provide <b>in-IDE documentation or auto-complete</b> using the built-in virtual environment, making development more tedious. However, if you create a custom virtual environment, your IDE can recognize any modules you install, like the Liquibase Python modules. If you don't use an IDE, this makes no difference.</li>
        </ul>
        <p>To create your own virtual environment, you must install the GraalPy binary and then use the Python <code>pip</code> tool to install all external modules you want to use in your virtual environment (including Liquibase modules).</p>
        <h2>Prerequisites</h2>
        <ul>
            <li>Python 3.10.14+</li>
            <li>GraalPy 24.0.0+</li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you use Liquibase 4.30.0 or earlier, you must use GraalPy 24.0.0. If you use Liquibase 4.31.0 or later, you may use the latest version of GraalPy.</p>
            <li>If you use an IDE, ensure you have installed any necessary extensions to support IDE features in Python-language files.</li>
            <li>Follow the  prerequisites on <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref> to download and install the <a href="https://mvnrepository.com/artifact/org.liquibase.ext/liquibase-checks">Liquibase Checks extension</a>.</li>
        </ul>
        <h2>Create your own virtual environment</h2>
        <ol>
            <li><b>Download</b> and extract <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/#installing-graalpy">GraalPy</a> on your machine. You must use the GraalPy runtime to create the virtual environment, not the Python runtime.</li>
            <li><b>Update</b> your <code>PATH</code> environment variable to include the path to the GraalPy <code>/bin</code> directory you just installed.</li>
            <li>In your command line, <b>invoke GraalPy to run the <code>venv</code> module</b> to create a virtual environment in the directory you specify:</li><pre><code class="language-shell">graalpy -m venv &lt;path_to_venv&gt;</code></pre>
            <p>Your command line won't display anything, but this creates some scripts. You may have to wait a few seconds for the command to execute before you can type in the terminal again.</p>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Some terminals may display: "<code>WARNING: Unable to create a system terminal, creating a dumb terminal (enable debug logging for more information)</code>." You can ignore this.</p>
        </ol>
        <h2>Install Python modules</h2>
        <p>By default, your virtual environment has no modules installed. To install them, follow these steps:</p>
        <ol>
            <li><b>Activate the virtual environment</b>:</li>
            <ul>
                <li>Windows CMD and PowerShell: <code class="language-shell">&lt;path_to_venv&gt;\Scripts\activate</code></li>
                <li>Windows GitBash: <code class="language-shell">source &lt;path_to_venv&gt;/Scripts/activate</code></li>
                <li>Unix: <code class="language-shell">source &lt;path_to_venv&gt;/bin/activate</code></li>
            </ul>
            <li><b>Configure your IDE to recognize your custom virtual environment.</b>
                <ul>
                    <li><a href="https://code.visualstudio.com/docs/python/environments">VS Code:&#160;Python environments in VS Code</a>
                    </li>
                    <li><a href="https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html">PyCharm:&#160;Configure a virtualenv environment</a>
                    </li>
                </ul>
            </li>
            <li><b>Install modules and packages</b> using <code>pip</code>:</li><pre><code class="language-shell">pip install liquibase-checks-python simplejson sqlparse urllib3</code></pre>
            <p>When complete, the terminal displays:</p><pre><code>Successfully installed liquibase-checks-python-&lt;x.y.z&gt; simplejson-&lt;x.y.z&gt; sqlparse-&lt;x.y.z&gt; urllib3-&lt;x.y.z&gt;</code></pre>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">You must install <code class="language-shell">liquibase-checks-python</code> to access the Liquibase API, and you must install <code class="language-shell">sqlparse</code> to run the Liquibase modules.</p>
            <li><b>Deactivate the virtual environment</b>:</li>
            <ul>
                <li>Windows GitBash, Windows PowerShell, and Unix: <code class="language-shell">deactivate</code></li>
                <li>Windows CMD: <code class="language-shell">exit</code></li>
            </ul>
        </ol>
        <h2>Configure Liquibase to use your virtual environment</h2>
        <ol>
            <li>Use the Liquibase parameter <code>--<MadCap:xref href="../../../parameters/policy-checks/script-python-executable-path.htm">script-python-executable-path</MadCap:xref></code> to provide Liquibase the path to the GraalPy Python executable in your virtual environment:</li>
            <div class="js-tabs">
                <ul class="js-tablist" data-hx="h3">
                    <li class="js-tablist__item"><a href="#windows_example" id="label_windows_example" class="js-tablist__link">Windows example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#linux_example" id="label_linux_example" class="js-tablist__link">Linux example</a>
                    </li>
                </ul>
                <div id="windows_example" class="js-tabcontent">
                    <ul>
                        <li>Command line at runtime: <code>--script-python-executable-path=&lt;path_to_venv&gt;\Scripts\python.exe</code></li>
                        <li>Defaults file (<code><MadCap:variable name="General.liquiPropFile" /></code>): <code>liquibase.script.python.executablePath=&lt;path_to_venv&gt;\Scripts\python.exe</code></li>
                        <li>Environment variable: <code>LIQUIBASE_SCRIPT_PYTHON_EXECUTABLE_PATH=&lt;path_to_venv&gt;\venv\Scripts\python.exe</code></li>
                    </ul>
                </div>
                <div id="linux_example" class="js-tabcontent">
                    <ul>
                        <li>Command line at runtime: <code>--script-python-executable-path=&lt;path_to_venv&gt;/bin/python</code></li>
                        <li>Defaults file (<code><MadCap:variable name="General.liquiPropFile" /></code>): <code>liquibase.script.python.executablePath=&lt;path_to_venv&gt;/bin/python</code></li>
                        <li>Environment variable: <code>LIQUIBASE_SCRIPT_PYTHON_EXECUTABLE_PATH=&lt;path_to_venv&gt;/bin/python</code></li>
                    </ul>
                </div>
            </div>
            <li>In your Python file, ensure that any imports of modules come from your custom virtual environment instead of the built-in virtual environment in the Liquibase Checks extension JAR. Replace <code class="language-python">import &lt;module&gt;</code> with <code class="language-python">from liquibase_checks_python import &lt;module&gt;</code>. For example:</li><pre xml:space="preserve"><code class="language-python"># import Liquibase modules containing useful functions
from liquibase_checks_python import liquibase_utilities as lb
import sys

# define reusable variables
obj = lb.get_database_object()  # database object to examine
liquibase_status = lb.get_status()  # Status object of the check

# write check logic
# this condition checks if the current object is a table
# and whether it starts with the prefix 'tbl_'
if lb.is_table(obj) and not obj.getName().lower().startswith("tbl_"):
    # indicate that the custom check has been triggered
    liquibase_status.fired = True
    # set the message for Liquibase to return when check is triggered
    liquibase_status.message = "Tables must start with the prefix tbl_. Add this prefix."
    # halt execution of the script
    sys.exit(1)

# default return code
False</code></pre>
        </ol>
        <p>You have now successfully configured your virtual environment for Liquibase policy checks.</p>
        <p>If you restart your IDE, you should also see auto-complete prompts for Liquibase Python modules.</p>
        <h2>Run Custom Policy Checks with a virtual environment</h2>
        <p>If you haven't yet run any Liquibase policy checks commands to configured your Python script as a check, follow the steps on <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>.</p>
        <p>If you've already configured your custom policy check, you can now run it using your new virtual environment. For example:</p>
        <ul>
            <li>Windows:</li><pre xml:space="preserve"><code class="language-shell">liquibase checks --script-python-executable-path=&lt;path/to/venv&gt;/Scripts/python.exe run --check-name=MySweetPythonCheck --checks-scripts-enabled=true --checks-scope=database</code></pre>
            <li>Linux/macOS:</li><pre xml:space="preserve"><code class="language-shell">liquibase checks --script-python-executable-path=&lt;path/to/venv&gt;/bin/python run --check-name=MySweetPythonCheck --checks-scripts-enabled=true --checks-scope=database</code></pre>
        </ul>
        <p>If you specified <code>--script-python-executable-path</code> in your <code><MadCap:variable name="General.liquiPropFile" /></code> file or as an environment variable, you don't need to specify it at runtime.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you don't specify a custom virtual environment to use, Liquibase runs your script in the built-in virtual environment.</p>
        <h2>Troubleshooting</h2>
        <h3><code>liquibase_checks_python</code> module not found</h3>
        <p>Your IDE may not display correct syntax highlighting for your Liquibase module imports if you haven't configured your virtual environment correctly, or haven't configured your IDE to recognize your virtual environment.</p>
        <p>You may also receive this error if <code>--script-python-executable-path</code> is set to the Python executable in your custom virtual environment but you haven't correctly installed your modules:</p><pre xml:space="preserve"><code>Error while executing script 'python_scripts/test_python_check.py': ModuleNotFoundError: No module named
'liquibase_checks_python' line:  2</code></pre>
        <p>To fix this, ensure that you:</p>
        <ol>
            <li>Install the correct version of GraalPy. In Liquibase 4.30.0 and earlier, Linux users must install GraalPy 24.0.0 (not the latest version). In Liquibase 4.31.0 and later, you can use the latest version of GraalPy.</li>
            <li>Configure your IDE to recognize Python-language files.</li>
            <li>Configure your IDE to use the GraalPy Python executable in your custom virtual environment.</li>
            <li>Activate your virtual environment. Then import the <code>liquibase-checks-python</code> package and any other Python modules you want to use.</li><pre><code class="language-shell">pip install liquibase-checks-python simplejson sqlparse urllib3</code></pre>
            <li>Restart your IDE to see any changes.</li>
        </ol>
        <h2>Next steps</h2>
        <ul>
            <li>
                <MadCap:xref href="sample-scripts.htm">Sample Custom Policy Check Scripts</MadCap:xref>: see examples of real-world scripts for Custom Policy Checks that you can adapt</li>
            <li>
                <MadCap:xref href="create-check.htm">Create a Custom Policy Check</MadCap:xref>: integrate your Python scripts into the Liquibase policy checks framework</li>
        </ul>
    </body>
</html>