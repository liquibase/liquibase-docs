<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/liquibase-pro/policy-checks/custom-policy-checks/api-helper-scripts.html" />
        <meta name="description" content="Liquibase provides a API to enable users to write Python custom policy checks." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Checks Python API Helper Scripts</h1>
        <p><MadCap:variable name="General.Liquibase" /> provides an API that contains helper scripts to enable users to write Python custom policy checks. You can implement any of the helper scripts listed below into your custom policy check to narrow down the content you are searching for. Learn more about how to use these functions by reading our <MadCap:xref href="home.htm">Custom Policy Checks</MadCap:xref> documentation.</p>
        <h2>Changeset attributes</h2>
        <p>Methods to return <MadCap:variable name="General.Liquibase" /><MadCap:variable name="General.changeset" /> attributes</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="center">Function</th>
                    <th class="center">Definition</th>
                    <th class="center">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="left"><code>get_author</code>(changeset)
                    </td>
                    <td class="left">Returns the <MadCap:variable name="General.changeset" /> author</td>
                    <td class="left"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_contexts</code>(changeset)
                    </td>
                    <td class="left">Returns the <MadCap:variable name="General.changeset" /> contexts</td>
                    <td class="left"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_file_path</code>(changeset)
                    </td>
                    <td class="left">Returns the <MadCap:variable name="General.changeset" /> file path</td>
                    <td class="left"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_id</code>(changeset)
                    </td>
                    <td class="left">Returns the <MadCap:variable name="General.changeset" /> ID</td>
                    <td class="left"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_labels</code>(changeset)
                    </td>
                    <td class="left">Returns the <MadCap:variable name="General.changeset" /> labels</td>
                    <td class="left"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>is_always_run</code>(changeset)
                    </td>
                    <td class="left">Returns the <MadCap:variable name="General.changeset" /> alwaysRun value</td>
                    <td class="left"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>is_run_on_change</code>(changeset)
                    </td>
                    <td class="left">Returns the <MadCap:variable name="General.changeset" /> runOnChange value</td>
                    <td class="left"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Database attributes</h2>
        <p>Methods to return database attributes</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="left">Function</th>
                    <th class="left">Definition</th>
                    <th class="left">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="left"><code>get_database_product_name</code>(database)
                    </td>
                    <td class="left">Returns the database product name</td>
                    <td class="left">database</td>
                </tr>
                <tr>
                    <td class="left"><code>get_database_product_version</code>(database)
                    </td>
                    <td class="left">Returns the database product version</td>
                    <td class="left">database</td>
                </tr>
                <tr>
                    <td class="left"><code>get_default_schema_name</code>(database)
                    </td>
                    <td class="left">Returns the default schema for this database</td>
                    <td class="left">database</td>
                </tr>
                <tr>
                    <td class="left"><code>get_short_name</code>(database)
                    </td>
                    <td class="left">Returns the database short name</td>
                    <td class="left">database</td>
                </tr>
            </tbody>
        </table>
        <h2>JSON snapshot and return Dict objects</h2>
        <p>Methods to parse a JSON&#160;snapshot and return Dict objects</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="left">Function</th>
                    <th class="left">Definition</th>
                    <th class="left">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="left"><code>get_column</code>(snapshot, table_name, column_name)
                    </td>
                    <td class="left">Return the specified Column Dict object for a table</td>
                    <td class="left">
                        <p class="left"><code>snapshot</code>:     the snapshot to parse</p>
                        <p><code>  table_name</code>:   the name of the table to search for   </p>
                        <p><code>column_name</code>:  the name of the column to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_column_size</code>(column)
                    </td>
                    <td class="left">Return the specified Column's size</td>
                    <td class="left"><code>column</code>:   the Column Dict object</td>
                </tr>
                <tr>
                    <td class="left"><code>get_column_type_name</code>(column)
                    </td>
                    <td class="left">Return the specified Column's type name</td>
                    <td class="left"><code>column</code>:   the Column Dict object</td>
                </tr>
                <tr>
                    <td class="left"><code>get_columns</code>(snapshot, table_name)
                    </td>
                    <td class="left">Return a list of Column Dict objects for a table</td>
                    <td class="left">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_indexes</code>(snapshot, table_name)
                    </td>
                    <td class="left">Return a List of Index Dict objects for a table</td>
                    <td class="left">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_primary_key</code>(snapshot, table_name)
                    </td>
                    <td class="left">Return a Primary Key Dict object for a table</td>
                    <td class="left">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_table</code>(snapshot, table_name)
                    </td>
                    <td class="left">Return a list of Table Dict objects</td>
                    <td class="left">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_tables</code>(snapshot)
                    </td>
                    <td class="left">Return a list of Table Dict objects</td>
                    <td class="left">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2><MadCap:variable name="General.Liquibase" /> utilities</h2>
        <p>Utilities are general script helpers that retrieve content frequently searched for.</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="left">Function</th>
                    <th class="left">Definition</th>
                    <th class="left">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="left"><code>generate_sql</code>(change)</td>
                    <td class="left">Generate the SQL for this change and database</td>
                    <td class="left">
                        <p><b>change:</b> the change to generate sql from</p>
                        <p><b>return:</b> the sql of the change</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_arg</code>(name)</td>
                    <td class="left">Return the value of script argument</td>
                    <td class="left"><b>name:</b> the argument to find
<br /><b><br />return:</b> the value of the argument</td>
                </tr>
                <tr>
                    <td class="left"><code>get_binding</code>(key)</td>
                    <td class="left">Access the binding object at the given key</td>
                    <td class="left"><b>key:</b> the binding to access
<br /><b><br />return:</b> the binding</td>
                </tr>
                <tr>
                    <td class="left"><code>get_cache</code>(key, default_value)</td>
                    <td class="left">Return the results cache Dict object from the bindings
if there is no current value then put the default value</td>
                    <td class="left"><b>key:</b>            the look up key
<br /><b>default_value:</b>  the value to put for the key if no value present
<br /><b><br />return:</b>              the current value or the default</td>
                </tr>
                <tr>
                    <td class="left"><code>get_changes</code>()
                    </td>
                    <td class="left">Return a list of Liquibase Change objects</td>
                    <td class="left">
                        <p><b>return:</b> the liquibase change objects</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_changeset</code>()
                    </td>
                    <td class="left">Return the Liquibase Change Set object</td>
                    <td class="left"><b>return:</b> the liquibase change set object</td>
                </tr>
                <tr>
                    <td class="left"><code>get_column_type</code>(database_object)</td>
                    <td class="left">Get the type of the column of a database object</td>
                    <td class="left"><b>database_object:</b> the database object
<br /><b><br />return:</b> the type of the column, or None if the database object is not a column</td>
                </tr>
                <tr>
                    <td class="left"><code>get_database</code>()
                    </td>
                    <td class="left">Get the liquibase database object</td>
                    <td class="left">
                        <p><b>return:</b> the liquibase database object</p>
                    </td>
                </tr>
                <tr>
                    <td class="left"><code>get_database_object</code>()
                    </td>
                    <td class="left">Return the DatabaseObject that is being referenced in a database-scoped check</td>
                    <td class="left"><b>return:</b> the current database object being checked</td>
                </tr>
                <tr>
                    <td class="left"><code>get_database_snapshot</code>()
                    </td>
                    <td class="left">Return the DatabaseSnapshot as a String</td>
                    <td class="left"><b>return:</b> the database snapshot string</td>
                </tr>
                <tr>
                    <td class="left"><code>get_dbutil</code>()
                    </td>
                    <td class="left">Return the dbutil object used to check for object existence or to snapshot the DatabaseObject and return it</td>
                    <td class="left"><b>return:</b> the db_util object</td>
                </tr>
                <tr>
                    <td class="left"><code>get_logger</code>()
                    </td>
                    <td class="left">Get the liquibase logger</td>
                    <td class="left"><b>return:</b> the liquibase logger</td>
                </tr>
                <tr>
                    <td class="left"><code>get_object_type_name</code>(database_object)</td>
                    <td class="left">Get the object type string of a given database object</td>
                    <td class="left"><b>database_object:</b> The database_object to return the type for
<br /><b><br />return:</b> the type as a string</td>
                </tr>
                <tr>
                    <td class="left"><code>get_script_message</code>()
                    </td>
                    <td class="left">Get the message for the script</td>
                    <td class="left"><b>return:</b> the message</td>
                </tr>
                <tr>
                    <td class="left"><code>get_script_path</code>()
                    </td>
                    <td class="left">Return the path of the script</td>
                    <td class="left"><b>return:</b> the path of the script</td>
                </tr>
                <tr>
                    <td class="left"><code>get_snapshot</code>()
                    </td>
                    <td class="left">Return the snapshot as a JSON object.</td>
                    <td class="left"><b>return:</b> The snapshot json object or None if no snapshot is available</td>
                </tr>
                <tr>
                    <td class="left"><code>get_status</code>()
                    </td>
                    <td class="left">Return the Status object which will be used to set the check fired status and return a message</td>
                    <td class="left"><b>return:</b> the status object</td>
                </tr>
                <tr>
                    <td class="left"><code>has</code>(object_type, schema_name, object_name)</td>
                    <td class="left">Returns true if there is an object of this type and name in the schema</td>
                    <td class="left"><b>object_type:</b> the object type
<br style="font-weight: bold;" /><b>schema_name:</b> the schema name
<br /><b>object_name:</b> the object name
<br /><b><br />return:</b> true if there is an object that matches this description, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>has_relation</code>(object_type, object_name, relation_type, relation_schema_name, relation_name)</td>
                    <td class="left">Returns true if there is an object of this type that has a relation object  that matches the relation type, schema, and name</td>
                    <td class="left"><b>object_type:</b> the object type
<br /><b>object_name:</b> the object name
<br /><b>relation_type:</b> the type of relation (Table or View)
<br /><b>relation_schema_name:</b> the schema of the relation object
<br /><b>relation_name:</b> the name of the relation
<br /><b><br />return:</b><br />Returns <code>true</code> if there is an object of this type that has a relation object that matches the relation type, schema, and name.
<br />Returns <code>false</code> if no items match the provided criteria.</td>
                </tr>
                <tr>
                    <td class="left"><code>is_catalog</code>(database_object)</td>
                    <td class="left">Check if the database object is a catalog</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a catalog, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_check_constraint</code>(database_object)</td>
                    <td class="left">Check if the database object is a check constraint</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a check constraint, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_column</code>(database_object)</td>
                    <td class="left">Check if the database object is a column</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a column, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_database_package</code>(database_object)</td>
                    <td class="left">Check if the database object is a database package</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a database package, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_database_package_body</code>(database_object)</td>
                    <td class="left">Check if the database object is a database package body</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a database package body, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_foreign_key</code>(database_object)</td>
                    <td class="left">Check if the database object is a foreign key</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a foreign key, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_function</code>(database_object)</td>
                    <td class="left">Check if the database object is a function</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a function, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_index</code>(database_object)</td>
                    <td class="left">Check if the database object is a index</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br style="font-weight: bold;" /><b><br />return: </b>true if the object is a index, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_primary_key</code>(database_object)</td>
                    <td class="left">Check if the database object is a primary key</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a primary key, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_schema</code>(database_object)</td>
                    <td class="left">Check if the database object is a schema</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a schema, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_sequence</code>(database_object)</td>
                    <td class="left">Check if the database object is a sequence</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a sequence, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_stored_database_logic</code>(database_object)</td>
                    <td class="left">Check if the database object is stored database logic</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is stored database logic, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_stored_procedure</code>(database_object)</td>
                    <td class="left">Check if the database object is a stored procedure</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a stored procedure, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_synonym</code>(database_object)</td>
                    <td class="left">Check if the database object is a synonym</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a synonym, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_table</code>(database_object)</td>
                    <td class="left">Check if the database object is a table</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a table, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_trigger</code>(database_object)</td>
                    <td class="left">Check if the database object is a trigger</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a trigger, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_unique_constraint</code>(database_object)</td>
                    <td class="left">Check if the database object is a unique constraint</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a unique constraint, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>is_view</code>(database_object)</td>
                    <td class="left">Check if the database object is a view</td>
                    <td class="left"><b>database_object:</b> the database object to check
<br /><b><br />return:</b> true if the object is a view, false otherwise</td>
                </tr>
                <tr>
                    <td class="left"><code>put_cache</code>(key, value)</td>
                    <td class="left">Put the value in the cache</td>
                    <td class="left"><b> key</b>            The key to use
<br /><b> value</b>          The value to put in the cache</td>
                </tr>
                <tr>
                    <td class="left"><code>query_for_list</code>(sql, sql_file, end_delimiter)</td>
                    <td class="left">Execute a SQL statement or script</td>
                    <td class="left"><b>sql:</b> the sql to execute
<br /><b>sql_file:</b> the sql file to execute
<br /><b>end_delimiter:</b> the end delimiter to use
<br /><b><br />return:</b> the results of the sql as a list</td>
                </tr>
                <tr>
                    <td class="left"><code>snapshot_object</code>(object_type, object_name, relation_type, schema_name, relation_name)</td>
                    <td class="left">Return a Liquibase model object that represents a database object</td>
                    <td class="left"><b>object_type:</b> the type of the object, like Table<br /><b>object_name:</b> the objects name<br /><b>relation_type:</b> a type of relation that we need to snapshot to access the object<br /><b>schema_name:</b> the schema for the relation<br /><b>relation_name:</b> the name of the relation<br /><b><br />return:</b> the liquibase model for the database object</td>
                </tr>
                <tr>
                    <td class="left"><code>split_sql</code>(sql_string, strip_comments_flag, end_delimiter, changeset)</td>
                    <td class="left">Returns an array of SQL lines</td>
                    <td class="left"><b>sql_string:</b> the SQL to process
<br /><b>strip_comments_flag:</b> true to strip out comments
<br /><b>end_delimiter:</b> the end delimiter to use while processing the sql
<br /><b>changeset:</b> the change set associated with the sql
<br /><b><br />return: </b>An array of SQL lines</td>
                </tr>
                <tr>
                    <td class="left"><code>split_statements</code>(sql_string)</td>
                    <td class="left">Split a string of SQL into individual statements</td>
                    <td class="left"><b>sql_string:</b> the sql string to split
<br /><b><br />return:</b> the list of sql strings</td>
                </tr>
                <tr>
                    <td class="left"><code>strip_comments</code>(sql_string)</td>
                    <td class="left">Strip comments from a SQL string</td>
                    <td class="left"><b>sql_string:</b> the sql to strip
<br /><b><br />return:</b> the sql string with comments removed</td>
                </tr>
                <tr>
                    <td class="left"><code>tokenize</code>(statement)</td>
                    <td class="left">Tokenize a statement which was create by sqlparse and return a list</td>
                    <td class="left"><b>statement:</b> the statement to tokenize
<br /><b><br />return:</b> the tokenized statement as a list</td>
                </tr>
            </tbody>
        </table>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Constants</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <p> Constants are an unchangeable set of well-known constants that are used to access the script bindings. They are definitions of internal Python classes <MadCap:variable name="General.Liquibase" /> uses to enable Custom Policy Checks via Python scripts. </p>
            <p><b>Prerequisite</b>
            </p>
            <p>You should be familiar with what a Python class is and how classes can have variables which are the equivalent of a constant.</p>
            <p class="warning" MadCap:autonum="&lt;b&gt;Warning: &lt;/b&gt;">Most users will not need to use these unless you are debugging a complex Custom Policy Check they have created.</p>
            <MadCap:dropDownBody>
                <h3>Constants</h3>
                <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
                    <caption><b>Constant Methods</b>
                    </caption>
                    <col />
                    <tbody>
                        <tr>
                            <td class="left">__init__(self)</td>
                        </tr>
                        <tr>
                            <td class="left">__setattr__(self, name, value)</td>
                        </tr>
                    </tbody>
                </table>
                <table style="width: 100%; caption-side: top; margin-left: auto; margin-right: auto;">
                    <caption><b>Constant data descriptors</b>
                    </caption>
                    <col />
                    <tbody>
                        <tr>
                            <td class="left">__dict__</td>
                        </tr>
                        <tr>
                            <td class="left">__weakref__</td>
                        </tr>
                    </tbody>
                </table>
                <h3>Script Constants</h3>
                <table style="width: 100%; caption-side: top; margin-left: auto; margin-right: auto;">
                    <caption><b>ScriptConstant data descriptors</b>
                    </caption>
                    <col />
                    <tbody>
                        <tr>
                            <td class="left">__dict__</td>
                        </tr>
                        <tr>
                            <td class="left">__weakref__</td>
                        </tr>
                    </tbody>
                </table>
                <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
                    <caption><b>ScriptConstant data and other attribute definitions</b>
                    </caption>
                    <col />
                    <tbody>
                        <tr>
                            <td class="left">ARGS_SUFFIX = '_arg_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">CACHE_BINDING = 'cache_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">CHANGESET_BINDING = 'changeSet_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">CHANGES_BINDING = 'changes_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">DATABASE_BINDING = 'database_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">DATABASE_OBJECT_BINDING = 'databaseObject_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">DATABASE_SNAPSHOT_BINDING = 'databaseSnapshot_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">DBUTIL_BINDING = 'dbutil_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">LOGGER_BINDING = 'logger_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">SCRIPT_MESSAGE_BINDING = 'scriptMessage_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">SCRIPT_PATH_BINDING = 'script_path_binding'</td>
                        </tr>
                        <tr>
                            <td class="left">STATUS_BINDING = 'status_binding'</td>
                        </tr>
                    </tbody>
                </table>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
    </body>
</html>