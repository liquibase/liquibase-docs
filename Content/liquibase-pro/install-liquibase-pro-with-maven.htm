<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Install Liquibase Pro with Maven</h1>
        <p>Apache Maven is a software project management and comprehension tool, based on the concept of a project object model (POM). The Liquibase Pro Maven integration lets you manage your build process and database schema scripts from a central <code>pom.xml</code> file.</p>
        <p>If you’re already using Maven with Liquibase OSS, refer to our guide on <a href="../../tools-integrations/maven/getting-started-liquibase-maven.htm">upgrading from Liquibase Open Source to Liquibase Pro</a>, available on the Getting Started with Liquibase and Maven page. </p>
        <p>Some Maven goals are only available with Liquibase Pro. The Maven Goals page lists all available Liquibase goals for use with Maven, with Pro-specific goals marked with a PRO label.</p>
        <h2>Prerequisites</h2>
        <ul>
            <li> <a href="../license-key.htm">Apply your Liquibase Pro license key</a>.</li>
            <li>Install Maven. No action is needed if you already have Maven installed for your project. If you do not have Maven installed, we have a guide on <a href="../../tools-integrations/maven/installation-linux-unix-mac-windows-with-maven.html">how to install and verify you have Maven up and running</a> or you can refer to the <a href="https://maven.apache.org/install.html">official Maven installation page</a>.</li>
            <li>Ensure <a href="https://www.oracle.com/java/technologies/javase-downloads.html">java</a> is installed on your computer. You can check if java is installed by running <code>java -version</code> in the CLI.</li>
        </ul>
        <p>1. Create a Liquibase <a href="https://maven.apache.org/guides/getting-started/maven-in-five-minutes.html">Maven project directory</a> to store all Liquibase files.</p>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">You can follow the <a href="https://maven.apache.org/guides/introduction/introduction-to-the-standard-directory-layout.html">Maven Standard Directory Layout</a> by placing your Liquibase files, such as the <a href="../concepts/changelogs/home.html">changelog</a> and <a href="../concepts/connections/creating-config-properties.html">liquibase.properties</a>, in the <code>src/main/resources</code> folder. This matches the default classpath used by Maven and lets you reference files in your <code>pom.xml</code> with simple relative paths like <code>changelog.sql</code>, instead of needing full or custom paths. </p>
        <p>2. In your Liquibase Maven project directory, create a <code>pom.xml</code> file. If you are using Maven Standard Directory Layout, you can place this in the root directory of your project.</p>
        <p>3. Add the following section to the <code>pom.xml</code> file:
		
			<pre xml:space="preserve"><code class="language-xml">&lt;plugin&gt;
	&lt;groupId&gt;org.liquibase&lt;/groupId&gt;
	&lt;artifactId&gt;liquibase-pro-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;<MadCap:variable name="software-versions.latest-liquibase-pro" />&lt;/version&gt;
&lt;/plugin&gt;</code></pre></p>
        <p>4. Add Configurations.</p>
        <p>Liquibase Maven <a href="../tools-integrations/maven/home.html">goals</a> require database connection details, changelog configuration, and other parameters. This example adds some basic configurations, but depending on your goal, you may need to add additional parameters. You can pass these values at runtime, but it's often easier and more maintainable to <a href="../tools-integrations/maven/maven-properties.htm">store them in the pom.xml file or a separate liquibase.properties</a> file. In the example code, we are adding configurations to the pom.xml file. </p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you choose to store your configurations in the <code>liquibase.properties</code> file, the properties file must reside in the <code>src/main/resources</code> directory or be specified in your search path. <a href="../concepts/connections/creating-config-properties.html">Liquibase properties</a> must also be specified in the configuration section of the pom.xml file. These will follow the format <code>&lt;propertyFile&gt;liquibase.properties&lt;/propertyFile&gt;</code></p>
        <p>Before using the example code, be sure to:</p>
        <ul>
            <li>Set the version to the version of Liquibase Pro you would like to run</li>
            <li>Replace <i>your_changelog_file</i> with a name and extension for your changelog file. We'll create one in the next steps. For now, choose a name and a file format. For example <code>changelog.sql</code>.  Liquibase supports <code>.xml</code>, <code>.yaml</code>, and <code>.json </code>  formats. </li>
            <li>Replace <i>your_db</i>, <i>your_hostname</i>, <i>your_port</i>, and <i>your_db_name</i> to format your jdbc URL. You can view examples of how JDBC URLs are formatted for different databases on our <a href="../start/tutorials/home.html">Liquibase Database Tutorials home page</a>.</li>
            <li style="font-style: normal;">Repace <i>your_username</i> and <i>your_password</i>.</li>
        </ul>
        <h3>Example Code</h3><pre><code class="language-xml">&lt;plugin&gt;
	&lt;groupId&gt;com.liquibase&lt;/groupId&gt;
	&lt;artifactId&gt;liquibase-pro-maven-plugin&lt;/artifactId&gt;
	&lt;version&gt;5.0.0&lt;/version&gt;
	&lt;configuration&gt;
		&lt;changeLogFile&gt;your_changelog_file&lt;/changeLogFile&gt;
		&lt;url&gt;jdbc:your_db//your_hostname:your_port/your_db_name&lt;/url&gt;
		&lt;username&gt;dbuser&lt;/username&gt;
		&lt;password&gt;dbpassword&lt;/password&gt;
	&lt;/configuration&gt;
&lt;/plugin&gt;</code></pre>
        <p style="font-style: normal;">5. Create a changelog file in the <code>src/main/resources</code> directory with the name of <i>your_changelog_file</i>, such as <code>changelog.sql</code>.</p>
        <p>6. Add <MadCap:variable name="General.changeset" />s to your <MadCap:variable name="General.changelog" /> file. Use the following examples depending on the format of the <MadCap:variable name="General.changelog" /> you created:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>XML example</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
						<MadCap:snippetText src="../../Z_Resources/Snippets/code/liquibase-xsd-xml-changelog-closed.flsnp"></MadCap:snippetText>
						&lt;changeSet id="1" author="Liquibase"&gt;
						&lt;createTable tableName="test_table"&gt;
						&lt;column name="test_id" type="int"&gt;
						&lt;constraints primaryKey="true"/&gt;
						&lt;/column&gt;
						&lt;column name="test_column" type="varchar"/&gt;
						&lt;/createTable&gt;
						&lt;/changeSet&gt;
				&lt;/databaseChangeLog&gt;</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>SQL example</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-sql">--liquibase formatted sql

						--changeset liquibase:1
				CREATE TABLE test_table (test_id INT, test_column VARCHAR, PRIMARY KEY (test_id))</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>YAML example</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-yaml">databaseChangeLog:
						- changeSet:
						id: 1
						author: Liquibase
						changes:
						- createTable:
						tableName: test_table
						columns:			
						- column:
						name: test_column
						type: INT
						constraints:  
						primaryKey:  true  
				nullable:  false  </code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>JSON example</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-json">{ 
						"databaseChangeLog": [
						{
						"changeSet": {
						"id": "1",
						"author": "Liquibase",
						"changes": [
						{
						"createTable": {
						"columns": [
						{
						"column": 
						{
						"name": "test_column",
						"type": "INT",
						"constraints": 
						{
						"primaryKey": true,
						"nullable": false
						}
						}
						}]
						,
						"tableName": "test_table"
						}
						}]
						}
						}]
				}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p>7. Run the <code>update-sql</code> goal to inspect the SQL before applying changes to your database:</p><pre xml:space="preserve"><code class="language-text">mvn liquibase:updateSQL</code></pre>
        <p>8. Deploy your changes by using the <code>update</code> goal:</p><pre xml:space="preserve"><code class="language-text">mvn liquibase:update</code></pre>
		<p>After your first update, you will see a new table along with the <MadCap:xref href="../../concepts/tracking-tables/databasechangelog-table.html">[%=General.databasechangelog%] table</MadCap:xref> and <MadCap:xref href="../../concepts/tracking-tables/databasechangeloglock-table.html">[%=General.databasechangeloglock%] table</MadCap:xref> added to the database.</p>
		<h2>Related links</h2>
		<ul>
			<li>
				<MadCap:xref href="../../concepts/introduction-to-liquibase.htm">Introduction to [%=General.Liquibase%]</MadCap:xref>
			</li>
			<li>
				<MadCap:xref href="../../start/tutorials/home.html">[%=General.Liquibase%] Database Tutorials</MadCap:xref>
			</li>
			<li>
				<MadCap:xref href="maven-properties.htm">Maven Properties</MadCap:xref>
			</li>
			<li>
				<MadCap:xref href="commands/home.htm">Maven Goals</MadCap:xref>
			</li>
		</ul>
    </body>
</html>