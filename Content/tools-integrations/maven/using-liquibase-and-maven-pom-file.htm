<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/tools-integrations/maven/using-liquibase-and-maven-pom-file.html" />
        <meta name="description" content="The purpose of this document is to guide you through the process of using Liquibase and your Maven POM File." />
    </head>
    <body>
        <h1>Using <MadCap:variable name="General.Liquibase" /> and your Maven POM File</h1>
        <p>It is recommended to use Apache Maven 3.1 or later to make it easier to configure the <a href="https://maven.apache.org/maven-logging.html">log-level of <MadCap:variable name="General.Liquibase" /> Maven plugin</a> with MAVEN_OPTs or by passing the following command: <code class="highlighter-rouge">-Dorg.slf4j.simpleLogger.defaultLogLevel=DEBUG</code>. You can also edit the properties in the <code>${maven.home}/conf/logging/simplelogger.properties</code> file.</p>
        <h2>Paths to files</h2>
        <p>As of version 1.6.1.0 of the Maven plugin, all files are resolved from the Maven test classpath for the Maven project or an absolute path. This allows your <MadCap:variable name="General.changelog" /> to be present in other Maven artifacts (on the classpath) and to be used to invoke <MadCap:variable name="General.Liquibase" /> on a database.</p>
        <h2>Configuration property files</h2>
        <p>You can specify configuration settings for the Maven <MadCap:variable name="General.Liquibase" /> plugin  in standard Java Property files. If you specify a configuration property file, it will be used to set up the properties for the invocation of the Maven <MadCap:variable name="General.Liquibase" /> plugin.</p>
        <p>Each property defined in the file that matches a property in the goal you want to invoke will be set. If the property does not match any of the properties for the goal, then a warning message will be displayed, but execution will continue.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The reason for only printing a warning message is to allow you to define a single main configuration property file that can be re-used for multiple Maven <MadCap:variable name="General.Liquibase" /> goals like <MadCap:xref href="commands/maven-update.html">Maven update</MadCap:xref> and <MadCap:xref href="commands/maven-tag.html">Maven tag</MadCap:xref>.</p>
        <h3>Using  a configuration property file and specifying configuration values</h3>
        <p>It is possible to specify a configuration property file and individual properties in the <code class="highlighter-rouge">&lt;configuration&gt;</code> section of the Maven <code>pom.xml</code> file.</p>
        <p>If this is done, the properties specified in the <code class="highlighter-rouge">&lt;configuration&gt;</code> section are granted preference over the properties defined in the properties file. To prevent the properties specified in the <code>&lt;configuration&gt;</code> from overriding the properties file, add the following to the <code class="highlighter-rouge">&lt;configuration&gt;</code> section:</p><pre><code class="language-text">&lt;propertyFileWillOverride&gt;true&lt;/propertyFileWillOverride&gt;</code></pre>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>Maven <MadCap:variable name="General.Liquibase" /> update command</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Ensure that you include the relevant JDBC driver for your database in the <code>&lt;dependency&gt;&lt;/dependency&gt;</code> section of Maven POM file.</p>
                <p style="font-weight: bold;">MySQL example:</p><pre xml:space="preserve"><code class="language-text">&lt;project&gt;
   &lt;dependencies&gt;  
     &lt;dependency&gt;
       &lt;groupId&gt;&lt;/groupId&gt; 
       &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; 
&lt;!-- Replace with the version of the MySQL driver you want to use --&gt; 
&lt;version&gt;${mysql-version}&lt;/version&gt;
   &lt;/dependency&gt; 
   &lt;/dependencies&gt; 
&lt;/project&gt;</code></pre>
                <p style="font-weight: bold;">Oracle example (thin driver):</p><pre xml:space="preserve"><code class="language-text">&lt;project&gt; 
   &lt;dependencies&gt; 
     &lt;dependency&gt; 
       &lt;groupId&gt;com.oracle&lt;/groupId&gt; 
       &lt;artifactId&gt;ojdbc14&lt;/artifactId&gt;  
       &lt;version&gt;10.2.0.4&lt;/version&gt; 
   &lt;/dependency&gt; 
  &lt;/dependencies&gt; 
&lt;/project&gt;</code></pre>
                <p>The following is a sample configuration for the <MadCap:variable name="General.Liquibase" /> Maven plugin (version 1.6.1.0) showing an example of the <MadCap:xref href="commands/maven-update.html">Maven update</MadCap:xref> goal:</p><pre xml:space="preserve"><code class="language-text">&lt;project&gt;  
    &lt;build&gt;
      &lt;plugins&gt;
        &lt;plugin&gt; 
          &lt;groupId&gt;org.liquibase&lt;/groupId&gt;
          &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt; 
           &lt;configuration&gt;                  
             &lt;propertyFile&gt;src/main/resources/liquibase/liquibase.properties&lt;/propertyFile&gt;  
           &lt;/configuration&gt;                 
           &lt;executions&gt; 
             &lt;execution&gt;
              &lt;phase&gt;process-resources&lt;/phase&gt;                                                                   
              &lt;goals&gt; 
              &lt;goal&gt;update&lt;/goal&gt;
              &lt;/goals&gt;
             &lt;/execution&gt;
           &lt;/executions&gt;
        &lt;/plugin&gt;    
      &lt;/plugins&gt;
    &lt;/build&gt; 
   &lt;/project&gt;</code></pre>
                <p>This example configuration runs the <MadCap:xref href="commands/maven-update.html">Maven update</MadCap:xref> goal as part of the process-resources phase of the build. The <MadCap:variable name="General.Param/Attr/Uppercased" />s for running <MadCap:variable name="General.Liquibase" /> are specified in <code class="highlighter-rouge">src/main/resources/liquibase.properties</code>, where <code><MadCap:variable name="General.liquiPropFile" /></code> represents the name of the <MadCap:variable name="General.Liquibase" /> properties file.</p>
                <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If the classpath contains a single properties file, shorten the file path from <code>src/main/resources/liquibase.properties</code> to <code><MadCap:variable name="General.liquiPropFile" /></code>.</p>
                <p>Also, you can specify all the <MadCap:variable name="General.Param/Attribute" />s for executing the Maven <MadCap:variable name="General.Liquibase" /> plugin in the <code class="highlighter-rouge">&lt;configuration&gt;</code> section of the plugin:</p><pre xml:space="preserve"><code class="language-text">&lt;plugin&gt; 
   &lt;groupId&gt;org.liquibase&lt;/groupId&gt;  
   &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;
   &lt;version&gt;3.0.5&lt;/version&gt; 
    &lt;configuration&gt;  
     &lt;changeLogFile&gt;src/main/resources/org/liquibase/business_table.xml&lt;/changeLogFile&gt; 
     &lt;driver&gt;oracle.jdbc.driver.OracleDriver&lt;/driver&gt;
     &lt;url&gt;jdbc:oracle:thin:@tf-appserv-linux:1521:xe&lt;/url&gt; 
     &lt;username&gt;liquibaseTest&lt;/username&gt;
     &lt;password&gt;pass&lt;/password&gt;
     &lt;outputChangeLogFile&gt;myGenChangeLog.xml&lt;/outputChangeLogFile&gt;
     &lt;/configuration&gt; 
      &lt;executions&gt; 
       &lt;execution&gt; 
          &lt;phase&gt;process-resources&lt;/phase&gt; 
          &lt;goals&gt;  
            &lt;goal&gt;update&lt;/goal&gt; 
          &lt;/goals&gt; 
       &lt;/execution&gt; 
     &lt;/executions&gt;  
   &lt;/plugin&gt;</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h2>Additional Maven <MadCap:variable name="General.Liquibase" /> properties</h2>
        <p>To disable the pop-up dialog that confirms migrations on non-local databases, add the following code snippet to your <code>pom.xml</code> file:</p><pre><code class="language-text">&lt;promptOnNonLocalDatabase&gt;false&lt;/promptOnNonLocalDatabase&gt;</code></pre>
        <p>To get hints about all available configuration parameters within the <MadCap:variable name="General.Liquibase" /> Maven plugin, use the following Maven command:</p><pre><code class="language-text">mvn help:describe -DgroupId=org.liquibase -DartifactId=liquibase-maven-plugin -Dversion=2.0.1 -Dfull=true</code></pre>
        <h2>Maven multiple projects</h2>
        <p>Through the usage of a parent-POM (super-POM), it is possible to have a centralized <MadCap:variable name="General.Liquibase" /> plugin configuration that applies to all your Maven child projects.</p>
        <p> The adaptation to each project needs (database driver, jdbc, url, and others) is made through a local <MadCap:variable name="General.Liquibase" /> properties file. Because the project might contain several configurations, you can use the Maven resource filtering system to filter the properties file.</p>
        <p>The main advantages of this setup include the following:
        </p>
        <ul>
            <li>No <MadCap:variable name="General.Liquibase" /> plugin configuration in your projects. Only a <MadCap:variable name="General.Liquibase" /> properties file is required.</li>
            <li>A unique place where you can update the plugin version, as you do not need to manually edit the <code class="highlighter-rouge">pom.xml</code> files and commit them.</li>
        </ul>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">For a detailed explanation of the super-POM, see <a href="https://maven.apache.org/guides/introduction/introduction-to-the-pom.html">Introduction to the POM</a>.</p>
        <p style="font-weight: bold;">Parent <code class="highlighter-rouge">pom.xml</code> example:</p><pre xml:space="preserve"><code class="language-text">&lt;project&gt;  
   &lt;build&gt;
      &lt;plugins&gt;
        &lt;plugin&gt;  
          &lt;groupId&gt;org.liquibase&lt;/groupId&gt;
          &lt;artifactId&gt;liquibase-maven-plugin&lt;/artifactId&gt;
          &lt;version&gt;4.2.2&lt;/version&gt; 
          &lt;configuration&gt;
            &lt;propertyFileWillOverride&gt;true&lt;/propertyFileWillOverride&gt; 
            &lt;propertyFile&gt;target/classes/liquibase.properties&lt;/propertyFile&gt;  
          &lt;/configuration&gt; 
        &lt;/plugin&gt; 
      &lt;/plugins&gt;  
    &lt;/build&gt; 
 &lt;/project&gt;</code></pre>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Replace <code>4.2.2</code> by the most recent version of the plugin.</p>
        <p>As shown in the example, you might want to add an <code class="highlighter-rouge">&lt;executions&gt;</code> section or add configuration properties to the <code class="highlighter-rouge">&lt;configuration&gt;</code> section. Modifications are applied to all child projects. In most cases, you can override the global configuration in your local <MadCap:variable name="General.Liquibase" /> properties file by setting <code class="highlighter-rouge">&lt;propertyFileWillOverride&gt;</code> to <code class="highlighter-rouge">true</code>. To specify exceptions among your projects, add the <code class="highlighter-rouge">&lt;plugin&gt;</code> section to the child <code class="highlighter-rouge">pom.xml</code>. This step overrides the global configurations.</p>
        <p>When using <MadCap:variable name="General.Liquibase" /> and Maven, place the <MadCap:variable name="General.Liquibase" /> properties file and <MadCap:variable name="General.changelog" /> files in the <code class="highlighter-rouge">src/main/resources</code> folder. The properties file can include as many properties as you need:</p><pre xml:space="preserve"><code class="language-text">contexts: ${liquibase.contexts}
changeLogFile: com/company/client/project/changelog.xml
driver: ${dataSource.project.driverClass}
url: ${dataSource.project.jdbcURL}   
verbose: true
dropFirst: false</code></pre>
        <p>The placeholders are filtered by the Maven resource filtering system and are replaced by values found in filter property files located in <code class="highlighter-rouge">src/main/filters</code>. The project jdbc url and database driver are used for <MadCap:variable name="General.Liquibase" /> as well.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">You can have as many property file filters as you need. To specify the filter to use on Maven execution, you need to use <a href="https://maven.apache.org/guides/introduction/introduction-to-profiles.html">Maven profiles</a>.</p>
        <p>To get your Maven standard <code class="highlighter-rouge">resources/</code> folder filtered, you need to have this configuration in your <code class="highlighter-rouge">pom.xml</code>:</p><pre xml:space="preserve"><code class="language-text">&lt;build&gt;
   &lt;resources&gt;  
     &lt;resource&gt;
       &lt;directory&gt;src/main/resources&lt;/directory&gt;  
       &lt;filtering&gt;true&lt;/filtering&gt;
     &lt;/resource&gt;
   &lt;/resources&gt;  
&lt;/build&gt;</code></pre>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">For more information, see <a href="https://maven.apache.org/guides/getting-started/index.html#How_do_I_filter_resource_files">How do I filter resource files</a>.</p>
        <p> To filter the placeholders for the <MadCap:variable name="General.Liquibase" /> properties file, invoke the <code class="highlighter-rouge">resources</code>:</p><pre><code class="language-text">mvn resources:resources liquibase:update -P&lt;profile_name&gt;</code></pre>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The <code class="highlighter-rouge">-P</code> option refers Maven to the profile to use and thus to the set of values (from the filter properties file) to use for filtering.</p>
        <p>If you do not require filtering capabilities, replace the following in the super-POM plugin configuration:</p><pre><code class="language-text">&lt;propertyFile&gt;target/classes/liquibase.properties&lt;/propertyFile&gt; by &lt;propertyFile&gt;src/main/resources/liquibase.properties&lt;/propertyFile&gt;</code></pre>
        <p>where <code><MadCap:variable name="General.liquiPropFile" /></code> represents the name of the <MadCap:variable name="General.Liquibase" /> properties file. In this example, you can run only <code class="highlighter-rouge">mvn liquibase:update</code>.</p>
        <h2>Related links</h2>
        <ul>
            <li>
                <MadCap:xref href="maven-pom-file.htm">Configuring [%=General.Liquibase%] [%=General.Param/Attr/Uppercased%]s in your Maven POM File</MadCap:xref>
            </li>
        </ul>
    </body>
</html>