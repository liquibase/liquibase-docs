<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/flow/if-conditionals.html" />
        <meta name="description" content="Reference information and use cases for Flow Conditionals in the Flow File." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Flow Conditionals</h1>
        <p>Flow conditionals allow you to set specific blocks of code to run or not run depending on your <a href="home.htm">flow file</a> functionality needs.</p>
        <p>Read more: <MadCap:xref href="advanced-flow-file.htm">Advanced Flow File</MadCap:xref></p>
        <MadCap:snippetBlock src="../../Z_Resources/Snippets/note/command-flow-version.flsnp" />
        <h2>Flow conditionals code format</h2>
        <p>Flow conditionals exist within their own block of code within a Stage or Action in a Flow file. A few formatting rules to note are:</p>
        <ul>
            <li>The entire conditional must be encompassed by "quotes".</li>
            <li>Variables must begin with <code>$</code> and be encompassed by {curly braces}.</li>
        </ul>
        <p>For example:</p><pre><code class="language-text">if: "${LIQUIBASE_ACTIVE_TARGET} == dev"</code></pre>
        <p>Any defined variable within the scope of the flow file can be used as a conditional. <br />This includes: </p>
        <ul>
            <li>Environment variables </li>
            <li>Global variables</li>
            <li>Stage variables</li>
            <li>"included" variables</li>
            <li>Properties from the defaults file</li>
        </ul>
        <p>Read more: <MadCap:xref href="variables.htm">Flow Variables</MadCap:xref></p>
        <h2>Implement flow conditionals</h2>
        <p>Values within flow conditionals are called on in the format below. If the conditional value is evaluated to <code>true</code>, it will run the command. If the conditional value is evaluated  to <code>false</code>, it will not run the command.</p><pre xml:space="preserve"><code class="language-yaml">- type: liquibase
    if: "${LIQUIBASE_ACTIVE_TARGET} == dev"
    command: checks run
    cmdArgs: {checks-scope: changelog}
	
- type: liquibase
    if: "${LIQUIBASE_ACTIVE_TARGET} != dev"
    command: updatesql</code></pre>
        <p>When you run the <code><MadCap:xref href="flow.htm">flow</MadCap:xref></code> command,  messages will appear in the CLI after the flow file executes each section:</p>
        <ul>
            <li><code>Executing 'liquibase' checks run</code>: this is because the environment variable above is set to <code>true</code>.</li>
            <li><code>Skipping action: 'liquibase' updatesql because condition 'dev != dev' evaluated to false.'</code>: this is the best location to find why flow conditionals did or did not run successfully. If you expected a conditional to run successfully and it did not, you are better equipped to adjust the flow file accordingly.</li>
        </ul><pre xml:space="preserve"><code class="language-text">***********************************************************************
*
* Executing 'liquibase' checks run
*
***********************************************************************

Executing Quiality Checks against example-changelog.sql

Executing all changelog checks because a valid license key was found!

Warning: No database checks were run. Make sure the checks-scope property includes "database" to run database checks. In the CLI set --checks-scope+'changelog.database" or set an environment variable.
LIQUIBASE_COMMAND_CHECKS_SCOPE=database. Learn more at https://docs.liquibase.com/quality-checks

INFO: Checks executed against SQL generated by H2 at jdbc:h2:tcp://localhost:9090/mem:dev.
Changesets Validated: in example-changelog.sql
	ID: 1; Author: your.name
	ID: 2; Author: your.name
	ID: 3; Author: other.dev
	
Checks run against each changeset:
	Changesets Must Have a Context Assigned (Short names: ChangesetCommentCheck)
	Changesets Must Have a Context Assigned (Short names: ChangesetContextCheck)
	Changesets Must Have a Label Assigned (Short names: ChangesetLabelCheck)
	Check Table Column Count (Short names: TableColumnLimit)
	Rollback Required for Changeset (Short names: RollbackRequired)
	Warn on Detection of 'GRANT' statements (short names: SQLGrantWarn)
	Warn on Detection of 'REVOKE' statements (short names: SQLRevokeWarn)
	Warn on Detection of grant that contains 'WITH ADMIN OPTION' (Short names: SqlGrantAdminWarn)
	Warn on Detection of grant that contains 'WITH GRANT OPTION' (Short names: SqlGrantOptionWarn)
	Warn when 'DROP COLUMN' detected (Short names: ChangeDropColumnWarn)
	Warn when 'DROP TABLE' detected (Short names: ChangeDropTableWarn)
	Warn when 'MODIFY &lt;column&gt;' detected (Short names: ModifyDataTypeWarn)
	Warn when 'TRUNCATE TABLE' detected (Short names: ChangeTruncateTableWarn)
	
Changelogs Checks Skipped Due to unsupported changeset type for this check:
	Require primary key when creating table (Short names: PrimaryKeyOnCreateTable) skipped for:
		1:your.name,
		2:your.name,
		3:other.dev,
		
Liquibase command 'checks run' was executed successfully.

***********************************************************************
*
* Skipping action: 'liquibase updatesql because condition 'dev != dev' evaluated to false.
*
***********************************************************************</code></pre>
        <h2>Expansion on Conditionals</h2>
        <p>Additional conditionals are available in <MadCap:variable name="General.Liquibase" /> 4.26.0. These conditional features provide more flexibility that allows users to determine if a stage or action is executed within their Flow File. This permits users to author simplified flows that are easier to reuse and maintain when applied to multiple products across an organization. This makes flows scalable and applicable to your database as your company grows. This section covers how to enable <code>AND</code>, <code>OR</code>, <code>NULL</code>, <code>STARTSWITH</code>, <code>ENDSWITH</code>, and <code>CONTAINS</code> logic conditionals. Find descriptions and examples of these below.</p>
        <h3>Rules for additional conditionals</h3>
        <ul>
            <li>It is best practice to encompass entire conditionals by "quotes"</li>
            <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;">
                <br /><code>if: "${key} == 'production'"<br /><br />if: "thisIsAVar == 'This is a string'"<br /><br />if: "'thisString' == ${myVar}"</code>
            </p>
            <li>Strings, also referred to as non-variables, require quotations around them, otherwise <MadCap:variable name="General.Liquibase" /> will assume they are variables or property names instead of strings.</li>
            <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;">
                <br /><b>Correct:</b>&#160;<code>$user == 'example'</code><br style="font-weight: bold;" /><b>Incorrect:</b> <code>$user == example</code></p>
            <li>Any conditional previously written is guaranteed to work, as long as it is not modified. If changes are needed you should rewrite the conditional and follow the quoting rule above.</li>
        </ul>
        <h3>Implementing additional conditionals</h3>
        <h4>Conditional AND statements</h4>
        <p>This section includes additional conditionals which allow logic operations such as AND and OR.</p>
        <p><code>if: "${KEY} == ${VALUE} &amp;&amp; ${KEY2} != ${VALUE2}"</code>
        </p>
        <h4>Conditional OR statements</h4>
        <p><code>if: "${KEY} == ${VALUE} || ${KEY2} == ${VALUE2}"</code>
        </p>
        <h4>Grouping in Flows<br /></h4>
        <p>You may group conditionals and nest groups of conditionals within flows.</p><pre><code>if: "(a==true &amp;&amp; b==true) or c==false"</code></pre><pre><code>if: "((a==true &amp;&amp; b==true) or c==false) &amp;&amp; d=true"</code></pre>
        <h4>Conditionals that check if variables exist</h4>
        <p>flow files can check the state of a variable to see if it exists or not.</p><pre>if: "(key != 'null')"</pre><pre>if: "(${KEY2} == nil)"</pre><pre>if: "(myVar == empty)"</pre>
        <p>You can express a null value in the following three ways:</p><pre>'null'</pre><pre>nil</pre><pre>empty</pre>
        <h4>Conditionals that check if files exist</h4>
        <p>The if exists conditional allows a user to check if a file exits at a certain location. </p>
        <p>Rules for <code>if exists</code> conditionals:</p>
        <p>
            <ul>
                <li>A file can exist in a local or remote location</li>
                <li>The path can be quoted or not</li>
                <li>The path can be passed wholly or in part as a property substitution</li>
                <li>The path can be marked as <code>true</code> or <code>false</code> relative to the current working directory.</li>
            </ul>
        </p>
        <p><code>exists</code> example:<br></br></p>
        <ul>
            <li><code>if: exists("path/to/file")</code>
            </li>
            <li><code>if: exists("./path/to/file")</code>
            </li>
            <li><code>if: exists("s3://mybucket/path/to/file")</code>
                <ul>
                    <li>Requires S3 credentials and S3 extension</li>
                </ul>
            </li>
            <li><code>if: exists("path/to/file", [true|false])</code>
                <ul>
                    <li>This is relative to the current working directory. It is true by default.</li>
                </ul>
            </li>
        </ul>
        <h4>Conditional Substring Matching</h4>
        <p>You can set flow conditionals to determine actions based on if variables or strings start with, end with, or contain a specified string. These conditional's names are case insensitive, so you may specify <code>startswith</code>, <code>STARTSWITH</code>, <code>endswith</code>, <code>ENDSWITH</code>, and so on in whichever case you prefer. The string that you want to match must be quoted and is case sensitive.</p>
        <ul>
            <li><code>STARTSWITH</code> example:&#160;<pre>if: "STARTSWITH(${MYVAR}, "STRINGTITLE")"</pre><p>This conditional matches <code>STRINGTITLEONE</code> but does not match <code>TITLEONESTRING</code>.</p></li>
            <li>
                <p><code>ENDSWITH</code> example:</p><pre>if: "endswith(${MYVAR}, "STRINGTITLE")"</pre>
                <p>This conditional matches <code>FIRSTSTRINGTITLE</code>, but does not match <code>STRINGTITLEFIRST</code>.</p>
            </li>
            <li>
                <p><code>CONTAINS</code> example:</p><pre>if: "contains(${VAR}, "TITLE")"</pre>
                <p>This condition matches <code>TITLE</code>, <code>STRINGTITLE</code>, and <code>STRINGTITLEONE</code>.</p>
            </li>
        </ul>
    </body>
</html>