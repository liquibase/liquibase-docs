<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/flow/variables.html" />
        <meta name="description" content="Reference content on using variables in a Flow File." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Flow Variables</h1>
        <p>
            <img src="../../Z_Resources/Images/Diagrams/flowfile.png" alt="Structure of variable definitions, flow file stages, and nested actions that call on variables." style="width: 35%; float:right" />
        </p>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.17.0+, you can define <b>variables</b> as key-value pairs to use in one or more stages of your <a href="home.htm">flow files</a>. When you run the <code><MadCap:xref href="flow.htm">flow</MadCap:xref></code> command, <MadCap:variable name="General.Liquibase" /> substitutes the variable names for their values.</p>
        <p>You can define variables in three ways:</p>
        <ul>
            <li>As <b>global variables</b> in the flow file's header section</li>
            <li>As <b>stage variables</b> within individual stages</li>
            <li>Included in an <b>external YAML&#160;file</b> that you reference in the flow file's header section</li>
        </ul>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.24.0+, flow files inherit variables from other flow files that you call on. This lets you pass variables through multiple nested layers of flow files.</p>
        <p>Stage variables have the highest precedence, followed by included variables, then global variables, and then variables inherited from another flow file.</p>
        <h2>Uses</h2>
        <p>You can define a variable once but reuse it many times in different situations in your flow file. This provides flexibility and reduces code duplication. For example, variables may be useful to efficiently run multiple kinds of commands that contain the same file, directory, or other string.</p>
        <p>It is a best practice to use global variables for things that can apply to your whole flow file, and stage variables for things that only apply to specific stages. Included variables are best for things that apply to multiple flow files.</p>
        <p>You can also check the values of variables by using <MadCap:xref href="conditionals.htm">Flow Conditionals</MadCap:xref> to dynamically run code in your flow files.</p>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.26.0+, you can specify a default variable value for <MadCap:variable name="General.Liquibase" /> to use if it doesn't receive an explicit one. For example, you could use this to specify optional command arguments (such as <a href="../../concepts/changelogs/attributes/contexts.html">contexts</a> and <a href="../../concepts/changelogs/attributes/labels.html">labels</a>) as <code class="language-text">NULL</code> if not explicitly specified in your definition.</p>
        <h2>Syntax</h2>
        <h3>Define variables</h3>
        <p>Variable definitions always use the syntax <code class="language-text">key: "value"</code>. You must specify quotation marks around the value.</p>
        <p>You can define <b>included variables</b> in an external YAML file, in this case <code class="language-text">liquibase.flowvariables.yaml</code>:</p><pre xml:space="preserve"><code class="language-yaml">PROJECT_NAME: "MyFlowProject"
THIS_DATE: "2024-05-12T15-00-20"</code></pre>
        <p>You can define <b>global variables</b> at the top of your flow file, in this case <code class="language-text">liquibase.myflowfile.yaml</code>:</p><pre xml:space="preserve"><code class="language-yaml">globalVariables:
  STATUS_FILE: "status.txt"
  UPDATE_LOG: "update.log"
  HISTORY_FILE: "history.txt"</code></pre>
        <p>You can define <b>stage variables</b> within a particular stage, in this case <code class="language-text">stage-status</code>:</p><pre xml:space="preserve"><code class="language-yaml">stages:
  stage-status:
    stageVariables:
      STATUS_FILE: "status.txt"</code></pre>
        <h3>Use variables</h3>
        <p>Variable calls in your flow files use the following syntax:</p>
        <ul>
            <li><b>Included</b> variables: <code class="language-text">${NAMESPACE.VARIABLE_KEY}</code></li>
            <li><b>Global and stage</b> variables: <code class="language-text">${VARIABLE_KEY}</code></li>
        </ul>
        <p>For example, we can run the <code><MadCap:xref href="../change-tracking/status.htm">status</MadCap:xref></code> command in a flow file using included, global, and stage variables. In the following example, the included variables all have the namespace <code class="language-text">FLOW_VARS</code> and reference variables we previously defined in the file <code class="language-text">liquibase.flowvariables.yaml</code>:</p><pre xml:space="preserve"><code class="language-yaml">include:
  FLOW_VARS: liquibase.flowvariables.yaml

globalVariables:
  DIRECTORY_NAME: "./${FLOW_VARS.PROJECT_NAME}_${FLOW_VARS.THIS_DATE}"
  STATUS_FILE: "status.txt"

stages:
  stage-status:

    stageVariables:
      VERBOSE_STATE: "true"

    actions:
      - type: liquibase
        command: status
        globalArgs: {output-file: "${DIRECTORY_NAME}/${STATUS_FILE}"}
        cmdArgs: {verbose: "${VERBOSE_STATE}"}</code></pre>
        <h3>Default values</h3>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.26.0 and later, you can give variables <b>default values</b> using the following syntax:</p>
        <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;"><code>VARIABLE_KEY: "${VARIABLE_KEY:-defaultValue}"</code>
        </p>
        <p>This is useful if you want to dynamically specify optional arguments for commands in your flow file. For example:</p><pre xml:space="preserve"><code class="language-yaml">globalVariables:
  VERBOSE_STATE: "${VERBOSE_STATE:-null}"
  # Set the default value to null

stages:
  stage-status:

    stageVariables:
      VERBOSE_STATE: "true"
      # Set a value for this stage only

    actions:
      - type: liquibase
        command: status
        cmdArgs: {verbose: "${VERBOSE_STATE}"}
        # This stage passes a non-null value to verboseState

  other-stage:
    actions:
      - type: liquibase
        command: status
        cmdArgs: {verbose: "${VERBOSE_STATE}"}
        # This stage doesn't define any stage variables
        # Liquibase uses the definition from the global variable, which defaults to null</code></pre>
        <p>In the preceding example, <code class="language-text">VERBOSE_STATE</code> is set to null by default as a global variable and is set to a non-null value as a stage variable. During <code class="language-text">stage-status</code>, <MadCap:variable name="General.Liquibase" /> passes the non-null value. During <code class="language-text">stage-other</code>, <code class="language-text">VERBOSE_STATE</code> is not defined as a stage variable, so <MadCap:variable name="General.Liquibase" /> passes the global value, which is null. When <MadCap:variable name="General.Liquibase" /> detects a null value in a global or command argument, it omits the entire argument at runtime.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">It's possible to define a variable without default values both globally and in a stage. In this design, you simply rely on the stage variable's higher precedence to control the value of the output in different situations. However, explicitly specifying default values can make the intended behavior of a flow file clearer to developers.</p>
        <p>Default values can also be useful when you use them with <MadCap:xref href="conditionals.htm">Flow Conditionals</MadCap:xref>. For example:</p><pre xml:space="preserve"><code class="language-yaml">globalVariables:
  UPDATE: "${UPDATE:-null}"
  CHANGELOG_FILE: "${CHANGELOG_FILE:-simple-changelog.xml}"

stages:
  someStage:
    actions:
    - type: liquibase
      if: "UPDATE != null"
      command: update
      cmdArgs: {changelog-file: "${CHANGELOG_FILE}"}</code></pre>
        <p>In the preceding example, <MadCap:variable name="General.Liquibase" /> checks whether the value of the global variable <code class="language-text">UPDATE</code> is not null before executing the rest of the action.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you define a default value for a variable, <b>the default is inherited by any nested flow files</b> that call on the parent flow file. The default value also applies to the nested flow files.</p>
        <h3>Environment variables</h3>
        <p>You can substitute the values of <a href="../../concepts/connections/liquibase-environment-variables.htm">environment variables</a> in your flow file. The syntax is the same as substituting other variables. For example:</p><pre xml:space="preserve"><code class="language-yaml">stages:
  systemEnvars:
    actions:
      - type: shell
        command: echo "Running Liquibase from ${LIQUIBASE_HOME}"

  commandStuff:
    actions:
      - type: liquibase
        command: update-sql
        globalArgs: {changelog-file: "${LIQUIBASE_OUTPUT_FILE}"}</code></pre>
        <p>This lets you avoid manually updating information in your flow file, such as the path of the system environment variable <code class="language-text">LIQUIBASE_HOME</code>, which could change if you later modify your installation directory.</p>
        <p>Substituting environment variables may also be useful if you want to avoid modifying your flow file whenever you change the value of <MadCap:variable name="General.Liquibase" /> parameters like <code class="language-text">LIQUIBASE_OUTPUT_FILE</code>. Instead of defining and updating variables in your flow file, you can simply update the values of the external environment variables the flow file calls on. Then, when you run your flow file, <MadCap:variable name="General.Liquibase" /> uses the new values without you ever having modified the flow file itself.</p>
        <h3>Command substitutions</h3>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.28.0 and later, you can also use variables in the <code class="language-text">command</code> field of a flow file action. For example:</p><pre xml:space="preserve"><code class="language-yaml">globalVariables:
  MY_COMMAND:&#160;"status"
  MY_CHANGELOG: "newChangelog.txt"

stages:
  myStage:
    actions:
      - type: liquibase
        command: ${MY_COMMAND}
        cmdArgs: {changelog-file: "${MY_CHANGELOG}"}</code></pre>
        <p>The preceding example calls on a global variable from the <code class="language-text">command</code> field. You can use the same syntax to call on environment variables instead.</p>
        <h3>Empty strings</h3>
        <p>You can specify the empty string as the value of a variable. For example, if you want to run all <MadCap:variable name="General.changeset" />s in your <MadCap:variable name="General.changelog" /> regardless of their contexts/labels:</p><pre xml:space="preserve"><code class="language-yaml">stages:
  default:

    stageVariables:
      LABEL_NAMES: ""

    actions:
      - type: liquibase
        command: update
        cmdArgs: {label-filter: "${LABEL_NAMES}"}</code></pre>
        <h2>Property substitution with full YAML&#160;strings</h2>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.28.0 and later, you can also use variables to dynamically expand into full YAML&#160;strings during property substitution. The YAML&#160;strings you insert can also contain other variables, which can expand into more YAML&#160;strings.</p>
        <p>For example, this may be useful if you want multiple stages of a single flow file to run a command, but you want to substitute different variables to modify that command in each stage of the flow file.</p><pre xml:space="preserve"><code class="language-yaml">globalVariables:
  COMMAND_ARGS: "changelog-file: './liquibase.${STAGE_CHANGELOG}.yaml'"

stages:
  stage01:

    # Set up vars for property substitution in THIS stage only
    stageVariables:
      STAGE_CHANGELOG: "stage01"

    actions:
      # Run the update command
      - type: liquibase
        command: update
        cmdArgs: {"${COMMAND_ARGS}"}
        # This expands to: cmdArgs: { changelog-file: './liquibase.${STAGE_CHANGELOG}.yaml'}
        # which expands to: cmdArgs: { changelog-file: './liquibase.stage01.yaml'}</code></pre>
        <h2>Example Flow File</h2>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#flow_variables_example" id="label_flow_variables_example" class="js-tablist__link"><code>liquibase.flowvariables.yaml</code></a>
                </li>
                <li class="js-tablist__item"><a href="#flow_file_example" id="label_flow_file_example" class="js-tablist__link"><code>liquibase.flowfile.yaml</code></a>
                </li>
            </ul>
            <div id="flow_variables_example" class="js-tabcontent">
                <p>Defines variables that you can use in other flow files.</p><pre xml:space="preserve"><code class="language-yaml"># List of variables
PROJNAME: "MyFlowProj"
THISDATE: "2022-11-28T15-00-20"</code></pre>
            </div>
            <div id="flow_file_example" class="js-tabcontent">
                <p>Includes command arguments, global arguments, and a referenced include file (YAML).</p><pre xml:space="preserve"><code class="language-yaml"># Bring in and namespace an external file with yaml 'key: val' pairs for use in this file
include:
  FLOWVARS: liquibase.flowvariables.yaml

# Set up some global variables for property substitution in ANY stage
globalVariables:
  DIRNAME: "./${FLOWVARS.PROJNAME}_${FLOWVARS.THISDATE}"
  STATUSFILE: "status.txt"
  UPDATELOG: "update.log"
  HISTORYFILE: "history.txt"

# Start of the stages.
stages:

  # A prep stage. There can be more than one stage if desired.
  stage-prep:

    actions:
      - type: shell
        command: bash -c "mkdir -p ${DIRNAME}"

  # Another stage.
  stage-dowork:

    # set up vars for property substitution in THIS stage only
    stageVariables:

      VERBOSESTATE: TRUE

    actions:
      # Do a validate command
      - type: liquibase
        command: validate

      # Tell me what is pending a deployment
      - type: liquibase
        command: status
        globalArgs:
          outputfile: "${DIRNAME}/${STATUSFILE}"
          showbanner: false
        cmdArgs: {verbose: "${VERBOSESTATE}"}

      # Quality Checks for changelog
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: changelog}

      # Run update
      - type: liquibase
        command: update

      # Quality Checks for database
      - type: liquibase
        command: checks run
        cmdArgs: {checks-scope: database}

      # Create a history file
      - type: liquibase
        command: history
        globalArgs: {outputfile: "${DIRNAME}/${HISTORYFILE}"}</code></pre>
            </div>
        </div>
        <h2>Related links</h2>
        <ul>
            <li>
                <MadCap:xref href="advanced-flow-file.htm">Advanced Flow File</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="conditionals.htm">Flow Conditionals</MadCap:xref>
            </li>
            <li>
                <MadCap:xref href="shell-commands.htm">Shell Commands</MadCap:xref>
            </li>
        </ul>
    </body>
</html>