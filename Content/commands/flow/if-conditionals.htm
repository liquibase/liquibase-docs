<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/flow/if-conditionals.html" />
        <meta name="description" content="Reference information and use cases for if conditionals in the Flow File." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1><code>if</code> conditionals<br /></h1>
        <MadCap:snippetText src="../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <p><code>if</code>&#160;conditionals allow you to set specific blocks of code to run or not run depending on your <MadCap:xref href="flow.htm">flow</MadCap:xref> file functionality needs.</p>
        <p>Read more: <MadCap:xref href="advanced-flow-file.htm">Advanced Flow File</MadCap:xref></p>
        <MadCap:snippetBlock src="../../Z_Resources/Snippets/note/command-flow-version.flsnp" />
        <h2><code>if</code>&#160;conditionals code format</h2>
        <p>If conditionals exist within their own block of code within a Stage in a Flow file. A few formatting rules to note are:</p>
        <ul>
            <li>The entire conditional must be encompassed by "quotes".</li>
            <li>Variables must begin with <code>$</code> and be encompassed by {curly braces}.</li>
        </ul>
        <p>For example:</p><pre><code class="language-text">if:&#160;"${LIQUIBASE_ACTIVE_TARGET} == dev"</code></pre>
        <p>Any defined variable within the scope of the flow file can be used as a conditional. <br />This includes: </p>
        <ul>
            <li>Environment variables </li>
            <li>Global variables</li>
            <li>Stage variables</li>
            <li>"included" variables</li>
            <li>Properties from the defaults file</li>
            <li>Variables in a nested flow file that are accessible in the parent flow file if the work flow returns to the parent</li>
        </ul>
        <p>Read more: <MadCap:xref href="variables.htm">variables and include feature</MadCap:xref></p>
        <h2>Implement <code>if</code> conditionals</h2>
        <p>Values within <code>if</code> conditionals are called on in the format below. If the conditional value is set to <code>true</code>, it will run the command. If the conditional value is set to <code>false</code>, it will not run the command.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">-type:&#160;liquibase
	if:&#160;"${LIQUIBASE_ACTIVE_TARGET} == dev"
	command:&#160;checks run
	cmdArgs:&#160;{checks-scope: changelog}
	
-type:&#160;liquibase
	if:&#160;"${LIQUIBASE_ACTIVE_TARGET} != dev"
	command:&#160;updatesql
	</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p>When <code>liquibase flow</code> runs,  messages will appear in the CLI after the flow file executes each section. Notice in the sample message below it says <code>Executing 'liquibase' checks run</code> because the environment variable above is set to true. You will also notice the message <code>Skipping action:&#160;'liquibase' updatesql because condition 'dev != dev' evaluated to false.'</code> This is the best location to find why <code>if</code>&#160;conditionals did or did not run successfully. If you expected a conditional to run successfully and it did not, you are better equipped to adjust the flow file accordingly.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">***********************************************************************
*
* Executing 'liquibase' checks run
*
***********************************************************************

Executing Quiality Checks against example-changelog.sql

Executing all changelog checks because a valid license key was found!

Warning: No database checks were run. Make sure the checks-scope property includes "database" to run database checks. In the CLI set --checks-scope+'changelog.database" or set an environment variable.
LIQUIBASE_COMMAND_CHECKS_SCOPE=database. Learn more at https://docs.liquibase.com/quality-checks

INFO: Checks executed against SQL generated by H2 at jdbc:h2:tcp://localhost:9090/mem:dev.
Changesets Validated: in example-changelog.sql
	ID: 1; Author: your.name
	ID: 2; Author: your.name
	ID: 3; Author: other.dev
	
Checks run against each changeset:
	Changesets Must Have a Context Assigned (Short names: ChangesetCommentCheck)
	Changesets Must Have a Context Assigned (Short names: ChangesetContextCheck)
	Changesets Must Have a Label Assigned (Short names: ChangesetLabelCheck)
	Check Table Column Count (Short names: TableColumnLimit)
	Rollback Required for Changeset (Short names: RollbackRequired)
	Warn on Detection of 'GRANT' statements (short names: SQLGrantWarn)
	Warn on Detection of 'REVOKE' statements (short names: SQLRevokeWarn)
	Warn on Detection of grant that contains 'WITH ADMIN OPTION' (Short names: SqlGrantAdminWarn)
	Warn on Detection of grant that contains 'WITH GRANT OPTION' (Short names: SqlGrantOptionWarn)
	Warn when 'DROP COLUMN' detected (Short names: ChangeDropColumnWarn)
	Warn when 'DROP TABLE' detected (Short names: ChangeDropTableWarn)
	Warn when 'MODIFY &lt;column&gt;' detected (Short names: ModifyDataTypeWarn)
	Warn when 'TRUNCATE TABLE' detected (Short names: ChangeTruncateTableWarn)
	
Changelogs Checks Skipped Due to unsupported changeset type for this check:
	Require primary key when creating table (Short names: PrimaryKeyOnCreateTable) skipped for:
		1:your.name,
		2:your.name,
		3:other.dev,
		
Liquibase command 'checks run' was executed successfully.

***********************************************************************
*
* Skipping action: 'liquibase updatesql because condition 'dev != dev' evaluated to false.
*
***********************************************************************</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2 MadCap:conditions="exclude.future">Expansion on Conditionals</h2>
        <p MadCap:conditions="exclude.future">Additional conditionals are available in <MadCap:variable name="General.Liquibase" /> v 4.26.0. These new conditional features provide more flexibility that allows users to determine if a stage or action is executed within their Flow file. This permits users to author simplified flows that are easier to reuse and maintain when applied to multiple products across an organization. This makes flows scalable and applicable to your database as your company grows. This section covers how to enable AND, OR, NULL, STARTSWITH, ENDSWITH, and CONTAINS logic conditionals. Find descriptions and examples of these below.</p>
        <h3 MadCap:conditions="exclude.future">Rules for additional conditionals</h3>
        <ul>
            <li MadCap:conditions="exclude.future">It is best practice to encompass entire conditionals by "quotes"</li>
            <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;" MadCap:conditions="exclude.future">
                <br /><code>if: "${key} == 'production'"<br></br><br></br>if: "thisIsAVar == 'This is a string'"<br></br><br></br>if: "'thisString' == ${myVar}"</code>
            </p>
            <li MadCap:conditions="exclude.future">Strings, also referred to as non-variables, require quotations around them, otherwise <MadCap:variable name="General.Liquibase" /> will assume they are variables or property names instead of strings.</li>
            <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;" MadCap:conditions="exclude.future">
                <br /><b>Correct:</b>&#160;<code>$user == 'example'</code><br style="font-weight: bold;" /><b>Incorrect:</b> <code>$user == example</code></p>
            <li MadCap:conditions="exclude.future">Any conditional previously written is guaranteed to work, as long as it is not modified. If changes are needed you should rewrite the conditional and follow the quoting rule above.</li>
        </ul>
        <h3 MadCap:conditions="exclude.future">Implementing additional conditionals</h3>
        <h4 MadCap:conditions="exclude.future">Conditional AND statements</h4>
        <p MadCap:conditions="exclude.future">This section includes additional conditionals which allow logic operations such as AND and OR.</p>
        <p MadCap:conditions="exclude.future"><code>if: ${KEY} == ${VALUE} &amp;&amp; ${KEY2} != ${VALUE2}</code>
        </p>
        <h4 MadCap:conditions="exclude.future">Conditional OR statements</h4>
        <p MadCap:conditions="exclude.future"><code>if: ${KEY} == ${VALUE} || ${KEY2} == ${VALUE2}</code>
        </p>
        <h4 MadCap:conditions="exclude.future">Grouping in Flows<br /></h4>
        <p MadCap:conditions="exclude.future">You may group conditionals and nest groups of conditionals within flows.</p><pre MadCap:conditions="exclude.future"><code>if: (a=true &amp;&amp; b=true) or c=false</code></pre><pre MadCap:conditions="exclude.future"><code>if: ((a=true &amp;&amp; b=true) or c=false) &amp;&amp; d=true</code></pre>
        <h4 MadCap:conditions="exclude.future">Conditionals that check if variables exist</h4>
        <p MadCap:conditions="exclude.future">flow files can check the state of a variable to see if it exists or not.</p><pre MadCap:conditions="exclude.future">if: (key != `null`)</pre><pre MadCap:conditions="exclude.future">if: (${KEY2} == nil)</pre><pre MadCap:conditions="exclude.future">if: (myVar == empty)</pre>
        <p MadCap:conditions="exclude.future">You can express a null value in MVEL in the following three ways, but you may <b>not</b> use NULL as a value.</p><pre MadCap:conditions="exclude.future">`null`</pre><pre MadCap:conditions="exclude.future">nil</pre><pre MadCap:conditions="exclude.future">empty</pre>
        <h4 MadCap:conditions="exclude.future">Conditional Substring Matching</h4>
        <p MadCap:conditions="exclude.future">You can set if then conditionals that allow you to call on files based on if they start with, end with, or contain a specified string. These conditionals are case insensitive, so you may specify <code>startswith</code>, <code>endswith</code>, and <code>contains</code> in whichever case you prefer. The string variable specified must be quoted and is case sensitive so it must be capitalized.</p>
        <ul MadCap:conditions="exclude.future">
            <li><code>STARTSWITH</code> example:&#160;<pre>if: STARTSWITH(${MYVAR}, "STRINGTITLE")</pre><p>This conditional matches <code>STRINGTITLEONE</code> but does not match <code>TITLEONESTRING</code>.</p></li>
            <li>
                <p><code>ENDSWITH</code> example:</p><pre>if: endswith(${MYVAR}, "STRINGTITLE")</pre>
                <p>This conditional matches <code>FIRSTSTRINGTITLE</code>, but does not match<code> STRINGTITLEFIRST</code>.</p>
            </li>
            <li>
                <p><code>CONTAINS</code> example:</p><pre>if: contains(${VAR}, "TITLE")</pre>
                <p>This condition matches TITLE, STRINGTITLE, and STRINGTITLEONE.</p>
            </li>
        </ul>
    </body>
</html>