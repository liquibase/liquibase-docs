<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <h1>Custom Policy Checks</h1>
        <p>Custom Policy Checks enable the creation of any kind of check  that matches your needs via python scripts. This feature expands the <MadCap:variable name="General.Liquibase" /> checks horizon and allows all <MadCap:variable name="General.LBPro" /> users who write Python scripts to create any check for the workflow at hand. You are empowered to create checks tailored to your procedures so you don't have to wait for your specific check to be created. Virtual Environments can even be used to craft your Python scripts.</p>
        <h2>Uses</h2>
        <p>&#160;</p>
        <h2>Create a Custom Policy Check</h2>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">Before creating a custom policy check we reccommend being familiar with Python and <MadCap:variable name="General.Liquibase" /> concepts such as <MadCap:xref href="../inspection/snapshot.html">snapshot</MadCap:xref>.</p>
        <p>Before creating a custom policy check we reccommend being familiar with Python and <MadCap:variable name="General.Liquibase" /> concepts such as <MadCap:xref href="../inspection/snapshot.html">snapshot</MadCap:xref>.</p>
        <p>Steps:</p>
        <p>Create a new template check named CustomCheckTemplate and copy and customize it to create a custom policy check.</p>
        <p>Same experience as other checks, just new fields, such as SCRIPT_PATH to specify a path to a user-provided script, which performs the actual check.</p>
        <p>Essentially, the python script at SCRIPT_PATH is called by the custom check, and it returns either TRUE or FALSE (or status.fired=TRUE, status.fired=FALSE) to liquibase to indicate the check has triggered or not. The check is just like a traditional check in that there is a name, description, severity/return code, and message.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Technical requirements: Users must have JDK 17+, and the graalpy jar, etc.</p>
        <h3>Security settings</h3>
        <p>Customizing policy checks is optional and OFF by default</p>
        <p>master switch: <code>--checks-scripts-enabled</code></p>
        <p>or <code>LIQUIBASE_COMMAND_CHECKS_RUN_CUSTOM_CHECKS_ENABLED=true|false</code>, etc</p>
        <p>Customized policy checks only apply to <code>checks run</code> so that you can set up checks etc before you use them.</p>
        <p>restrict scripts to a certain path: <code>--checks-scripts-paths</code></p>
        <h3>System Requirements and Provided Framework</h3>
        <ul>
            <li>
                <p>JDK 17+</p>
            </li>
            <li>
                <p>Open JDK</p>
            </li>
            <li>
                <p>Oracle JDK</p>
            </li>
            <li>
                <p>Linux, Mac, or Windows</p>
            </li>
            <li>
                <p>Liquibase 4.29.0 (TBD)</p>
            </li>
            <li>
                <p>Oracle GraalPy framework is included, you will not need to install it manually</p>
            </li>
        </ul>
        <h3>Virtual Environment Options</h3>
        <p>You  can use the provided VENV that is part of the <MadCap:variable name="General.LBPro" /> release or your own python VENV. If you need to utilize your own VENV you will need to download and use the GraalPy CLI&#160;tool. This VENV&#160;is stored in a drectory on your local file system.<br /></p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This is only reccommended to users who are familar with building and deploying Python virtual environments.</p>
        <ul>
            <li>Python scripts can be stored anywhere text files are stored including:&#160;CWD, local paths, S3, or the GitHub extension, etc. </li>
        </ul>
    </body>
</html>