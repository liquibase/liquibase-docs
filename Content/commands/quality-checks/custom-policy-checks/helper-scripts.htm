<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/quality-checks/custom-policy-checks/helper-scripts.html" />
        <meta name="description" content="Helper Scripts are Python scripts that can import additional functionality into Custom Policy Checks." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Custom Policy Check Helper Scripts</h1>
        <p>Helper Scripts are Python scripts that provide an API&#160;that allows you to access objects or <MadCap:variable name="General.Liquibase" /> functionality to perform additional functionality with <MadCap:xref href="home.htm">Custom Policy Checks</MadCap:xref>. When helper scripts are enabled within a custom policy check,  the check goes through all the <MadCap:variable name="General.changeset" />s that have not deployed and looks for the specific content set in the custom policy check. <MadCap:variable name="General.Liquibase" /> will then decide if the check fires or not depending on what is specified with the helper script. Without these helper scripts you would have to write your own code to retrieve the specific content they pull from your <MadCap:variable name="General.changeset" />s and databases. They significantly reduce the time it will take to find the information you are looking for.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">These helper scripts are included in the liquibase-checks extension.</p>
        <table style="width: 100%; margin-left: auto; margin-right: auto;">
            <caption style="font-weight: bold;">Compatible Versions</caption>
            <col />
            <col />
            <tbody>
                <tr>
                    <td>Python</td>
                    <td>3.10.14</td>
                </tr>
                <tr>
                    <td>GraalPy</td>
                    <td>24.0.0</td>
                </tr>
            </tbody>
        </table>
        <h2>Install the Python installer package (PIP)</h2>
        <p>If you want in-IDE documentation and auto complete with your helper script, install the PIP by following the below instructions</p>
        <h3>Step-by-step</h3>
        <ol>
            <li>Create a virtual environment in your directory that contains the custom policy check script by running the following in the CLI:<p><code>python -m venv &lt;path to your venv&gt;</code></p></li>
            <li>Install the PIP by running <code>pip install liquibase-checks-python</code> in the CLI.</li>
            <li>Navigate to the location where you import <code>liquibase_utilities</code> and replace <code>import liquibase_utilities</code> with <code>from liquibase_checks_python import liquibase_utilities</code> in your Python script.<br />You have successfully activated the PIP. Next you will need to activate the helper scripts to run them.<br /></li>
        </ol>
        <h2>Activate and run helper scripts</h2>
        <h3>Step-by-step</h3>
        <p>If&#160;you want the custom policy check helper scripts with  in-IDE documentation and auto complete you must complete the <b>Install the Python installer package (PIP)</b> steps above first. If you want the custom policy check helper scripts without those features, skip that section and follow the <b>Activate and run helper script</b> steps.</p>
        <ol>
            <li>Run <code>import liquibase_utilities</code> in the CLI.<br />Now the Python package that includes the helper scripts is activated.<br /></li>
            <li>Next you will call on a specific helper script.<br />In this example we will run <code>logger = liquibase_utilities.get_logger</code></li>
            <li>When the check runs it will retrieve any content it finds based on the criteria you asked for and display it in the CLI.</li>
        </ol>
        <h2>Changeset attributes</h2>
        <p>Methods to return <MadCap:variable name="General.Liquibase" /> <MadCap:variable name="General.changeset" /> attributes</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="center">Function</th>
                    <th class="center">Definition</th>
                    <th class="center">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="center"><code>get_author</code>
                    </td>
                    <td class="center">Returns the <MadCap:variable name="General.changeset" /> author</td>
                    <td class="center"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_contexts</code>
                    </td>
                    <td class="center">Returns the <MadCap:variable name="General.changeset" /> contexts</td>
                    <td class="center"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_file_path</code>
                    </td>
                    <td class="center">Returns the <MadCap:variable name="General.changeset" /> file path</td>
                    <td class="center"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_id</code>
                    </td>
                    <td class="center">Returns the <MadCap:variable name="General.changeset" /> ID</td>
                    <td class="center"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_labels</code>
                    </td>
                    <td class="center">Returns the <MadCap:variable name="General.changeset" /> labels</td>
                    <td class="center"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>is_always_run</code>
                    </td>
                    <td class="center">Returns the <MadCap:variable name="General.changeset" /> alwaysRun value</td>
                    <td class="center"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>is_run_on_change</code>
                    </td>
                    <td class="center">Returns the <MadCap:variable name="General.changeset" /> runOnChange value</td>
                    <td class="center"><MadCap:variable name="General.changeset" />
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Database attributes</h2>
        <p>Methods to return database attributes</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="center">Function</th>
                    <th class="center">Definition</th>
                    <th class="center">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="center"><code>get_database_product_name</code>
                    </td>
                    <td class="center">Returns the database product name</td>
                    <td class="center">database</td>
                </tr>
                <tr>
                    <td class="center"><code>get_database_product_version</code>
                    </td>
                    <td class="center">Returns the database product version</td>
                    <td class="center">database</td>
                </tr>
                <tr>
                    <td class="center"><code>get_default_schema_name</code>
                    </td>
                    <td class="center">Returns the default schema for this database</td>
                    <td class="center">database</td>
                </tr>
                <tr>
                    <td class="center"><code>get_short_name</code>
                    </td>
                    <td class="center">Returns the database short name</td>
                    <td class="center">database</td>
                </tr>
            </tbody>
        </table>
        <h2>JSON snapshot and return Dict objects</h2>
        <p>Methods to parse a JSON&#160;snapshot and return Dict objects</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="center">Function</th>
                    <th class="center">Definition</th>
                    <th class="center">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="center"><code>get_column</code>
                    </td>
                    <td class="center">Return the specified Column Dict object for a table</td>
                    <td class="center">
                        <p><code>snapshot</code>:     the snapshot to parse</p>
                        <p><code>  table_name</code>:   the name of the table to search for   </p>
                        <p><code>column_name</code>:  the name of the column to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_column_size</code>
                    </td>
                    <td class="center">Return the specified Column's size</td>
                    <td class="center"><code>column</code>:   the Column Dict object</td>
                </tr>
                <tr>
                    <td class="center"><code>get_column_type_name</code>
                    </td>
                    <td class="center">Return the specified Column's type name</td>
                    <td class="center"><code>column</code>:   the Column Dict object</td>
                </tr>
                <tr>
                    <td class="center"><code>get_columns</code>
                    </td>
                    <td class="center">Return a list of Column Dict objects for a table</td>
                    <td class="center">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_indexes</code>
                    </td>
                    <td class="center">Return a List of Index Dict objects for a table</td>
                    <td class="center">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_primary_key</code>
                    </td>
                    <td class="center">Return a Primary Key Dict object for a table</td>
                    <td class="center">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_table</code>
                    </td>
                    <td class="center">Return a list of Table Dict objects</td>
                    <td class="center">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                        <p><code>table_name</code>: the name of the table to search for</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_tables</code>
                    </td>
                    <td class="center">Return a list of Table Dict objects</td>
                    <td class="center">
                        <p><code>snapshot</code>:   the snapshot to parse</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2><MadCap:variable name="General.Liquibase" /> utilities</h2>
        <p>Utilities are general script helpers that retrieve content frequently searched for.</p>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <col />
            <col />
            <col />
            <thead>
                <tr>
                    <th class="center">Function</th>
                    <th class="center">Definition</th>
                    <th class="center">Input Parameter</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="center"><code>generate_sql</code>(change)</td>
                    <td class="center">Generate the SQL for this change and database</td>
                    <td class="center">
                        <p><b>param change:</b> the change to generate sql from</p>
                        <p><b>return:</b> the sql of the change</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_arg</code>(name)</td>
                    <td class="center">Return the value of script argument</td>
                    <td class="center"><b>param name:</b> the argument to find
<br /><b>return:</b> the value of the argument</td>
                </tr>
                <tr>
                    <td class="center"><code>get_binding</code>(key)</td>
                    <td class="center">Access the binding object at the given key</td>
                    <td class="center"><b>param key:</b> the binding to access
<br />return: the binding</td>
                </tr>
                <tr>
                    <td class="center"><code>get_cache</code>
                        <br />(key, default_value)</td>
                    <td class="center">Return the results cache Dict object from the bindings
if there is no current value then put the default value</td>
                    <td class="center"><b>param key:</b>            the look up key
<br /><b>param default_value:</b>  the value to put for the key if no value present
<br /><b>return:</b>              the current value or the default</td>
                </tr>
                <tr>
                    <td class="center"><code>get_changes</code>
                    </td>
                    <td class="center">Return a list of Liquibase Change objects</td>
                    <td class="center">
                        <p><b>return:</b> the liquibase change objects</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_changeset</code>
                    </td>
                    <td class="center">Return the Liquibase Change Set object</td>
                    <td class="center"><b>return:</b> the liquibase change set object</td>
                </tr>
                <tr>
                    <td class="center"><code>get_column_type</code>
                        <br />(database_object)</td>
                    <td class="center">Get the type of the column of a database object</td>
                    <td class="center"><b>param database_object:</b> the database object
<br /><b>return:</b> the type of the column, or None if the database object is not a column</td>
                </tr>
                <tr>
                    <td class="center"><code>get_database</code>
                    </td>
                    <td class="center">Get the liquibase database object</td>
                    <td class="center">
                        <p><b>return:</b> the liquibase database object</p>
                    </td>
                </tr>
                <tr>
                    <td class="center"><code>get_database_object</code>
                    </td>
                    <td class="center">Return the DatabaseObject that is being referenced in a database-scoped check</td>
                    <td class="center"><b>return:</b> the current database object being checked</td>
                </tr>
                <tr>
                    <td class="center"><code>get_database_snapshot</code>
                    </td>
                    <td class="center">Return the DatabaseSnapshot as a String</td>
                    <td class="center"><b>return:</b> the database snapshot string</td>
                </tr>
                <tr>
                    <td class="center"><code>get_dbutil</code>
                    </td>
                    <td class="center">Return the dbutil object used to check for object existence or to snapshot the DatabaseObject and return it</td>
                    <td class="center"><b>return:</b> the db_util object</td>
                </tr>
                <tr>
                    <td class="center"><code>get_logger</code>
                    </td>
                    <td class="center">Get the liquibase logger</td>
                    <td class="center"><b>return:</b> the liquibase logger</td>
                </tr>
                <tr>
                    <td class="center"><code>get_object_type_name</code>
                        <br />(database_object)</td>
                    <td class="center">Get the object type string of a given database object</td>
                    <td class="center"><b>param database_object:</b> The database_object to return the type for
<br /><b>returns</b> the type as a string</td>
                </tr>
                <tr>
                    <td class="center"><code>get_script_message</code>
                    </td>
                    <td class="center">Get the message for the script</td>
                    <td class="center"><b>return:</b> the message</td>
                </tr>
                <tr>
                    <td class="center"><code>get_script_path</code>
                    </td>
                    <td class="center">Return the path of the script</td>
                    <td class="center"><b>return:</b> the path of the script</td>
                </tr>
                <tr>
                    <td class="center"><code>get_snapshot</code>
                    </td>
                    <td class="center">Return the snapshot as a JSON object.</td>
                    <td class="center"><b>return:</b> The snapshot json object or None if no snapshot is available</td>
                </tr>
                <tr>
                    <td class="center"><code>get_status</code>
                    </td>
                    <td class="center">Return the Status object which will be used to set the check fired status and return a message</td>
                    <td class="center"><b>return:</b> the status object</td>
                </tr>
                <tr>
                    <td class="center"><code>has</code>
                        <br />(object_type, schema_name, object_name)</td>
                    <td class="center">Returns true if there is an object of this type and name in the schema</td>
                    <td class="center"><b>param object_type:</b> the object type
<br style="font-weight: bold;" /><b>param schema_name:</b> the schema name
<br /><b>param object_name:</b> the object name
<br /><b>return:</b> true if there is an object that matches this description, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>has_relation</code>
                        <br />(object_type, object_name, relation_type, relation_schema_name, relation_name)</td>
                    <td class="center">Returns true if there is an object of this type that has a relation object  that matches the relation type, schema, and name</td>
                    <td class="center"><b>param object_type:</b> the object type
<br /><b>param object_name:</b> the object name
<br /><b>param relation_type:</b> the type of relation (Table or View)
<br /><b>param relation_schema_name:</b> the schema of the relation object
<br /><b>param relation_name:</b> the name of the relation
<br /><b>return:</b></td>
                </tr>
                <tr>
                    <td class="center"><code>is_catalog</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a catalog</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a catalog, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_check_constraint</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a check constraint</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a check constraint, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_column</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a column</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a column, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_database_package</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a database package</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a database package, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_database_package_body</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a database package body</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a database package body, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_foreign_key</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a foreign key</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a foreign key, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_function</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a function</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a function, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_index</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a index</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br style="font-weight: bold;" /><b>return: </b>true if the object is a index, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_primary_key</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a primary key</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a primary key, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_schema</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a schema</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a schema, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_sequence</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a sequence</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a sequence, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_stored_database_logic</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is stored database logic</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is stored database logic, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_stored_procedure</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a stored procedure</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a stored procedure, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_synonym</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a synonym</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a synonym, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_table</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a table</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a table, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_trigger</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a trigger</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a trigger, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_unique_constraint</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a unique constraint</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a unique constraint, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>is_view</code>
                        <br />(database_object)</td>
                    <td class="center">Check if the database object is a view</td>
                    <td class="center"><b>param database_object:</b> the database object to check
<br /><b>return:</b> true if the object is a view, false otherwise</td>
                </tr>
                <tr>
                    <td class="center"><code>put_cache</code>
                        <br />(key, value)</td>
                    <td class="center">Put the value in the cache</td>
                    <td class="center"><b>param  key</b>            The key to use
<br /><b>param  value</b>          The value to put in the cache</td>
                </tr>
                <tr>
                    <td class="center"><code>query_for_list</code>
                        <br />(sql, sql_file, end_delimiter)</td>
                    <td class="center">Execute a SQL statement or script</td>
                    <td class="center"><b>param sql:</b> the sql to execute
<br /><b>param sql_file:</b> the sql file to execute
<br /><b>param end_delimiter:</b> the end delimiter to use
<br /><b>return:</b> the results of the sql as a list</td>
                </tr>
                <tr>
                    <td class="center"><code>snapshot_object</code>
                        <br />(object_type, object_name, relation_type, schema_name, relation_name)</td>
                    <td class="center">Return a Liquibase model object that represents a database object</td>
                    <td class="center"><b>param object_type:</b> the type of the object, like Table<br /><b>param object_name:</b> the objects name<br /><b>param relation_type:</b> a type of relation that we need to snapshot to access the object<br /><b>param schema_name:</b> the schema for the relation<br /><b>param relation_name:</b> the name of the relation<br /><b>return:</b> the liquibase model for the database object</td>
                </tr>
                <tr>
                    <td class="center"><code>split_sql</code>
                        <br />(sql_string, strip_comments_flag, end_delimiter, changeset)</td>
                    <td class="center">Returns an array of SQL lines</td>
                    <td class="center"><b>param sql_string:</b> the SQL to process
<br /><b>param strip_comments_flag:</b> true to strip out comments
<br /><b>param end_delimiter:</b> the end delimiter to use while processing the sql
<br /><b>param changeset:</b> the change set associated with the sql
<br /><b>return:</b></td>
                </tr>
                <tr>
                    <td class="center"><code>split_statements</code>
                        <br />(sql_string)</td>
                    <td class="center">Split a string of SQL into individual statements</td>
                    <td class="center"><b>param sql_string:</b> the sql string to split
<br /><b>return:</b> the list of sql strings</td>
                </tr>
                <tr>
                    <td class="center"><code>strip_comments</code>
                        <br />(sql_string)</td>
                    <td class="center">Strip comments from a SQL string</td>
                    <td class="center"><b>param sql_string:</b> the sql to strip
<br /><b>return:</b> the sql string with comments removed</td>
                </tr>
                <tr>
                    <td class="center"><code>tokenize</code>
                        <br />(statement)</td>
                    <td class="center">Tokenize a statement which was create by sqlparse and return a list</td>
                    <td class="center"><b>param statement:</b> the statement to tokenize
<br /><b>return:</b> the tokenized statement as a list</td>
                </tr>
            </tbody>
        </table>
        <h2><MadCap:variable name="General.Liquibase" /> Constants</h2>
        <p><MadCap:variable name="General.Liquibase" /> Constants are an unchangeable set of well-known constants that are used to access the script bindings. They are definitions of internal Python classes <MadCap:variable name="General.Liquibase" /> uses to enable Custom Policy Checks via Python scripts. </p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Most users will not need to use these unless you are debugging a complex Custom Policy Check they have created.</p>
        <h3>Constants</h3>
        <table style="width: 100%; caption-side: top; margin-left: auto; margin-right: auto;">
            <caption><b>Constant Methods</b>
            </caption>
            <col />
            <tbody>
                <tr>
                    <td class="center">__init__(self)</td>
                </tr>
                <tr>
                    <td class="center">__setattr__(self, name, value)</td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%; caption-side: top; margin-left: auto; margin-right: auto;">
            <caption><b>Constant data descriptors</b>
            </caption>
            <col />
            <tbody>
                <tr>
                    <td class="center">__dict__</td>
                </tr>
                <tr>
                    <td class="center">__weakref__</td>
                </tr>
            </tbody>
        </table>
        <h3>Script Constants</h3>
        <table style="width: 100%; caption-side: top; margin-left: auto; margin-right: auto;">
            <caption><b>ScriptConstant data descriptors</b>
            </caption>
            <col />
            <tbody>
                <tr>
                    <td class="center">__dict__</td>
                </tr>
                <tr>
                    <td class="center">__weakref__</td>
                </tr>
            </tbody>
        </table>
        <table style="width: 100%;margin-left: auto;margin-right: auto;caption-side: top;">
            <caption><b>ScriptConstant data and other attribute definitions</b>
            </caption>
            <col />
            <thead>
                <tr>
                    <th class="center">Function</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td class="center">ARGS_SUFFIX = '_arg_binding'</td>
                </tr>
                <tr>
                    <td class="center">CACHE_BINDING = 'cache_binding'</td>
                </tr>
                <tr>
                    <td class="center">CHANGESET_BINDING = 'changeSet_binding'</td>
                </tr>
                <tr>
                    <td class="center">CHANGES_BINDING = 'changes_binding'</td>
                </tr>
                <tr>
                    <td class="center">DATABASE_BINDING = 'database_binding'</td>
                </tr>
                <tr>
                    <td class="center">DATABASE_OBJECT_BINDING = 'databaseObject_binding'</td>
                </tr>
                <tr>
                    <td class="center">DATABASE_SNAPSHOT_BINDING = 'databaseSnapshot_binding'</td>
                </tr>
                <tr>
                    <td class="center">DBUTIL_BINDING = 'dbutil_binding'</td>
                </tr>
                <tr>
                    <td class="center">LOGGER_BINDING = 'logger_binding'</td>
                </tr>
                <tr>
                    <td class="center">SCRIPT_MESSAGE_BINDING = 'scriptMessage_binding'</td>
                </tr>
                <tr>
                    <td class="center">SCRIPT_PATH_BINDING = 'script_path_binding'</td>
                </tr>
                <tr>
                    <td class="center">STATUS_BINDING = 'status_binding'</td>
                </tr>
            </tbody>
        </table>
    </body>
</html>