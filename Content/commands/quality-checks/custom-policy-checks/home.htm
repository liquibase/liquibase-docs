<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/commands/quality-checks/custom-policy-checks/home.html" />
        <meta name="description" content="Custom Policy Checks enable the creation of any kind of check that matches your needs via python scripts. This feature expands the Liquibase checks horizon and allows all Pro users who write Python scripts to create any check for the workflow at hand." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Custom Policy Checks</h1>
        <p>Custom Policy Checks allow you to enforce compliance for a wide array of security, code standards, data quality, and other policies using python scripts. This feature expands the <MadCap:xref href="../home.htm">Quality Checks</MadCap:xref> horizon and allows all <MadCap:variable name="General.LBPro" /> users who write Python scripts to create just about any check for the workflow at hand. You are able to create checks tailored to your specific policies and technical contexts so you don't have to wait for your specific check to be created and released by <MadCap:variable name="General.Liquibase" /> developers.</p>
        <h2>Uses</h2>
        <p><MadCap:variable name="General.Liquibase" /> provides a <MadCap:xref href="../checks/home.htm">Library of Quality Checks</MadCap:xref> , but you may find that they don't fully serve the nuanced conditions and contexts you need  to evaluate all your policy enforcement goals. Custom policy checks add the  flexibility and power of Python to greatly expand your ability to parse and inspect  your <MadCap:variable name="General.changelog" />s and databases for compliance.</p>
        <h2>Create a Custom Policy Check</h2>
        <h3>Prerequisites</h3>
        <ul>
            <li>Before creating a custom policy check we recommend being familiar with:<ul><li> Python</li><li><MadCap:variable name="General.Liquibase" /> concepts such as <MadCap:xref href="../../inspection/snapshot.html">snapshot</MadCap:xref><ul><li><p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Requiring a snapshot calls for a database connection and impacts performance. It can take time to process if your database has hundreds or thousands of objects.</p></li></ul></li><li>In certain scenarios you will&#160;also need to be familiar with SQL&#160;parsing and REGEX</li><li><b>Insert Helper Commands here (This will need to be a separate doc page.)</b></li></ul></li>
            <li>It is important to note that database checks look at JSON&#160;objects and Changelog checks look at sql patterns.</li>
        </ul>
        <h3>Step-by-step Guide</h3>
        <ol>
            <li>Once you have familiarized yourself with the Prerequisites noted on this page you will create a Python script that contains the custom policy check. <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">We recommend using these tutorials if you are new to Python.
<b>(Insert Link Here)</b><![CDATA[			]]></p></li>
            <li>
                <p>Run this command in the CLI: <pre>liquibase checks customize --check-name=CustomCheckTemplate</pre></p>
            </li>
            <li>In the CLI a message will say that this check cannot be customized directly because one or more fields does not have a default value. <MadCap:variable name="General.Liquibase" /> will then create a copy of this check and initiate the customization workflow. Your next step will be to give your check a short name for easier identification. In this example we will name the check <code>IdentifiersWithoutQuotes</code>.<br />The new check <code>IdentifiersWithoutQuotes</code> is created from <code>CustomCheckTemplate</code> successfully.<p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The new check short name <code>IdentifiersWithoutQuotes</code> and all of it's associated information comes from the Python script you created. Your company may have their own coding standards that these scripts must adhere to.</p></li>
            <li>In the CLI set the severity to return a code of 0-4 when triggered. In this example we will set the severity to <code>1</code>.<br />Options:</li>
            <MadCap:snippetBlock src="../../../Z_Resources/Snippets/def/attributes/cli/quality-checks/cli-checks-severity-customization.flsnp" />
            <li>In the CLI set the script description for the custom check. In this example we will set the description to <code>IdentifiersWithoutQuotes</code>.<br /></li>
            <li>In the CLI set the script scope for the custom check. In this example we will set it to <code><MadCap:variable name="General.changelog" /></code>.<br />Options for scope:<br /></li>
            <ul>
                <li><code class="language-text">changelog</code>:&#160;This scope indicates the check  reviews all current <MadCap:variable name="General.changeset" />s.<li><code class="language-text">database</code>:&#160;This scope indicates the check runs once for each database object.</li><p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">We recommend creating customized checks that are single-scoped for <code><MadCap:variable name="General.changelog" /></code> <b>or </b><code>database</code>, but not both.</p></li>
            </ul>
            <li>In the CLI set the script message. This message will display when the check is triggered. In this example we will set the message to:<br /><code>My custom python check failed!</code><p><b>Option for advanced users:</b>&#160;You can create <MadCap:xref href="script-message-variable.htm">Script Message Variables for Custom Policy Checks</MadCap:xref> which are identified in your Python script.</p></li>
            <li>In the CLI set the script type. In <MadCap:variable name="General.LBPro" /> 4.29.0 Python is the only available script type. We plan to include other script options in future releases.</li>
            <li>Set the script path. This is the relative path where your script is stored whether it is stored locally or in a repository.<br /><p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">We recommend you store all of your scripts in the same folder for easy access.</p><br />In this example we will set the path to <code>Scripts/delete_without_where.py</code></li>
            <li>Set the script argument. This is a way for you to pass dynamic information into the custom policy check without modifying the python code.  This step allows you to modify definitions specified within your scripts with a variable rather than modify the python script directly. The script arguments allow your python scripts remain re-usable with different variables.</li>
            <li>Set whether the check requires a <MadCap:xref href="../../inspection/snapshot.html">snapshot</MadCap:xref>.<br /><code>REQUIRES_SNAPSHOT (options:&#160;true, false) [false]:</code><p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Requiring a snapshot calls for a database connection and impacts performance. It can take time to process if your database has hundreds or thousands of objects.</p></li>
        </ol>
        <p>You have successfully created and customized a policy check!</p>
        <h2>Security settings</h2>
        <ul>
            <li>Customizing policy checks is optional and OFF by default</li>
            <li>master switch: <code>--checks-scripts-enabled</code></li>
            <li>or <code>LIQUIBASE_COMMAND_CHECKS_RUN_CUSTOM_CHECKS_ENABLED=true|false</code>, etc</li>
            <li>Customized policy checks only apply to <code>checks run</code> so that you can set up checks etc before you use them.</li>
            <li>Restrict scripts to a certain path: <code>--checks-scripts-paths</code></li>
        </ul>
        <h2>System Requirements and Provided Framework</h2>
        <ul>
            <li>JDK 17+
            </li>
            <li>Open JDK
            </li>
            <li>Oracle JDK
            </li>
            <li>Linux, Mac, or Windows
            </li>
            <li>Liquibase 4.29.0 (TBD)
            </li>
            <li>Oracle GraalPy framework is included, you will not need to install it manually
            </li>
        </ul>
        <h2>Virtual Environment Options</h2>
        <p>You  can use the provided <a href="https://docs.python.org/3/library/venv.html">virtual environment</a> that is part of the <MadCap:variable name="General.LBPro" /> release or your own python virtual environment. If you need to utilize your own virtual environment you will need to have Python 3.10 installed on your system. This virtual environment is stored in a directory on your local file system.</p>
        <p>We also recommend <a href="https://www.graalvm.org/latest/reference-manual/python/Python-Runtime/#installing-graalpy">downloading and using the GraalPy CLI&#160;tool</a>. <MadCap:variable name="General.Liquibase" /> bundles and utilizes GraalPy to execute Python scripts via Java. GraalPy also provides patches to certain packages that facilitates a smooth workflow with Java when installing those packages. Python scripts can be stored anywhere text files are stored including:&#160;CWD, local paths, S3, or the GitHub extension, etc. </p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This is only recommended to users who are familiar with building and deploying Python virtual environments.</p>
        <h3>Step-by-step instructions</h3>
        <ol>
            <li>Run <code>python -m venv .your/path/to/venv</code> to create a <code>.your/path/to/venv</code> directory which contains (many) python executables.</li>
            <li>Run <code>source .your/path/to/venv/activate</code> to activate the virtual environment.</li>
            <li>Once the environment is active, install packages using <code>pip install &lt;some package&gt;</code>.</li>
            <li> Provide a path to the Python executable that is based on your virtual environment so <MadCap:variable name="General.Liquibase" /> can recognize the environment.<br /><code>liquibase --script-python-executable-path ./your/path/to/venv/bin/python checks run --check-name MySweetPythonCheck --checks-scripts-enabled --checks-scope database</code></li>
        </ol>
    </body>
</html>