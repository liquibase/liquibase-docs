<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/troubleshoot/improve-performance/recommendations-large-dml-scripts" />
        <meta name="description" content="If you use Liquibase Enterprise to order, execute and track DML scripts with other database changes, there are some special considerations when those files become very large." />
    </head>
    <body>
        <h1>Recommendations for Working with Large DML Scripts</h1>
        <MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>If you use <MadCap:variable name="General.LBEnterprise" /> to order, execute and track DML scripts with other database changes, there are some special considerations when those files become very large. If large DML files are not handled appropriately in <MadCap:variable name="General.LBEnterprise" /> deployment performance can slow drastically and errors could occur should <MadCap:variable name="General.LBEnterprise" /> exhaust available memory on the system from which changes are being deployed. The information below is intended to help you avoid such outcomes.</p>
        <p>A large DML file is considered to be a file with more than 10,000 distinct DML statements (Update, Insert, Delete). These files are typically generated by a comparison tool and are not handwritten.</p>
        <h2>Optimizing Performance of Large DML Scripts</h2>
        <h3>Maximize Memory Allocation</h3>
        <p>Running out of available memory is the most common issue caused by large DML scripts in <MadCap:variable name="General.LBEnterprise" /> for any supported database platform. Therefore it is recommended that you allocate at least 8 GB (8192 MB) of memory to the <MadCap:variable name="General.LBEnterprise" /> run time environment. See 
			<a href="increase-ram.htm">Increase the amount of RAM used by <MadCap:variable name="General.LBEnterprise" /></a>
			for more details on managing available memory settings.</p>
        <h3>Split Large Files into Multiple Smaller Files</h3>
        <p>Another way to prevent performance degradation is to split the large file into several smaller files of less than 10,000 distinct DML statements (Update, Insert, Delete).</p>
        <h4>Maintaining Order of Execution when Splitting Files</h4>
        <p>To preserve the order of execution for the statements in the original file, add a numeric indicator to each filename. For example, a large file named <code>myLargeDMLFile.sql</code> would become <code>myLargeDMLFile_1.sql, myLargeDMLFile_2.sql, myLargeDMLFile_3.sql, myLargeDMLFile_4.sql</code>  To ensure that the file set is appropriately ordered in the resulting change log:</p>
        <ul>
            <li>
                <p><strong>Manually Creating Change Sets or Using the Change Set Wizard:</strong>Create a change set for each file and order them appropriately in the change log<br /></p>
            </li>
        </ul><pre>&lt;changeSet author="Datical User" created="Fri Jan 17 15:10:44 CST 2020" dbms="oracle" id="DML1of4" labels="step2"&gt;  &lt;appdba:sqlplus encoding="UTF-8" path="sql/myLargeDMLFile_1.sql" removeSpools="First"/&gt;&lt;/changeSet&gt;&lt;changeSet author="Datical User" created="Fri Jan 17 15:10:44 CST 2020" dbms="oracle" id="DML2of4" labels="step2"&gt;  &lt;appdba:sqlplus encoding="UTF-8" path="sql/myLargeDMLFile_2.sql" removeSpools="First"/&gt;&lt;/changeSet&gt;&lt;changeSet author="Datical User" created="Fri Jan 17 15:10:44 CST 2020" dbms="oracle" id="DML3of4" labels="step2"&gt;  &lt;appdba:sqlplus encoding="UTF-8" path="sql/myLargeDMLFile_3.sql" removeSpools="First"/&gt;&lt;/changeSet&gt;&lt;changeSet author="Datical User" created="Fri Jan 17 15:10:44 CST 2020" dbms="oracle" id="DML4of4" labels="step2"&gt;  &lt;appdba:sqlplus encoding="UTF-8" path="sql/myLargeDMLFile_4.sql" removeSpools="First"/&gt;&lt;/changeSet&gt;</pre>
        <ul>
            <li>
                <p><strong>Creating Change Sets Using the Deployment Packager in SCM Mode:</strong>To maintain execution order of the files based on alphanumeric ordering of their names, simply include all files in the same source code control commit to your SQL code repository</p>
            </li>
        </ul>
        <h2>Avoid Forecasting Large DML Scripts (Oracle only)</h2>
        <h3>DML Forecasting Project Setting (Oracle only)</h3>
        <p>Datical's DML Forecasting feature for users of Oracle Database will run DML scripts in a transaction that is rolled back so that the user can determine what will happen when that script is applied to a given database. This feature can only be used for scripts that don't contain explicit or implicit commits, which Datical confirms prior to attempting the Forecast. The additional processing associated with the DML Forecasting feature can exacerbate the performance issues observed with very large DML scripts. As a result it is recommended that DML Forecast be disabled for large DML scripts.</p>
        <h4>Disabling DML Forecast for the Project</h4>
        <p>You can disable DML Forecasting in the project's Settings tab in the <MadCap:variable name="General.LBEnterprise" /> GUI, or by removing <code>forecastDML="true"</code> attribute from datical.project file, or by using the <code>forecastDML</code> subcommand of the <code>hammer set</code> command from the CLI</p><pre>/home/datuser/datical/NO_DML_4CAST&gt; hammer set forecastDml false
		ForecastDML for project 'NO_DML_4CAST' changed from 'true' to 'false'</pre>
        <h4>Disabling DML Forecast for an Individual Change Set</h4>
        <p>The DML Forecast feature will only run against scripts that are in the <code>Resources\data_dml</code> directory of your project. You can disable DML Forecast for specific scripts when it is enabled for the project by following the steps below.</p>
        <h4>Disabling DML Forecasting for Scripts Processed by Deployment Packager</h4>
        <p>To disable DML Forecast for a specific script using the Deployment Packager, check the script into a directory in the SQL code repo with <code>packagemethod=direct</code> if using flexible folders. (DML Forecast is enabled by <code>packagemethod=data_dml</code>).</p>
        <h4>Manually Updating a Change Set to Skip DML Parsing</h4>
        <p>Moving the DML script out of the <code>Resources\data_dml</code> directory and updating the reference to the script accordingly</p>
        <h3>SQL Parser forecasting (Oracle only)</h3>
        <p><a href="../../dba/package/package-sql-scripts-deployment/configure-packaging/sql-parser.htm">SQL Parser for Oracle</a> is not intended to be applied to large DML scripts because parsing each DML statement can cause performance slowdown.</p>
        <h4>Folders to use for large DML scripts in regards to SQL Parser</h4>
        <p>If you are using SQL Parser for Oracle in your project, we recommend <em>only</em> putting large DML scripts in:</p>
        <ul>
            <li>the folder called "data_dml" in fixed folder name configurations</li>
            <li>or folders with other flexible folder names that have packageMethod="data_dml" set in the metadata.properties</li>
            <li>or in folders that have disableSqlParser="true" set in the metadata.properties</li>
        </ul>
        <p>If you are using SQL Parser for Oracle in your project, do <em>not</em> put large DML scripts in folders that will use the parser, such as:</p>
        <ul>
            <li>the folders called "ddl_direct", "sql_direct", or "sql" in fixed folder name configurations</li>
            <li>or folders with other flexible folder names that have packageMethod="ddl_direct", packageMethod="direct", or packageMethod="sqlfile" set in the metadata.properties</li>
            <li>or in folders that have disableSqlParser="false" set in the metadata.properties</li>
        </ul>
        <p>If you are using SQL Parser for Oracle in your project, it is good to put DML statements in their own script in a DML folder (without parser) and put other types of statements (such as ddl) in a separate script in other appropriate folders that might use parser. Using separate scripts for DML change sets is better than using one large script that combines both DML and other change types (such as DDL).</p>
        <h4>Disabling SQL Parser at the Folder level</h4>
        <p>You can selectively disable the SQL Parser after it has been enabled, either at the folder level or on the change set level.</p>
        <p>You can disable SQL Parser at the folder level either temporarily or permanently in the metadata.properties file for that folder:</p>
        <p>Set <code>disableSqlParser=true </code>in the <code>metadata.properties</code> file for any folders that you do not want SQL Parser to process:</p><pre>disableSqlParser=[true&#160;|&#160;false]</pre>
        <h4>Disabling SQL Parser at the Change Set level</h4>
        <p>If SQL Parser was applied to a large DML script during packaging, that may cause performance issues during deployment to higher environments. You can disable SQL Parser for a specific change set by manually editing the changelog.xml to add disableSqlParser="true":</p>
        <p>Add <code>disableSqlParser=true </code>in the <code>appdba:sqlplus</code> section of the change set for a specific change set you do not want SQL Parser to process:</p><pre>&lt;changeSet appdba:scriptChecksum="9f8a11051d1478faf2752baacb76cf0e"&#160;author="J Doe"&#160;created="2020-08-10 18:37+0000"&#160;datical:origFileName="adding_test_new_001.sql"&#160;datical:origFilePath="scripts/sql_direct"&#160;datical:version="1"&#160;datical:versionStrategy="DEPLOY_ALL"&#160;id="20200810183704986_adding_test_new_001"&#160;labels="509,deploy-test1,deploy-test1,adding_test_new_001.sql"&gt;  &lt;appdba:sqlplus disableSqlParser="true"&#160;enableRollbackOnError="true"&#160;path="sql/20200810183704986_adding_test_new_001.sql"&#160;removeSpools="First"&#160;schemaName="SCHEMA1"/&gt;  &lt;comment&gt;Test script&lt;/comment&gt;</pre>
    </body>
</html>