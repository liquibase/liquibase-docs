<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/devops/move-changes-pipeline/roll-back-changes/rollback-valid-packaging.html" />
        <meta name="description" content="Use the validateRollback option in deployPackager.properties to specify how to test your rollback scripts." />
    </head>
    <body>
        <h1>Rollback File Validation During Packaging</h1>
        <MadCap:snippetText src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/enterprise/DBA.flsnp" />
        <p>Use the <code>validateRollback</code> option in <code>deployPackager.properties</code> to specify how to test your rollback scripts.</p>
        <ul>
            <li><strong>none</strong> â€“ Do not test rollback scripts.</li>
            <li><strong>withCompare</strong>- Test rollback scripts and their effect. During packaging, take a snapshot of the REF database to use for comparing database states to validate the rollback script. If the test fails, packager continues and shows a WARNING message in the log.</li>
            <li><strong>withoutCompare</strong>- Test rollback scripts only to see if they run. Does not test their effects. If the test fails, packager exits with an ERROR.</li>
        </ul>
        <h2>Project-Level Requirement for All SQL Scripts to Have Rollback Scripts</h2>
        <p>If you specify either of the options to validate rollback scripts, then you must provide <code>-rollbac</code>k or _rollback files for all scripts in the project. The requirement starts when you enable the option. You do not need to provide rollback files for SQL scripts that have already been packaged and deployed.</p>
        <h2>Pre-Validation Checks</h2>
        <p>Before starting the validation process, packager checks the scripts to determine whether they meet validation requirements.</p>
        <h3>Rollbacks for Non-rerunnable SQL Scripts</h3>
        <p>Non-rerunnable scripts are for code that can be run only once. The SQL scripts are archived after packaging.</p>
        <p>The packager checks for the following conditions when it is determining how to validate rollback:</p>
        <ul>
            <li>The script produces one changeset. A rollback script is provided. This method is used in some cases where DDL and DML are packaged together.</li>
            <li>The script produces several changesets. A rollback script is provided. This method is typically used for DDL.</li>
        </ul>
        <h3>Rollbacks for Rerunnable SQL Scripts</h3>
        <p>Rerunnable scripts are for code that can be run more than once, typically stored logic code (function, procedure, package, packagebody, view). These files are not archived. They are left in place and versioned for each time they are packaged.</p>
        <p>Validation consists of checking that a prior version of the deployed changeset exists.</p>
        <ul>
            <li>Version of the SQL script must be greater than 1.</li>
            <li>The previous version must have been deployed.</li>
        </ul>
        <h3>Dummy Rollback Scripts for Idempotent SQL Scripts</h3>
        <p>In special cases there are scripts that cannot have a rollback script. To satisfy the project-level requirement for all scripts to have rollback scripts, you can create a blank or comments-only rollback script for them.</p>
        <p>Such scripts are called <em>idempotent</em>, which means that they can be run multiple times with the same result.</p>
        <p>Examples:</p>
        <ul>
            <li>delete column from table</li>
            <li>if an object exists, delete it and then create it; else create it.</li>
        </ul>
        <h2>Validation Process with Compare</h2>
        <p>Packager uses the following high-level process when validating with <code>validateRollback=withCompare</code>.</p>
        <ol>
            <li>Snapshot the REF database for comparison purposes (snapshot #1)</li>
            <li>Deploy changes using SQL scripts provided (not logged in DMCDB)</li>
            <li>Snapshot the REF database again (snapshot #2)</li>
            <li>Test rollback (not logged in DMCDB)</li>
            <li>Snapshot the REF database again (snapshot #3)</li>
            <li>Deploy using generated changesets (not logged in DMCDB)</li>
            <li>Snapshot the REF database one final time (snapshot #4)</li>
            <li>Compare snapshot #1 and snapshot #3 to ensure rollback works properly</li>
            <li>Compare snapshot #2 and snapshot #4 to ensure that script packaging works properly.</li>
        </ol>
        <h3>Error Conditions for the Validation Process</h3>
        <p>Based on the validation process, you get messages in the packager report for the following conditions.</p>
        <table>
            <tbody>
                <tr>
                    <th>Test Rollback</th>
                    <th>Test Deploy</th>
                    <th>Snapshot Differences Detected</th>
                    <th>Packager Action</th>
                </tr>
                <tr>
                    <td>Success</td>
                    <td>Success</td>
                    <td>No</td>
                    <td>Continue</td>
                </tr>
                <tr>
                    <td>Success</td>
                    <td>Success</td>
                    <td>Yes</td>
                    <td>Continue</td>
                </tr>
                <tr>
                    <td>Success</td>
                    <td>Fail</td>
                    <td>n/a</td>
                    <td>Exit with error</td>
                </tr>
                <tr>
                    <td>Success</td>
                    <td>Fail</td>
                    <td>Yes</td>
                    <td>Exit with error</td>
                </tr>
                <tr>
                    <td>Fail</td>
                    <td>n/a</td>
                    <td>n/a</td>
                    <td>Exit with error</td>
                </tr>
            </tbody>
        </table>
        <p class="title">Note</p>
        <p>If differences between the snapshots are detected but the test rollback and test deploy succeed, packager gives you messages but continues. Check the messages and the scripts to be sure that the differences are acceptable and understood.</p>
        <h2>Fixing Failed Rollback Scripts</h2>
        <p>If validation fails for the rollback script, then packaging stops without creating changesets.</p>
        <p>Correct the rollback script and try packaging again:</p>
        <ol>
            <li>Correct the rollback script</li>
            <li>Check the changes into source control</li>
            <li>Re-run the packaging job.</li>
        </ol>
        <h2 id="RollbackFileValidationDuringPackaging-ReplacingScriptsWhenRollbackValidationisInEffect">Replacing Scripts When Rollback Validation is In Effect</h2>
        <p>You may need to make changes to a SQL script and its rollback script after they are packaged and deployed.</p>
        <p>When you make changes in that scenario, you should replace <strong>both</strong> the SQL script and its rollback script at the same time.</p>
        <table>
            <tbody>
                <tr>
                    <th>Scenario</th>
                    <th>Validate the rollback?</th>
                    <th>WARNING</th>
                </tr>
                <tr>
                    <td>New SQL script and its new rollback script</td>
                    <td>YES</td>
                    <td>None</td>
                </tr>
                <tr>
                    <td>Replace and repackage both SQL script and its rollback script</td>
                    <td>YES</td>
                    <td>None</td>
                </tr>
                <tr>
                    <td>Replace a SQL script but not its rollback script</td>
                    <td>YES, BUT see Warning.</td>
                    <td>The previous rollback script is pulled forward. Validation (withCompare) may fail if the new SQL script has changes that are not accounted for by the previous rollback script. Validation (withoutCompare) will succeed but the rollback script may not account for new changes. </td>
                </tr>
                <tr>
                    <td>Replace rollback script but not its SQL Script. for a change set that was previously created</td>
                    <td>NO</td>
                    <td>Do not attempt this. The rollback cannot be validated. Validation is skipped but the new rollback script is deployed. If the rollback script is incorrect, you do not find out until you run a rollback operation.</td>
                </tr>
            </tbody>
        </table>
        <h2>Rollback Files and Developer Workflow Files</h2>
        <p>Do not use both <code>-rollback/_rollback</code> files AND also Developer Workflow files (<code>-cleanup/_cleanup</code>, <code>-replace/_replace</code>, <code>-ignore/_ignore</code>) for the same SQL script. In general, Developer Workflow functionality is intended for SQL scripts that do not have <code>-rollback/_rollback</code> files.</p>
        <p>See <a href="../../../developer/dev-user-guides/workflow/home.htm" rel="nofollow">Developer Workflows: Managing Changesets during Deployment and Test</a></p>
    </body>
</html>