<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/devops/move-changes-pipeline/packaging/run-deployment-packager.html" />
        <meta name="description" content="Learn how to run the deployment packager from both CLI and GUI." />
    </head>
    <body>
        <h1>Run the Deployment Packager</h1>
        <MadCap:snippetText src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <h2>Run the Deployment Packager from the CLI</h2>
        <p>In the CLI, the Deployment Packager is initiated by running <code>deployPackager.groovy</code>. The script has two main modes of action: packaging SQL scripts and parameters defined in a manifest file or packaging SQL scripts directly from an SCM repository.</p>
        <p>The following sections show examples.</p>
        <p>See also <a href="../../best-practices/deploy-packager-config.htm" rel="nofollow">CLI - Deployment Packager</a></p>
        <h2 id="RunningDeploymentPackager-SCMModeExamples">SCM Mode Examples</h2>
        <ul>
            <li>Check the SCM repository for new files to process. The "preview" flag runs through processing without actually doing anything. It is useful when you're getting the SCM tool configured with Datical.
            </li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy pipeline=pipeline_name scm=true [labels=&lt;comma separated list&gt;] <strong>preview</strong></code>
        </p>
        <ul>
            <li>Check the SCM repository for new files, process them, and update the repository pointer (in the deployPackager.properties file) to mark the files as processed.
            </li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy pipeline=pipeline_name scm=true [labels=&lt;comma separated list&gt;] </code><span style="color: rgb(255,255,255);"><code>h</code>ammer groovy
        </p>
        <ul>
            <li>Check the SCM repository for new files, process them, and update the repository pointer to mark the files as processed. The quiet option suppresses all informational messages.
            </li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy pipeline=pipeline_name scm=true [labels=&lt;comma separated list&gt;] <strong>quiet</strong></code>
        </p>
        <ul>
            <li>When employing <em>FEATURE BASED MERGE MODE</em>, run the script with a <strong><code>dbdef=&lt;dbdef_name&gt;</code></strong> parameter that targets a specific database definition within a project. For more information on this mode see <a href="../../../dba/package/package-sql-scripts-deployment/sql-code-branch-merge-advnc.htm" rel="nofollow">SQL Code Branching &amp; Merging (Advanced)</a>.
            </li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy <strong>dbdef=&lt;dbdef_name&gt;</strong> scm=true [labels=&lt;comma separated list&gt;]</code>
        </p>
        <ul>
            <li>Example command that can be used at the command line or in a Jenkins job. Note that the value passed for <code>--projectKey</code> is actually the project name and not the project key from DMC.</li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy pipeline=<strong>pipeline_name</strong> scm=true --daticalServer=<strong>dmc_server_url</strong> --daticalUsername=<strong>user_name</strong> --projectKey=<strong>project_name</strong></code>
        </p>
        <h2 id="RunningDeploymentPackager-ManifestModeExamples">Manifest Mode Examples</h2>
        <ul>
            <li>Process the SQL files listed in the manifest file. The "preview" flag runs through processing without actually processing SQL scripts. It is useful for validating the manifest file when getting your system configured.
            </li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy pipeline_name manifest=&lt;file.json&gt; [labels=&lt;comma separated list&gt;] <strong>preview</strong></code>
        </p>
        <ul>
            <li>Process the SQL files listed in the manifest file.
            </li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy pipeline_name manifest=&lt;file.json&gt; [labels=&lt;comma separated list&gt;]</code>
        </p>
        <ul>
            <li>Process the SQL files listed in the manifest file. The quiet option suppresses all informational messages.
            </li>
        </ul>
        <p><code>hammer groovy deployPackager.groovy_name manifest=&lt;file.json&gt; [labels=&lt;comma separated list&gt;] <strong>quiet</strong></code>
        </p>
        <h2>Running Deployment Packager from the <MadCap:variable name="General.LBEnterprise" /> GUI</h2>
        <p>The <MadCap:variable name="General.LBEnterprise" /> GUI provides a guided wizard that allows you to: execute the Deployment Packager in SCM Mode; define &amp; edit manifests; and execute the Deployment Packager in Manifest Mode. Refer to the screenshots and descriptions below to familiarize yourself with the wizard.</p>
        <h3>Launching the Deployment Packager Wizard</h3>
        <p>To launch the Deployment Packager Wizard, select the Deployment Pipeline you wish to work in using the control highlighted in blue and click the 'Deployment Packager' button highlighted in red.</p>
        <p>
            <img src="../../../../Z_Resources/Images/enterprise/run-deploy-package/1run-deploy.png" />
        </p>
        <h3>Deployment Packager Wizard Overview</h3>
        <h4>Selecting Execution Mode and Runtime settings</h4>
        <p>
            <img src="../../../../Z_Resources/Images/enterprise/run-deploy-package/2run-deploy.png" />
        </p>
        <p>The initial page of the wizard allows you to select your desired activity and set runtime parameters prior to executing the Deployment Packager. Areas to note:</p>
        <ol>
            <li><strong>Onboarding Method –</strong> Select whether you'd like to operate in SCM mode, create a new manifest file or load an existing manifest file.
				<ol><li><strong>Deployment Step Selector –</strong> When using a Feature Merge, you may select a specific database definition in the current pipeline against which to run the Deployment Packager. The default selection "Current Pipeline" will run against the reference database for this pipeline. The reference database is assumed to be the first database definition in the current pipeline.</li></ol></li>
            <li><strong>Runtime Parameters</strong>
                <ol>
                    <li><strong>Labels &amp; Contexts</strong> Assign any additional labels or contexts you'd like to associate with ALL change sets generated by this execution of the Deployment Packager. NOTE: This information isn't saved anywhere, so if the wizard is closed prior to execution these label and context values will need to be reconfigured.</li>
                    <li><strong>Preview Mode</strong> Checking this box prior to executing the Deployment Packager will confirm that the current configuration will lead to a successful packaging attempt. This is useful when you are first configuring a new Project to employ the Deployment Packager OR when you are authoring a new manifest file.</li>
                </ol>
            </li>
            <li><strong>Navigation Buttons</strong>
                <ol>
                    <li><strong>&lt; Back –</strong> Never enabled on this page.</li>
                    <li><strong>Next &gt; -</strong> Enabled when either 'Create New Manifest' or 'Specify Existing Manifest File' is specified. This takes you to the Manifest File Editor portion of this wizard.</li>
                    <li><strong>Run –</strong> Enabled when 'Source Code Management Integration' or 'Specify an Existing Manifest File' is enabled. This will execute the Deployment Packager according to the current settings.</li>
                    <li><strong>Cancel –</strong> Closes the Deployment Packager wizard without doing anything.</li>
                </ol>
            </li>
        </ol>
        <h4>Manifest File Overview Page</h4>
        <p>
            <img src="../../../../Z_Resources/Images/enterprise/run-deploy-package/3run-deploy.png" />
            <br />After selecting one of the Manifest File options on the first page of the wizard and clicking 'Next&gt;' you are taken to the Manifest File Overview. This page allows you to:</p>
        <ol>
            <li>Add/Remove File Groups in the manifest.</li>
            <li>Launch the File Group Editor to define a File Group</li>
            <li>Control in what order File Groups are processed during Deployment Packager execution by selecting a File Group in the table able using the 'Move Up' and 'Move Down' buttons</li>
            <li>Save the manifest to the Resources directory of the project for later editing or execution</li>
        </ol>
        <h4>File group Editor dialog</h4>
        <p>
            <img src="../../../../Z_Resources/Images/enterprise/run-deploy-package/4run-deploy.png" />
            <br />Clicking the 'Add File Group' or 'View/Edit File Group' buttons on the Manifest File Overview page will launch the File Group Editor. In this dialog you will be able to:</p>
        <ol>
            <li>Specify the file name, rollback file name, file type, author and comments for one or more SQL scripts to be packaged.</li>
            <li>Remove previously defined files from the File Group</li>
            <li>Control the order in which those scripts are executed within that File Group</li>
            <li>Specify Labels and Contexts to be applied to all change sets generated by files in the File Group</li>
        </ol>
        <h4>Running the Deployment Packager from the Wizard</h4>
        <p>Once you have selected the SCM Integration method or defined and saved a valid Manifest File, the wizard's <strong>Run</strong> button will be enabled.</p>
        <p>Click <strong>Run</strong> to start the Deployment Packager.</p>
        <p>
            <img src="../../../../Z_Resources/Images/enterprise/run-deploy-package/5run-deploy.png" />
        </p>
    </body>
</html>