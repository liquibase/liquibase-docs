<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/devops/best-practices/deploy-packager-config.html" />
        <meta name="description" content="This page covers how to configure the deployment packager. The Deployment Packager provides end-to-end automation for the onboarding of database changes in Enterprise." />
    </head>
    <body>
        <h1>Deployment Packager Configuration</h1>
        <MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <h2> Overview</h2>
        <p>The Deployment Packager provides end-to-end automation for the onboarding of database changes in <MadCap:variable name="General.LBEnterprise" /> with capabilities including: </p>
        <ul>
            <li>automated change validation &amp; approval</li>
            <li>source code control repository management</li>
            <li>database environment backup and restore.</li>
        </ul>
        <h2>Deployment Packager Operating Modes &amp; Configuration</h2>
        <p>The Deployment Packager has two operating modes from which to choose: <strong>Manifest File</strong> mode &amp; <strong>Source Code Management (SCM)</strong> mode.</p>
        <p>In <b>Manifest File</b> mode, the user will define the SQL scripts to be processed and metadata about those scripts in a file that is passed to the Deployment Packager as an argument. <b>This mode is out of scope for this document.</b></p>
        <p>In <b>Source Code Management</b> mode, the user configures a properties file with information about the source code management repositories in which the SQL scripts to be processed and the <MadCap:variable name="General.LBEnterprise" /> Project to be managed reside. Both modes require that a deployPackager.properties file with environmental information be present and configured in the root directory of the <MadCap:variable name="General.LBEnterprise" /> project.</p>
        <h3>Step-by-Step guide:&#160;Configure the deployPackager.properties file</h3>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">There are two options for this guide depending on the software version you are using. <MadCap:variable name="General.LBEnterprise" /> 8.2 and earlier must have the deployPackager.properties file added manually. <MadCap:variable name="General.LBEnterprise" /> 8.3 and later automatically adds a <code>deployPackager.properties</code> file when a new project is created. </p>
        <h4><MadCap:variable name="General.LBEnterprise" /> version 8.2 and before:</h4>
        <p>Before using the Deployment Packager, create a <code>deployPackager.properties</code>  in the top level of your <MadCap:variable name="General.LBEnterprise" /> Project directory.</p>
        <h4><MadCap:variable name="General.LBEnterprise" /> version 8.3 and later:</h4>
        <p>It is <b>not necessary</b> to create a <code>deployPackager.properties</code> file because <MadCap:variable name="General.LBEnterprise" /> creates it when a new project is created. Along with the <code>deployPackager.properties</code> file, all ignore files are installed automatically too. You must  ensure that you have the ignore files that you need and delete the others. This works in the CLI, GUI, or a <code>project_creator groovy</code> script.<br /></p>
        <p>Ignore files are automatically added for all supported SCM:</p>
        <ul>
            <li>git: .gitignore</li>
            <li>team foundation: .tfignore</li>
            <li>SVN: .svnignore</li>
        </ul>
        <p>Choose the one you will use, and delete the rest.</p>
        <p><b>If you are using SVN</b>, be aware that an extra step is needed for SVN to automatically ignore files. </p>
        <p>You must run: <code>ignore -F .svnignore</code> so SVN will ignore them successfully.</p>
        <h3>Deployment Packager Interactions with SCM&#160;Solutions<br /></h3>
        <p>This property file contains a variety of configuration information used by the Deployment Packager to interact with SCM solutions and to perform database backups and restorations.</p>
        <p>There are two sets of SCM information that can be supplied. The first specifies the location of the SQL files that will be packaged - these start with "sqlScm". The second is for the <MadCap:variable name="General.LBEnterprise" /> project itself and has property names that start with "ddbScm". If both the <MadCap:variable name="General.LBEnterprise" /> project and the SQL code are in the same SCM repository, you can specify just the information for the SQL repository ("sqlScm" properties) and the system will use the same repository for the <MadCap:variable name="General.LBEnterprise" /> project as well.</p>
        <p>The following properties can be set in the deployPackager.properties file (additional properties can be found in <a href="../../dba/package/package-sql-scripts-deployment/configure-packaging/required-deploy-packager-properties.htm">Using the Required deployPackager.properties file</a>):</p>
        <table>
            <tbody>
                <tr>
                    <th>
                        <p>Property Name</p>
                    </th>
                    <th>
                        <p>Description</p>
                    </th>
                </tr>
                <tr>
                    <td>
                        <p>sqlScmSystem</p>
                    </td>
                    <td>
                        <p>SCM software type for SQL code â€“ currently supported types are git, svn, and tfs.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>sqlScmPath</p>
                    </td>
                    <td>
                        <p>Local directory path to the developer's SCM repository for SQL code. For git, this is where the .git folder is contained. May be absolute, but it usually relative to where the datical project (and this file) resides.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>sqlScmBranch</p>
                    </td>
                    <td>
                        <p>The branch to be used for SQL code. Should <strong>only</strong> be used when sqlScmSystem=git.</p>
                    </td>
                </tr>
                <tr>
                    <td>scmBranchHandling</td>
                    <td>
                        <p>Needs to be specified only for Subversion (SVN) or TFS as <strong>scmBranchHandling=directory<br /></strong>Reason SVN and TFS are file based w/ a client / server architecture whereas Git is a repo based DVCS.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>sqlScmLastImportID</p>
                    </td>
                    <td>
                        <p>The SCM system's "id" for the most recently <strong><em>processed</em></strong> SQL code check in. This will be automatically updated when the Deployment Packager completes successfully. <strong>Note:</strong> Do not leave blank. Do not use the most recent check-in. For first time use, use an ID from an earlier check-in.</p>
                        <ul>
                            <li>For Git, this is the first 7 digits of the relevant hash (ex. f68f1a677dcecbc6b600754bf9385928fc132401 should be f68f1a6)</li>
                            <li>For SVN, this is the relevant revision number</li>
                            <li>For TFS, this is the relevant changeset number</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>sqlScmSQLBaseDir</p>
                    </td>
                    <td>
                        <p>Top level directory for the SQL scripts stored in the SQL SCM repository. Can be absolute, but is usually relative to the sqlScmPath.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>sqlScmDoCheckout</p>
                    </td>
                    <td>
                        <p>If this is not present or is set to 'true', deploy packager will ensure that the latest available revision of the SQL repository is retrieved before processing. Set this to 'false' to skip this.</p>
                        <ul>
                            <li>For users using git, this is equivalent to 'git pull'</li>
                            <li>For users using svn, this is equivalent to 'svn update'</li>
                            <li>For users using TFS, this is equivalent to 'tf get'</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>ddbScmSystem</p>
                    </td>
                    <td>
                        <p>SCM software type for the <MadCap:variable name="General.LBEnterprise" /> project. Currently supported types are 'git', 'svn', and 'tfs'. May be different than the sqlScmSystem. If this is not present, Deployment Packager will use the value from sqlScmSystem.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>ddbScmPath</p>
                    </td>
                    <td>
                        <p>Local directory path to the developer's <MadCap:variable name="General.LBEnterprise" /> SCM repository. If this is not present, Deployment Packager will use the value from sqlScmPath.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>ddbScmBranch</p>
                    </td>
                    <td>
                        <p>The branch to be used for the <MadCap:variable name="General.LBEnterprise" /> project. If this is not present, deploy packager will use the value from sqlScmBranch.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>ddbScmLastImportID</p>
                    </td>
                    <td>
                        <p>The SCM system's "id" for the most recently <strong><em>processed</em></strong> <MadCap:variable name="General.LBEnterprise" /> project check in. This will be automatically updated when the deploy packager completes successfully. <strong>Note:</strong> Do not leave blank. Do not use the most recent check in. For first time use, use an ID from an earlier check in.</p>
                        <ul>
                            <li>For Git, this is the first 8 digits of the relevant hash</li>
                            <li>For SVN, this is the relevant release number</li>
                            <li>For TFS, this is the relevant changeset number</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>ddbScmDoCheckout</p>
                    </td>
                    <td>
                        <p>If this is not present or is set to 'true', deploy packager will ensure that the latest available revision of the <MadCap:variable name="General.LBEnterprise" /> repository is retrieved before processing. Set this to 'false' to skip this. If this is not present, deploy packager will use the value from sqlScmSystem.</p>
                        <ul>
                            <li>For users using git, this is equivalent to 'git pull'</li>
                            <li>For users using svn, this is equivalent to 'svn update'</li>
                            <li>For users using TFS, this is equivalent to 'tf get'</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>databaseBackupRestoreLocation</p>
                    </td>
                    <td>
                        <p>During packaging, the script will make backups of the database. These are usually stored on the database server itself. This property specifies the location to which the database backup should be written. Depending on your DBMS, this may need to be a directory or it may need to be a file. Note: On Oracle and DB2, this directory will be on the server, so the path separator must follow the server's convention ('/' on Linux, '\' on Windows.) Because the '\' is an escape character in Java properties files, you must supply '' to indicate a single backslash.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>enableBackupRestore</p>
                    </td>
                    <td>
                        <p>When the Packager is run in 'dbdef=' mode, the backup and restore routines can be skipped for certain sensitive environments. The value of this property is a comma separated list of the environments in which the Packager should perform backup and restore tasks. <strong>NOTE:</strong> Backup and restore tasks are NOT recommended for environments beyond development &amp; test.</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Pipeline &amp; DB Def Specific Branch Settings (deployPackager.properties File)</h3>
        <p>In order for the Deployment Packager to process the appropriate scripts for a specific Database Definition or Deployment Pipeline, the SCM branch name and the ID for the last import processed need to be tracked separately in the deployPackager.properties files. These properties should take the format of {<em>Deployment Pipeline Name</em>}.sqlScmBranch OR {<em>Database Definition Name</em>}.sqlScmBranch for the branch name and {<em>Deployment Pipeline Name</em>}.sqlScmLastImportID OR {<em>Database Definition Name</em>}.sqlScmLastImportID. Refer to the properties in the bottom section of the file below for an example of the Deployment Pipeline specific properties.</p>
        <p>
            <br /><strong>Example deployPackager.properties file</strong>
        </p><b>deployPackager.properties</b><pre># This properties file controls the <MadCap:variable name="General.LBEnterprise" /> deployPackager
sqlScmSystem=git
sqlScmLastImportID=421541c
sqlScmBranch=master
sqlScmPath=/home/developer/mySqlCode
sqlScmSQLBaseDir=sql_code
# the database backup restore location is on the db server.
databaseBackupRestoreLocation=
# Branch &amp; Pipeline Specific Properties for Multiple Pipeline Projects
# Settings for the JUL_2016 Datical Deployment Pipeline
JUL_2016.sqlScmBranch=JUL_2016_SQL
JUL_2016.sqlScmLastImportID=75782c
#Settings for the AUG_2016 Datical Deployment Pipeline
AUG_2016.sqlScmBranch=AUG_2016_SQL
AUG_2016.sqlScmLastImportID=49628d
#Settings for the PROD_STAGING Database Definition
PROD_STAGING.sqlScmBranch=AUG_2016_SQL
PROD_STAGING.sqlScmLastImportID=69371n</pre>
        <h2>Defining contexts &amp; labels using a metadata.properties file in the SCM directory structure</h2>
        <p>You can automatically assign labels and contexts to generated change sets is by using 'metadata.properties' files that contain label and context specifications. When a metadata.properties file is discovered during packaging in SCM mode, the Deployment Packager will add the labels and contexts defined in the properties file to all change sets produced by scripts checked into that directory. Labels and contexts assigned in this way are also hierarchical. The Deployment Packager will also associate labels and contexts with change sets generated by scripts processed in sub-directories of the directory where the metadata.properties file resides. To assign different labels and contexts to changes produced by scripts in these subdirectories, simply create a new metadata.properties file in the appropriate subdirectory. The labels and contexts will overwrite the values set by any metadata.properties file in ancestor directories. A sample file is below.</p><b>metadata.properties</b><pre># This properties file controls label and context values on Deployment Packager generated change sets
labels=label1,label2,label3
contexts=QA,PERF_TEST,UAT</pre>
        <h3 id="ImplementationGuide:DeployPackagerConfiguration-Subversion:Additionalnotes">Subversion: Additional notes</h3>
        <p>Please note the above use of&#160;<em><strong>scmBranchHandling</strong>=directory</em> and <strong>NOT</strong> specifying <strong>sqlScmBranch</strong>. In addition, the GUI will have the following issue:</p>
        <p>Correct branch will not be reflected in the GUI but will still detect changes (see screenshot below):</p>
        <p>
            <img src="../../../Z_Resources/Images/enterprise/deploy-packager-config.png" />
        </p>
    </body>
</html>