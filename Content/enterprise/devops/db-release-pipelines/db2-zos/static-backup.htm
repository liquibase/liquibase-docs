<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/devops/db-release-pipelinese/db2-zos/static-backup.html" />
        <meta name="description" content="This guide covers how to run the script that creates the DB2 z/OS restore script." />
    </head>
    <body>
        <h1>DB2 on z/OS - Running Static Backup</h1>
        <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>This guide covers how to run the script that creates the DB2 z/OS restore script.</p>
        <ul>
            <li>Please review DB2 on z/OS - Setting up Datical Project to make sure you setup project correctly.</li>
            <li>Datical's static backup script (groovy):</li>
            <ul> <li>The script, db2z_create_static_backup.groovy, needs to be executed from the Datical project, since it is a Hammer Groovy script.</li><li>It will create the output file db2z_restore.sql in the project directory.</li><li>That is the file that deployPackager will pick up.</li></ul>
        </ul><pre class="line-numbers-rows" xml:space="preserve"># sample usage: 
# hammer groovy db2z_create_static_backup.groovy dbDef=&lt;dbDef name&gt; tables=&lt;csv list of tables for inserts&gt; scripts=&lt;csv list of scripts&gt;
hammer groovy db2z_create_static_backup.groovy dbDef=REF tables=DATABASECHANGELOG scripts=dumpScripts/createDatabase.sql</pre>
        <p>Database dump script:</p>
        <ul> <li><p>Provide one or more dump scripts which rebuilds your DB2 database. This script should start with CREATE DATABASE. At a minimum, it also needs to contain code for DATABASECHANGELOG table. E.g.,</p></li><li><pre class="line-numbers-rows" xml:space="preserve">CREATE DATABASE "DATICAL" 
		CCSID EBCDIC;

CREATE TABLE IBMUSER.DATABASECHANGELOG (
		"ID" VARCHAR(255) FOR MIXED DATA NOT NULL,
		AUTHOR" VARCHAR(255) FOR MIXED DATA NOT NULL,
		"FILENAME" VARCHAR(255) FOR MIXED DATA NOT NULL,
		"DATEEXECUTED" TIMESTAMP NOT NULL,
		"ORDEREXECUTED" INTEGER NOT NULL,
		"EXECTYPE" VARCHAR(10) FOR MIXED DATA NOT NULL,
		"MD5SUM" VARCHAR(35) FOR MIXED DATA WITH DEFAULT NULL,
		"DESCRIPTION" VARCHAR(255) FOR MIXED DATA WITH DEFAULT NULL,
		"COMMENTS" VARCHAR(255) FOR MIXED DATA WITH DEFAULT NULL,
		"TAG" VARCHAR(255) FOR MIXED DATA WITH DEFAULT NULL,
		"LIQUIBASE" VARCHAR(20) FOR MIXED DATA WITH DEFAULT NULL,
		"CONTEXTS" VARCHAR(4000) FOR MIXED DATA WITH DEFAULT NULL,
		"LABELS" VARCHAR(4000) FOR MIXED DATA WITH DEFAULT NULL,
		"DEPLOYMENT_ID" VARCHAR(10) FOR MIXED DATA WITH DEFAULT NULL
		)
PARTITION BY SIZE EVERY 4 G
AUDIT NONE
DATA CAPTURE NONE
CCSID UNICODE;</pre></li><li><p>Eye-ball the generated SQL script -  db2z_restore.sql</p></li><li><p>Before the restore runs in deployPackager, Datical drops all objects on the managed schemas. This gets rid of any objects created by Convert SQL, including sequences.</p></li></ul>
        <p>Here is the Jenkinsfile which can run the static backup and produce a new restore script (see line 52).</p>
        <p class="note">Be sure to provide a new DB2 export script as pointed out by comments in lines 47-48 (e.g., "dumpScripts/createDatabase.sql")</p><pre>node {
	// Packager declarative pipeline
       env.GITURL="git@gitlab.com:adeelmalik78"
       env.PATH="${env.PATH}:/usr/local/git/bin/:/opt/datical/DaticalDB/repl"

stage ('Checkout') {
        // cleanup workspace
        deleteDir()
        sh '''
        whoami
        which git
        git --version
        which hammer
        hammer show version
        '''
      
  // checkout DB2 Datical project from DDB repo
  checkout([
        $class: 'GitSCM',
        branches: [[name: '*/master']],
        doGenerateSubmoduleConfigurations: false,
        extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'DB2_DDB'], [$class: 'LocalBranch', localBranch: 'master']],
        submoduleCfg: [],
        userRemoteConfigs: [[url: "$GITURL/DB2_DDB.git"]]
  ])
 } // stage 'checkout'
        
 stage('Backup') {
  dir ("DB2_DDB") {
  
        echo "===== Setting up branch master for DDB ======"
        echo "PATH=$PATH"
        
        sh '''
           git branch --set-upstream-to=origin/master master
           git status
        '''
   } // dir
   dir ("DB2_DDB") {
        echo "================================================"
        
        sh '''
          echo off
        
          # create a new database export here ---
          #    the resulting export (SQL script) will need to be provided as "scripts" argument to  "hammer groovy db2z_create_static_backup.groovy ..." command
        
         # create a new restore script by running "db2z_create_static_backup.groovy"
         # hammer groovy db2z_create_static_backup.groovy dbDef=&lt;dbDef name&gt; &lt;tables=csv list of tables for inserts&gt; scripts=&lt;csv list of scripts&gt;
        hammer groovy db2z_create_static_backup.groovy dbDef=REF tables=IBMUSER.DATABASECHANGELOG scripts=dumpScripts/createDatabase.sql
        
        echo "=====SHOW RESULTING db2z_restore.sql======="
        ls -alh
        
        echo "=====FINISHED===="
     '''
        
     // Jenkins Artifacts
     archive '**/daticaldb.log, **/Reports/**, **/Logs/**, **/Snapshots/**, **/db2z_restore.sql'
        
  } // dir
} // stage backup
        
stage('Push to Git') {
     dir ("DB2_DDB") {
        sh '''
           git add .
        git commit -m "Successfully created a new backup - Build:${BUILD_NUMBER}"
        git push
        '''
     } // dir
        } // stage Push to Git 
			
}          //node
        </pre>
    </body>
</html>