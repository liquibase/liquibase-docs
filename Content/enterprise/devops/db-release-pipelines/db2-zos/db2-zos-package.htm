<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/devops/db-release-pipelines/db2-zos/db2-zos-package.html" />
        <meta name="description" content="This guide covers the specifics of DB2 on zOS packaging behavior." />
    </head>
    <body>
        <h1>Packaging with DB2 on zOS</h1>
        
        <p>This guide covers the specifics of DB2 on zOS packaging behavior. To be successful with packaging on DB2 on zOS it is best to familiarize yourself with this guide. </p>
        <h2>Packager Behavior when packaging re-runnable stored logic</h2>
        <ul>
            <p>There are limitations to stored logic on DB2 on zOS. You can package four types of stored logic with limited packaging method options listed below and only Trigger works as expected. If you want to package view, procedure, or function, you must use the SQLFILE&#160;packaging method. You can use flexible folders such as a folder named SQL or the metadata.properties file. </p>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Learn more about these topics here: <MadCap:xref href="../../../developer/best-practice-workflow.htm"><br />Best Practices for Developer Workflows <br /></MadCap:xref><MadCap:xref href="../../../dba/package/package-sql-scripts-deployment/configure-packaging/metadata-properties.htm">Use the metadata.properties file</MadCap:xref></p>
            <p>Stored logic that can be packaged:</p>
            <li>Trigger (SQLFILE OR STOREDLOGIC)</li>
            <li>View (SQLFILE)</li>
            <li>Procedure (SQLFILE)</li>
            <li>Function (SQLFILE)</li>
        </ul>
        <h3>Packaging restrictions for DB2 on zOS:</h3>
        <ul>
            <li><MadCap:variable name="General.LBEnterprise" /> Version 12.1.5 and earlier does not support the create or replace command.<br /></li>
            <li><b>Alter Statements</b>
                <ul>
                    <li>The <a href="https://www.ibm.com/docs/en/db2-for-zos/11?topic=statements-alter-view">Alter View</a> statement regenerates a view using an existing view definition at the current server. Alter view is primarily used during Db2 migration or when Db2 maintenance is applied. <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">To change a view definition, you must drop the view and create a new view using the <a href="https://www.ibm.com/docs/en/db2-for-zos/11?topic=statements-create-view">Create View</a> statement.</p></li>
                    <li><a href="https://www.ibm.com/docs/en/db2-for-zos/11?topic=statements-alter-procedure-sql-native">Alter procedure</a> can only be used for SQL - native</li>
                    <li><a href="https://www.ibm.com/docs/en/db2-for-zos/11?topic=statements-alter-function-compiled-sql-scalar">Alter Function</a> can only be used for compiled SQL&#160;scalar.</li>
                </ul>
            </li>
            <li>Drop/Create cannot be used because of issues connected with dependent objects:<ul><li>Views - If there is a dependent view on the view which we want to drop, then when we drop the view the dependent view is also dropped. </li><li>Procedures - <MadCap:variable name="General.LBEnterprise" /> cannot drop procedure if there is a dependent procedure.</li><li>Functions <MadCap:variable name="General.LBEnterprise" /> cannot drop function if there is a dependent procedure.</li></ul></li>
            <li>CLPPlus does not support deployment of CREATE&#160;PROCEDURE or CREATE&#160;FUNCTION&#160;on partitioned DB2 on zOS.</li>
        </ul>
        <h2>Add {{db2jcc_license_cisuz.jar}} to the application class path</h2>
        <p>There are two avenues to add {{db2jcc_license_cisuz.jar}} to your application class path.</p>
        <h3>Environment Variable route</h3>
        <p>Specify a full path to the license jar in an environment variable with the name:</p><pre>DATICAL_DB2Z_LICENSE_JAR</pre>
        <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;">In this example of a Linux setting, the path can be:<br /><pre xml:space="preserve">export DATICAL_DB2Z_LICENSE_JAR="/home/db2jcc_license_cisuz.jar"</pre><p>It is important to note that the path can be different than the example above.</p></p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;"> file to be visible for Liquibase Enterprise. When Liquibase Enterprise uses CLPPlus, and CLPPlus needs to see the DB2 license file, you need to set the CLASSPATH environmental variable to the same value as DATICAL_DB2Z_LICENSE_JAR.</p>
        <h3>License Jar Directory route</h3>
        <p>Place the license JAR file name <code>db2jcc_license_cisuz.jar </code> into a default directory located here: <code>$INSTAL_DIR/repl/lib</code></p>
        <p class="example" MadCap:autonum="&lt;b&gt;Example: &lt;/b&gt;">The complete license jar directory route will look like this:<br /><pre>$INSTAL_DIR/repl/lib/db2jcc_license_cisuz.jar</pre></p>
    </body>
</html>