<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/devops/db-release-pipelines/oracle-amazon-rds-setup/roles-perm-oracle-amazon/single-schema-oracle.html" />
        <meta name="description" content="Learn how to setup roles and permissions for Oracle on Amazon RDS in a single schema project." />
    </head>
    <body>
        <h1>Single-Schema Projects - Oracle on Amazon RDS Roles and Permissions</h1>
        <MadCap:snippetBlock src="../../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <h2>Single-Schema Project Roles and Permissions</h2>
        <p>For single-schema projects the DATICAL_USER is the managed schema account. At runtime, Datical will connect to the database as the owner of the managed schema to process and deploy code. The DATABASECHANGELOG and DATABASECHANGELOGLOCK tables used to track and manage database changes are deployed into the managed schema. The database schemas can be different across steps in the pipeline.</p>
        <p>Database permissions for Datical are managed through Roles. Three Datical Roles are needed:</p>
        <ul>
            <li>
                <p>DATICAL_SCHEMA_OWNER_ROLE - Required on all databases in the project. Grants permissions to deploy objects.</p>
            </li>
            <li>
                <p>DATICAL_PACKAGER_SCHEMA_OWNER_ROLE - Required only on the REF database in the project. Grants additional permissions required to execute Datical packaging operations.</p>
            </li>
            <li>
                <p>DATICAL_TRACK_ROLE - Required on all databases in the project. Grants permissions to manage the database change log.</p>
            </li>
        </ul>
        <h2>DATICAL_SCHEMA_OWNER_ROLE</h2>
        <p>This role gives the Datical user the required permissions on all managed database objects.</p>
        <p>
        </p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">DATICAL_ROLE_SCHEMA_OWNER
-- The following must be run as the RDS_MASTER_USER that was specified for the database.
-- SQL &gt; connect &lt;RDS_MASTER_USER&gt;

CREATE ROLE DATICAL_SCHEMA_OWNER_ROLE NOT IDENTIFIED;

GRANT CREATE SESSION TO DATICAL_SCHEMA_OWNER_ROLE;

-- Standard Object Permissions
GRANT CREATE TRIGGER TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE TABLESPACE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE SEQUENCE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE TABLE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE PROCEDURE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE SYNONYM TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE VIEW TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE TYPE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE MATERIALIZED VIEW TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE DATABASE LINK TO DATICAL_SCHEMA_OWNER_ROLE;

-- Other, less common Object Permissions
GRANT CREATE ASSEMBLY TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE OPERATOR TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE EXTERNAL JOB TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE LIBRARY TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE JOB TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE CLUSTER TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE EVALUATION CONTEXT TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE RULE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE RULE SET TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE DIMENSION TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE ROLLBACK SEGMENT TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE CUBE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE CUBE DIMENSION TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE CUBE BUILD PROCESS TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE MEASURE FOLDER TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE MINING MODEL TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE INDEXTYPE TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT CREATE PROFILE TO DATICAL_SCHEMA_OWNER_ROLE;

-- Permissions for working with EDITIONING VIEWS
-- Use ALTER &lt;user&gt; ENABLE EDITIONS on the user to enable editioning
GRANT CREATE ANY EDITION TO DATICAL_SCHEMA_OWNER_ROLE;
GRANT DROP ANY EDITION TO DATICAL_SCHEMA_OWNER_ROLE;

-- Permissions That Are Not Recommended
-- GRANT CREATE PUBLIC SYNONYM TO DATICAL_SCHEMA_OWNER_ROLE;
-- GRANT CREATE PUBLIC DATABASE LINK TO DATICAL_SCHEMA_OWNER_ROLE;

-- Permissions required to run the AUTO GENERATED PERMISSIONS feature
GRANT SELECT ANY DICTIONARY TO DATICAL_SCHEMA_OWNER_ROLE;

-- Alternatively, this should be the more restrictive set of GRANTs that are needed for AUTO GENERATED PERMISSIONS:
-- GRANT SELECT ON DBA_SYS_PRIVS TO DATICAL_SCHEMA_OWNER_ROLE;
-- GRANT SELECT ON DBA_ROLE_PRIVS TO DATICAL_SCHEMA_OWNER_ROLE;
-- GRANT SELECT ON DBA_COL_PRIVS TO DATICAL_SCHEMA_OWNER_ROLE;

-- Gather metadata (forecast/snapshot/diff)
-- If we change the code to use the "USER" instead of the "DBA" views for snapshots in single user schema owner mode, then this permission could go away.
GRANT SELECT_CATALOG_ROLE TO DATICAL_SCHEMA_OWNER_ROLE;
-- OPTIONAL
-- Permission so Datical can check if the database is 12c but is running in 11g compatible mode
-- This needs to be executed as SYSDBA
GRANT SELECT ON V_$PARAMETER TO DATICAL_SCHEMA_OWNER_ROLE;

-- The following permissions are needed to capture storage options for SNAPSHOT
-- On Oracle RDS the RDSADMIN_UTIL package must be used for grants to objects owned by SYS.
begin  
	rdsadmin.rdsadmin_util.grant_sys_object(
	p_obj_name =&gt; 'UTL_FILE',
	p_grantee =&gt; 'DATICAL_SCHEMA_OWNER_ROLE',
	p_privilege =&gt; 'EXECUTE');
	end;
	/</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>DATICAL_PACKAGER_SCHEMA_OWNER_ROLE</h2>
        <p>This role adds permissions needed to perform packaging. Use it only for the REF database (project step).</p>
        <p>DATICAL_PACKAGER_SCHEMA_OWNER
        </p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">CREATE ROLE DATICAL_PACKAGER_SCHEMA_OWNER_ROLE NOT IDENTIFIED;

-- When using the tracefileLocation=REMOTE, you will need to setup the following permissions.
-- Note: These permissions are only required on schemas running the Convert SQL Scripts command. This is only needed on the packaging / reference database.
GRANT ALTER SESSION TO DATICAL_PACKAGER_SCHEMA_OWNER_ROLE;

-- The following permissions are needed for backing up and restoring the database. This is only needed on the packaging / reference database.
GRANT EXP_FULL_DATABASE TO DATICAL_PACKAGER_SCHEMA_OWNER_ROLE;
GRANT IMP_FULL_DATABASE TO DATICAL_PACKAGER_SCHEMA_OWNER_ROLE;</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p class="HTMLPreformatted">
        </p>
        <h2>DATICAL_TRACK_ROLE</h2>
        <p>This role should be managed separately. There are some overlaps with permissions in the DATICAL_SCHEMA_OWNER_ROLE.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">DATICAL_TRACK_ROLECREATE ROLE DATICAL_TRACK_ROLE NOT IDENTIFIED;

-- will create 2 tables - DATABASECHANGELOG and DATABASECHANGELOGLOCK
-- will insert records
grant create session,
 create procedure, create sequence, create table, create trigger, create type,
 create synonym, create view,
 create cluster, create indextype, create operator
to DATICAL_TRACK_ROLE;</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>DATICAL_DATAPUMP_DIR Creation</h2>
        <p>Datical uses datapump as the default mechanism to backup and restore database schemas during Packaging. The DATICAL_DATAPUMP_DIR is only needed on the REF databases. Note that Oracle RDS automatically sets the filesystem path for the directory object.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">DATICAL_DATAPUMP_DIR
connect &lt;RDS_MASTER_USER&gt;
-- Create the DATICAL_DATAPUMP_DIR
EXEC rdsadmin.rdsadmin_util.create_directory(p_directory_name =&gt; 'DATICAL_DATA_PUMP_DIR');
</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Granting Roles and Permissions</h2>
        <p>Grant the roles to the DATICAL_USER and DATICAL_TRACKING accounts.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">-- Permissions for REF databases.
-- Modify this to set the appropriate account name for your SchemaOwner account.
GRANT DATICAL_SCHEMA_OWNER_ROLE TO &lt;replace_SchemaOwner&gt;;
GRANT DATICAL_PACKAGER_SCHEMA_OWNER ROLE to &lt;replace_SchemaOwner&gt;:

-- Directory permissions cannot be granted by a ROLE because the directory is checked through the utl_file.file_exists function.
-- Datapump backup directory.
GRANT READ, WRITE ON DIRECTORY DATICAL_DATA_PUMP_DIR TO &lt;replace_SchemaOwner&gt;;
-- Access to trace files.
GRANT READ, WRITE on DIRECTORY BDUMP to &lt;replace_SchemaOwner&gt;;

GRANT DATICAL_TRACK_ROLE TO &lt;replace_SchemaOwner&gt;;

-- Unlimited tablespace access
-- GRANT UNLIMITED TABLESPACE TO &lt;replace_SchemaOwner&gt;;
 -- –or–
-- Grant access to one or more specified tablespaces
-- ALTER USER &lt;replace_SchemaOwner&gt; QUOTA UNLIMITED ON &lt;replace_tablespace&gt;;</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">non-REF Database Roles and Permissions
-- Permissions for non-REF databases.
-- Modify this to set the appropriate account name for your SchemaOwner account.
GRANT DATICAL_SCHEMA_OWNER_ROLE TO &lt;replace_SchemaOwner&gt;;
GRANT DATICAL_TRACK_ROLE TO &lt;replace_SchemaOwner&gt;;

-- Unlimited tablespace access
-- GRANT UNLIMITED TABLESPACE TO &lt;replace_SchemaOwner&gt;;
 -- –or–
-- Grant access to one or more specified tablespaces
-- ALTER USER &lt;replace_SchemaOwner&gt; QUOTA UNLIMITED ON &lt;replace_tablespace&gt;;</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The roles granted to DATICAL_USER and DATICAL_TRACKING must be DEFAULT roles. Be sure to validate that the accounts have all the required DEFAULT roles.</p>
        <MadCap:codeSnippet>
            <MadCap:codeSnippetCopyButton />
            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve">Validate Default Roles-- Verify permissions.
-- Modify this to set the appropriate account name for your DATICAL_USER and DATICAL_TRACKING accounts.

select grantee, granted_role, default_role from dba_role_privs where grantee like 'DATICAL%' order by 1;

-- If DEFAULT_ROLE is not YES. Execute the following.
alter user DATICAL_USER default role DATICAL_ROLE;
alter user DATICAL_USER default role DATICAL_PACKAGER_ROLE; /* REF database only */
alter user DATICAL_TRACKING default role DATICAL_TRACK_ROLE;

-- Verify READ/WRITE permissions exist on the DATICAL_DATA_PUMP_DIR and BDUMP directories (REF database only).
select table_name, privilege from DBA_TAB_PRIVS where grantee = 'DATICAL_USER';</MadCap:codeSnippetBody>
        </MadCap:codeSnippet>
        <h2>Packaging Requirement for Exclusive Connection</h2>
        <p>Packaging requires that no other schema-owner users are connected to the database.</p>
        <ul>
            <li>
                <p>Deployment Packager checks for connections to the REF database at the beginning of a packaging operation. Packaging stops and reports an error if there are other active connections.</p>
            </li>
            <li>
                <p>During packaging, if a schema-owner user attempts to connect to the database, packager warns and may stop.</p>
            </li>
        </ul>
        <p>Deployment packager drops schema during packaging. If it is running as a schema-owner user, other schema-owner users prevent it from dropping schema as needed.</p>
    </body>
</html>