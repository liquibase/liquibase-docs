<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/devops/db-release-pipelines/db2-on-luw-database-setup/roles-perm-db2-luw.html" />
        <meta name="description" content="Learn how to set up roles and permissions for Enterprise on DB2 LUW." />
    </head>
    <body>
        <h1>Roles and Permissions for <MadCap:variable name="General.LBEnterprise" /> on DB2 LUW</h1>
        <p>
            <MadCap:snippetText src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        </p>
        <p>See <a href="../overview-db-used/users-roles-passwords.htm">Database Users, Roles, and Passwords</a> for a general discussion of database setup for <MadCap:variable name="General.LBEnterprise" />.</p>
        <h2>Prerequisite</h2>
        <p>DB2 managed databases should be configured for Oracle compatibility mode before you can use <MadCap:variable name="General.LBEnterprise" /> to forecast and deploy stored logic objects and/or to use the Stored Logic Validity Check feature. See <a class="external-link" href="https://www.ibm.com/support/knowledgecenter/SSEPGG_10.5.0/com.ibm.db2.luw.apdv.porting.doc/doc/t0054729.html" rel="nofollow">IBM documentation</a>.<br /><br />$ su - db2inst1<br />$ db2start<br />$ db2set DB2_COMPATIBILITY_VECTOR=ORA<br />$ db2set DB2_DEFERRED_PREPARE_SEMANTICS=YES<br />$ db2stop<br />$ db2start</p>
        <h2>Role-Based Privileges for Service User</h2>
        <p><MadCap:variable name="General.LBEnterprise" /> does not require special privileges above and beyond what is required to create, alter, and drop the most common database object types that support your database applications. There are two common implementation patterns for configuring <MadCap:variable name="General.LBEnterprise" /> access schemes in DB2: granting privileges to the <MadCap:variable name="General.LBEnterprise" /> Role and granting privileges to a single <MadCap:variable name="General.LBEnterprise" /> User.</p>
        <h3>
			Granting Privileges to a <MadCap:variable name="General.LBEnterprise" /> Role</h3>
        <p>Granting privileges to a <MadCap:variable name="General.LBEnterprise" /> Role is typically chosen in environments where individual team members will use unique credentials to access the database through <MadCap:variable name="General.LBEnterprise" />. This simplifies the privilege management process by centralizing where GRANTS &amp; REVOKES are performed. The role is then assigned to the user accounts that require database access with <MadCap:variable name="General.LBEnterprise" />.</p>
        <h3>
			Granting Privileges to a Dedicated <MadCap:variable name="General.LBEnterprise" /> User (Service User)
		</h3>
        <p>Granting privileges to a dedicated <MadCap:variable name="General.LBEnterprise" /> User allows an organization to drastically reduce the number of individuals with access to the database password. Because the database password is encoded in <MadCap:variable name="General.LBEnterprise" />, an administrator may create <MadCap:variable name="General.LBEnterprise" /> projects and share them with <MadCap:variable name="General.LBEnterprise" /> users. The <MadCap:variable name="General.LBEnterprise" /> users can then perform database change tasks without having access to the database password. We strongly recommend to use runtime credentials because it is more secure than stored credentials (due to the possibility of the stored password being decoded)</p>
        <h2>Privileges for Managed Databases</h2>
        <p>To validate and automate database deployments <MadCap:variable name="General.LBEnterprise" /> needs to be able to connect to a database and to perform routine CREATE, ALTER, &amp; DROP statements in the appropriate schema.</p>
        <ul>
            <li><strong>Database Privileges</strong>
                <ul>
                    <li>CONNECT
						<ul><li>Grants the authority to access the database.</li></ul></li>
                    <li>SQLADM
						<ul><li>Grants <span style="color: rgb(50,50,50);">the authority required to monitor and tune SQL statements. (Recommended for roles on the reference database to report on active connections that cause the backup and restore operations to fail).</li></ul></li>
                </ul>
            </li>
            <li><strong>Schema Privileges</strong> <em>(use "<strong>with grant option</strong>" if user/role needs to grant permissions to other users/roles)</em></li>
        </ul>
        <ul>
            <li>
                <ul>
                    <li>CREATEIN
						<ul><li>Grants the privilege to create objects in the schema. Other authorities or privileges required to create the object (such as CREATETAB) are still required. The owner of an explicitly created schema automatically receives CREATEIN privilege. An implicitly created schema has CREATEIN privilege automatically granted to PUBLIC.</li></ul></li>
                    <li>ALTERIN
						<ul><li>Grants the privilege to alter or comment on all objects in the schema. The owner of an explicitly created schema automatically receives ALTERIN privilege.</li></ul></li>
                    <li>DROPIN
						<ul><li>Grants the privilege to drop all objects in the schema. The owner of an explicitly created schema automatically receives DROPIN privilege.</li></ul></li>
                    <li>WITH GRANT OPTION (so the user can grant permissions to other users/roles)
						<ul><li>Allows the specified&#160;<em>authorization-name</em>s to GRANT privileges to others.
								<ul><li>Schema level CREATEIN, ALTERIN, DROPIN With Grant Option must be granted to the user for the schema. This will ensure the user has the privilege to grant permissions for any <strong>newly created objects</strong>.</li><li><strong>To manage permissions for existing objects</strong>, the following privileges must be granted (<a class="external-link" href="https://www.ibm.com/support/knowledgecenter/en/SSEPGG_9.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000966.html" rel="nofollow">https://www.ibm.com/support/knowledgecenter/en/SSEPGG_9.5.0/com.ibm.db2.luw.sql.ref.doc/doc/r0000966.html</a>)
										<ul><li>Object level CREATEIN, ALTERIN, DROPIN With Grant Option must be granted to the user for the appropriate objects on the database, or</li><li>Object level CONTROL privilege must be granted to the user for the appropriate objects on the database</li></ul></li></ul></li></ul></li>
                </ul>
            </li>
            <li><strong>Data Privileges</strong>
                <ul>
                    <li>DATAACCESS (<a class="external-link" href="https://www.ibm.com/support/knowledgecenter/en/SSEPGG_11.1.0/com.ibm.db2.luw.admin.sec.doc/doc/c0053934.html" rel="nofollow">https://www.ibm.com/support/knowledgecenter/en/SSEPGG_11.1.0/com.ibm.db2.luw.admin.sec.doc/doc/c0053934.html</a>)
						<ul><li>Access and update data in user tables, views, and materialized query tables in a DB2 subsystem</li><li>Execute plans, packages, functions, and procedures.</li><li>Select privilege on all system catalog tables and views.</li></ul></li>
                </ul>
            </li>
            <li><strong>Tablespace Access</strong>
                <ul>
                    <li>GRANT USE OF TABLESPACE &lt;tablespace_name&gt; TO ROLE &lt;role_name&gt;
						<ul><li>Provides access to the desired tablespace</li></ul></li>
                </ul>
            </li>
        </ul>
        <h2>Privileges for the REF Database</h2>
        <p>You must have SYSADM, SYSCTRL, or SYSMAINT authority to use the backup utility which is required by the <MadCap:variable name="General.LBEnterprise" /> Packager.</p>
        <p>This permission is only needed on user accounts involved in packaging changes in the REF databases. It is not needed in any of the other databases in the environment.</p>
        <p>Steps to setup DB2 on Linux user with SYSADM authority:
        </p>
        <ol>
            <li>Create user, e.g., datical_user using these steps:
				<ol><li>Log in as root to the computer with IDM DB installed. To create a local user (linux limit up to and including 8 chars), at a command prompt, type the following command:<br /><span style="color: rgb(255,102,0);"><code>useradd DATDB_USER</code><br /><span style="color: rgb(255,102,0);"><code>passwd DATDB_USER</code></li></ol></li>
            <li>
                <p>Identify the SYSADM group by typing the following command:<br /><span style="color: rgb(255,102,0);"><code>db2 get dbm cfg | grep group</code></p>
                <ol>
                    <li>
                        <p>Output may look like this: <br /><img class="confluence-embedded-image" width="700" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896566780/image2019-10-14_20-21-56.png?version=1&amp;modificationDate=1571103882877&amp;cacheVersion=1&amp;api=v2&amp;width=700&amp;height=89" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896566780/image2019-10-14_20-21-56.png?version=1&amp;modificationDate=1571103882877&amp;cacheVersion=1&amp;api=v2&amp;width=1066&amp;height=136 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896566780/image2019-10-14_20-21-56.png?version=1&amp;modificationDate=1571103882877&amp;cacheVersion=1&amp;api=v2&amp;width=700&amp;height=89 1x" /></p>
                    </li>
                    <li>
                        <p>Notice "db2iadm1" is listed as SYSADM group. You need to add user "DATDB_USER" to this group at the OS level (in Linux)</p>
                    </li>
                    <li>
                        <p>Log in as root to the computer with IBM DB2 installed.<br /><span style="color: rgb(255,102,0);"><code>usermod -a -G db2iadm1 DATDB_USER</code></p>
                    </li>
                </ol>
            </li>
        </ol>
        <h2>Permissions needed to perform GRANTS</h2>
        <p>To perform grants - if you don't use the "WITH GRANT OPTIONS" on CREATEIN/ALTERIN/DROPIN or grant CONTROL, you will also need to grant ACCESSCTRL as documented in <a class="external-link" href="https://www.ibm.com/support/knowledgecenter/en/SSEPGG_10.1.0/com.ibm.db2.luw.admin.sec.doc/doc/c0053933.html" rel="nofollow">https://www.ibm.com/support/knowledgecenter/en/SSEPGG_10.1.0/com.ibm.db2.luw.admin.sec.doc/doc/c0053933.html</a>.</p>
        <h2>Example: Creating a Role to Contain Privileges</h2>
        <p>In the following example you create the DATDB_ROLE, and grant privileges to it, then grant the DATDB_ROLE to user DATDB_USER.</p><pre>-- Create the role 'DATDB_ROLE' and grant the 'CONNECT' privilege for the DB to be managed
CREATE ROLE DATDB_ROLE
GRANT CONNECT ON DATABASE TO ROLE DATDB_ROLE
-- If the database is a reference database used in packaging, grant the 'SQLADM' privilege to monitor active connections during backup and retore
GRANT SQLADM ON DATABASE TO ROLE DATDB_ROLE

-- Grant 'ALTERIN','CREATEIN' &amp; 'DROPIN' privileges to 'DATDB_ROLE' for the desired schema
--
-- "with grant option" can be optionally added to the following statements if the role needs
-- to grant permissions to other users/roles
GRANT ALTERIN ON SCHEMA MYAPPSCHEMA TO ROLE DATDB_ROLE WITH GRANT OPTION
GRANT CREATEIN ON SCHEMA MYAPPSCHEMA TO ROLE DATDB_ROLE WITH GRANT OPTION
GRANT DROPIN ON SCHEMA MYAPPSCHEMA TO ROLE DATDB_ROLE WITH GRANT OPTION
-- To be able to grant permissions to existing objects, you will need to either
--   Provide object level CREATEIN, ALTERIN, DROPIN With Grant Option privileges, or
--   Provide object level CONTROL privilege
-- to the DATDB_ROLE
GRANT ALTERIN, CREATEIN, DROPIN ON TABLE1 TO ROLE DATDB_ROLE WITH GRANT OPTION
--GRANT CONTROL ON TABLE1 TO ROLE DATDB_ROLE WITH GRANT OPTION
-- Grant data access on a database to a specific role
GRANT DATAACCESS ON DATABASE TO ROLE DATDB_ROLE

-- Grant tablespace access to role
GRANT USE OF TABLESPACE &lt;tablespace_name&gt; TO ROLE DATDB_ROLE

-- Grant the role 'DATDB_ROLE' to user 'DATDB_USER'
GRANT ROLE DATDB_ROLE TO USER DATDB_USER</pre>
        <h2>Example: Granting Privileges Directly to a User</h2>
        <p>In this example you create user DATDB_USER and grant privileges directly to the user.</p><pre>-- Grant the 'CONNECT' privilege for the DB to be managed
GRANT CONNECT ON DATABASE TO USER DATDB_USER

-- Grant 'ALTERIN','CREATEIN' &amp; 'DROPIN' privileges to 'DATDB_ROLE' for the desired schema
--
-- "with grant option" can be optionally added to the following statements if the user needs
-- to grant permissions to other users/roles
GRANT ALTERIN ON SCHEMA MYAPPSCHEMA TO USER DATDB_USER WITH GRANT OPTION
GRANT CREATEIN ON SCHEMA MYAPPSCHEMA TO USER DATDB_USER WITH GRANT OPTION
GRANT DROPIN ON SCHEMA MYAPPSCHEMA TO USER DATDB_USER WITH GRANT OPTION
-- To be able to grant permissions to existing objects, you will need to either
--   Provide object level CREATEIN, ALTERIN, DROPIN With Grant Option privileges, or
--   Provide object level CONTROL privilege
-- to the DATDB_USER
GRANT ALTERIN, CREATEIN, DROPIN ON TABLE1 TO ROLE DATDB_USER WITH GRANT OPTION
--GRANT CONTROL ON TABLE1 TO ROLE DATDB_USER WITH GRANT OPTION
-- Grant data access on a database to a specific role
GRANT DATAACCESS ON DATABASE TO USER DATDB_USER

-- Grant tablespace access to role
GRANT USE OF TABLESPACE &lt;tablespace_name&gt; TO USER DATDB_USER</pre>
        <h2>Example: Viewing User Permissions</h2>
        <p>The following example shows two ways to view privileges for user DATDB_USER.</p><pre>-- Retrieve database permissions for user DATDB_USER
select * from SYSCAT.DBAUTH  where GRANTEE = 'DATDB_USER'
-- Retrieve privilege granted to DATDB_USER along with the object name, schema, and type
SELECT * FROM SYSIBMADM.PRIVILEGES WHERE AUTHIDTYPE = 'U' AND AUTHID = 'DATDB_USER'</pre>
    </body>
</html>