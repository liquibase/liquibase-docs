<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-how-tos/use-credentials-cyber-ark.html" />
        <meta name="description" content="This document describes how to use credentials from CyberArk." />
    </head>
    <body>
        <h1>How To: Use credentials from CyberArk
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <p>Some of our customers use CyberArk as their enterprise password store. <MadCap:variable name="General.LBEnterprise" />'s "hammer" commands are able to read credentials from environment variables so we need a way to get the credentials out of CyberArk and into the environment so that <MadCap:variable name="General.LBEnterprise" /> can use them.</p>
        <p>In this example, we will assume that the customer is storing database credentials (username and password) in CyberArk. We know the database name, but need the userid and password to access that database.</p>
        <h2 id="HowTo:UsecredentialsfromCyberArk-SettingupanaccountinCyberArk">Setting up an account in CyberArk</h2>
        <ol>
            <li>In CyberArk UI, on the Accounts page click "Add Account"<br /><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/1credentials-cyberark.png" /></li>
            <li>Choose "Database"<br /><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/2credentials-cyberark.png" /></li>
            <li>We'll use Oracle for this example<br /><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/3credentials-cyberark.png" /></li>
            <li>Next, choose the safe you want to store the creds in. We will store them in the "test" safe.<br /><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/4credentials-cyberark.png" /></li>
            <li>Fill out the Username, Password, and Confirm fields.<br />Note that I also added the string "gambit_ora_ref" in the Address field although it's optional. This is for visibility in the list view which we'll see in just a minute<br />Also select the option to "Customize Account Name" so that you can assign a meaningful name to this account. I set it to "gambit_ora_ref"<br /><a href="https://datical-cs.atlassian.net/wiki/download/attachments/1242824734/Screen Shot 2020-04-22 at 12.47.12 PM.png?version=1&amp;modificationDate=1588094755684&amp;cacheVersion=1&amp;api=v2"><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/6credentials-cyberark.png" /></a></li>
            <li>Scroll down and fill in the database name. Mine is "REF_DB" since that is what I called the Oracle database in the pipeline. It is not used as part of this API reference though.<br /><a href="https://datical-cs.atlassian.net/wiki/download/attachments/1242824734/Screen Shot 2020-04-22 at 12.50.23 PM.png?version=1&amp;modificationDate=1588094755530&amp;cacheVersion=1&amp;api=v2"><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/8credentials-cyberark.png" /></a></li>
            <li>Click "ADD" and you should get a success message: (If you go back and edit you will see save vs add button)<br /><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/9credentials-cyberark.png" /></li>
            <li>When the account shows up in the list view you're done setting up the account<br /><a href="https://datical-cs.atlassian.net/wiki/download/attachments/1242824734/Screen Shot 2020-04-22 at 12.51.57 PM.png?version=1&amp;modificationDate=1588094755384&amp;cacheVersion=1&amp;api=v2"><img src="../../../Z_Resources/Images/enterprise/credential-cyberark/11credentials-cyberark.png" /></a></li>
        </ol>
        <h2 id="HowTo:UsecredentialsfromCyberArk-RetrievingcredentialsfromCyberArkviaaRESTcall">Retrieving credentials from CyberArk via a REST call</h2>
        <ol>
            <li>There are a few values that are going to be needed for each API call<br /><ol><li>BaseURL</li><li>Port number (e.g., 8080)</li><li>AppID (e.g., Datical)</li><li>SafeName is Test (This is what you chose in step 4 above)</li><li><p>Folder is root</p></li></ol></li>
            <li>Create an http GET call using the above values and the following format template:<br /><code>{{BaseURL}}:{{Port}}/AIMWebService/api/Accounts?AppID={{AppID}}&amp;Safe={{SafeName}}&amp;Folder={{Folder}}&amp;Object={{ObjectName}}</code><br /> API is documented here: <a class="external-link" href="https://documenter.getpostman.com/view/998920/RzZ9Gz1U?bs=true&amp;version=latest#97bada25-0588-4660-9fc3-bae9f1087596" rel="nofollow">https://documenter.getpostman.com/view/998920/RzZ9Gz1U?bs=true&amp;version=latest#97bada25-0588-4660-9fc3-bae9f1087596</a></li>
            <li>In the above template, <code>{{ObjectName}}</code> will be the value you set for the "Account Name" in step 5 of <a class="unresolved" href="#">648643282</a> above</li>
            <li>My resulting URL for this example will look like this:<br /><code>http://services-uswest.skytap.com:8080/AIMWebService/api/Accounts?AppID=Datical&amp;Safe=Test&amp;Folder=root&amp;Object=gambit_ora_ref</code></li>
            <li>
                <p>When I drop that in a browser address bar the server will respond with the following json object:</p><b>JSON Response from CyberArk REST call</b><pre>{
"Content":"password",
"CreationMethod":"PVWA",
"Address":"gambit_ora_ref",
"Safe":"Test",
"UserName":"GAMBITCARD_REF_DB",
"Database":"REF_DB",
"PolicyID":"Oracle",
"DeviceType":"Database",
"Name":"gambit_ora_ref",
"Folder":"Root",
"PasswordChangeInProcess":"False"}</pre>
            </li>
            <li>The password is returned in the "Content" attribute</li>
            <li>Use the instructions in <a href="use-credentials-cyber-ark.htm">Providing Runtime Credentials</a> to set the necessary runtime database credentials.</li>
            <li>
                <p>Here is an example Jenkinsfile script that I used to incorporate the credentials (lines 32-36). (I used JsonSlurper to parse the JSON response from CyberArk)</p><b class="code-title">Jenkinsfile</b><pre>import groovy.json.JsonSlurper
node {
    try {
        // Environment Variables
        env.appname = "GambitCard"env.scmCreds = "e0de9ac3-3636-48d7-b95e-35443ab32b53"env.scmType = "git"env.ddbURL = "ssh://jenkins@win-20e107kb4tn:7999/gc/gambitcard.git"env.srcURL = "ssh://jenkins@win-20e107kb4tn:7999/gc/gambitcardsql.git"// Pad env.BUILD_NUMBER so fetching LATEST will work properly on Artifactory and Xebia XLD
        // Requires https://wiki.jenkins.io/display/JENKINS/Permissive+Script+Security+Plugin
        env.BUILD_NUMBER = "${env.BUILD_NUMBER}".padLeft(4,'0')
        //MOVED TO JENKINS NODE SETTINGS
        //env.DATICAL_CLIENT_SECRET="123abc"//env.DATICAL_SERVER="hostname"//env.curlHome = "C:\\apps\\Git\\mingw64\\bin"//env.datHome = "C:\\apps\\DaticalDB\\repl"//env.mvnHome = "C:\\apps\\apache-maven-3.3.9\\bin"//env.ucdHome = "C:\\apps\\ibm-ucd-agent\\opt\\udclient"//env.ZipHome = "C:\\apps\\7-Zip"// Print Environment Variables
        //echo sh(returnStdout: true, script: 'env')
        // String Definitions
        //def appname = "${env.appname}"deleteDir()
        stage('Get CYBERARKCREDS') {
        URL apiURL = "http://services-uscentral.skytap.com:14200/AIMWebService/api/Accounts?AppID=Datical&amp;Safe=Test&amp;Folder=root&amp;Object=gambit_ora_ref".toURL()
        Map myjson = new JsonSlurper().parse(apiURL.newReader())
        env.DDB_USER = myjson.UserName
        env.DDB_PASS = myjson.Content

        println("${env.DDB_USER}")
    }
    stage('Source Checkout') {
        if (env.scmType == 'git') {
            parallel (
                CheckoutDDB: {
                    checkout([$class: "GitSCM", branches: [[name: "*/master"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "ddb"], [$class: "LocalBranch", localBranch: "master"], [$class: "UserIdentity", email: "jenkins@company.com", name: "jenkins"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${env.scmCreds}", url: "${env.ddbURL}"]]])
                },
                CheckoutAPP: {
                    checkout([$class: "GitSCM", branches: [[name: "*/${env.pipeline}"]], doGenerateSubmoduleConfigurations: false, extensions: [[$class: "RelativeTargetDirectory", relativeTargetDir: "src"], [$class: "LocalBranch", localBranch: "${env.pipeline}"], [$class: "UserIdentity", email: "jenkins@company.com", name: "jenkins"]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${env.scmCreds}", url: "${env.srcURL}"]]])
                }
            )
        }
        if (env.scmType == 'svn') {
            parallel (
                CheckoutDDB: {	
                    checkout changelog: false, poll: false, scm: [$class: "SubversionSCM", additionalCredentials: [], excludedCommitMessages: "", excludedRegions: "", excludedRevprop: "", excludedUsers: "", filterChangelog: false, ignoreDirPropChanges: false, includedRegions: "", locations: [[credentialsId: "7545c833-66a0-4386-8a16-9d8a51c98449", depthOption: "infinity", ignoreExternalsOption: true, local: "ddb", remote: "${env.ddbURL}"], [credentialsId: "7545c833-66a0-4386-8a16-9d8a51c98449", depthOption: "infinity", ignoreExternalsOption: true, local: "ddb", remote: "${env.ddbURL}"]], workspaceUpdater: [$class: "UpdateUpdater"]]
},
                CheckoutAPP: {
                    checkout changelog: false, poll: false, scm: [$class: "SubversionSCM", additionalCredentials: [], excludedCommitMessages: "", excludedRegions: "", excludedRevprop: "", excludedUsers: "", filterChangelog: false, ignoreDirPropChanges: false, includedRegions: "", locations: [[credentialsId: "7545c833-66a0-4386-8a16-9d8a51c98449", depthOption: "infinity", ignoreExternalsOption: true, local: "src", remote: "${env.srcURL}"], [credentialsId: "7545c833-66a0-4386-8a16-9d8a51c98449", depthOption: "infinity", ignoreExternalsOption: true, local: "src", remote: "${env.srcURL}"]], workspaceUpdater: [$class: "UpdateUpdater"]]
                }
            )
        }
    }
    stage('PackageDB') {
        // Set Upstream Branches for Git
        if (env.scmType == 'git') {
            bat 'cd src &amp;&amp; git branch --set-upstream-to=origin/%pipeline% %pipeline%'
            bat 'cd ddb &amp;&amp; git branch --set-upstream-to=origin/main main'
        }
        // Show Hammer Version Details
        //bat 'hammer.bat show version'
        // Set Version
        if (env.pipeline == 'pipeline1') {
            env.version = "2.0.${env.BUILD_NUMBER}"}
        if (env.pipeline == 'pipeline2') {
            env.version = "3.0.${env.BUILD_NUMBER}"}
        if (env.pipeline == 'hotfix') {
            //ASSUME YOU ARE HOTFIXING CURRENT VERSION
            env.version = "1.0.${env.BUILD_NUMBER}_HOTFIX"}	
        //Check creds
        println('USER')
        println("${env.DDB_USER}")
        // Invoke Datical Database Code Packager
        //withCredentials([usernamePassword(credentialsId: 'DATICAL5', usernameVariable: 'DATICAL_USERNAME', passwordVariable: 'DATICAL_PASSWORD')]) {
            //bat 'cd ddb &amp;&amp; hammer.bat groovy deployPackager.groovy %pipeline% scm=true labels=%BUILD_TAG%'
            bat 'cd ddb &amp;&amp; hammer.bat groovy deployPackager.groovy pipeline=%pipeline% scm=true labels=%version%'
        //}	
        // Create Datical Artifact
        bat 'cd ddb &amp;&amp; 7za.exe a -tzip -x!.git -x!.svn -x!Logs -x!Reports -x!Snapshots -x!Profiles -x!.classpath -x!.gitignore -x!.metadata -x!.project -x!.reporttemplates -x!daticaldb.log -x!deployPackager.properties -x!svn-ignore.properties ..\\%appname%DB.zip'
    }
    stage('BuildApp') {
        bat 'sed -i s/VERSION_NO/%version%/g .\\src\\app_code\\src\\main\\webapp\\index.jsp'
        bat 'cd src\\app_code &amp;&amp; mvn package'
        bat 'move src\\app_code\\target\\%appname%-1.0-SNAPSHOT.war .\\%appname%.war'
    }
    stage('Package Artifact') {
        if (env.CDTool != 'UCD') {
            // Artifactory Configuration
            def server = Artifactory.server 'art-001'
            def buildInfo = Artifactory.newBuildInfo()
            // Set custom build name and number.
            buildInfo.setName "${env.appname}"buildInfo.setNumber "${env.version}"def uploadSpec = """ {
                "files": [
                    {
                        "pattern": "*zip",
                        "target": "${env.appname}/${env.appname}DB-${env.version}.zip",
                        "props": "pipeline=${env.pipeline}"},
                    {
                        "pattern": "*war",
                        "target": "${env.appname}/${env.appname}-${env.version}.war",
                        "props": "pipeline=${env.pipeline}"}
                ]
            }"""// Upload to Artifactory.
            server.upload spec: uploadSpec, buildInfo: buildInfo
            // Publish build info.
            server.publishBuildInfo buildInfo
            if (env.CDTool == 'XLD') {
                // used to create and publish the artifacts in XLD
                xldCreatePackage artifactsPath: ".", manifestPath:"src/deployit-manifest.xml", darPath: '${appname}-${version}.dar'
                xldPublishPackage serverCredentials: 'Admin', darPath: '${appname}-${version}.dar'
                //xldCreatePackage artifactsPath: ".", manifestPath:"src/sql_code/deployit-manifest_ddb.xml", darPath: '${appname}_ddb-${version}.dar'
                //xldPublishPackage serverCredentials: 'Admin', darPath: '${appname}_ddb-${version}.dar'
            }
        }
        if (env.CDTool == 'UCD') {
            // Add UCD Component Version
            bat 'udclient.cmd -username admin -password password -weburl https://win-20e107kb4tn:8444 createVersion -component %appname%-DB -name %version%'
            bat 'udclient.cmd -username admin -password password -weburl https://win-20e107kb4tn:8444 createVersion -component %appname%-WAR -name %version%'
            // Add Files to new Component Version
            bat 'udclient.cmd -username admin -password password -weburl https://win-20e107kb4tn:8444 addVersionFiles -component %appname%-DB -version %version% -base %WORKSPACE% -include **/%appname%*.zip'
            bat 'udclient.cmd -username admin -password password -weburl https://win-20e107kb4tn:8444 addVersionFiles -component %appname%-WAR -version %version% -base %WORKSPACE% -include **/%appname%*.war'	
        }
    }
    if (env.pipeline != 'hotfix') {
        stage('Deploy To DEV') {
            env.deployenv = "DEV"parallel(
                DeployApp: {
                    if (env.pipeline == 'pipeline1') {
                        env.deployenv = "DEV"}
                    if (env.pipeline == 'pipeline2') {
                        env.deployenv = "DEV2"}
                    build job: String.valueOf(appname) + '-DEP',
                    parameters: [
                        string(name: 'pipeline', value: String.valueOf("${env.pipeline}")),
                        string(name: 'labels', value: String.valueOf("${env.pipeline}")),
                        string(name: 'deployenv', value: String.valueOf("${env.deployenv}")),
                       string(name: 'deployver', value: String.valueOf("${env.version}")),
                        string(name: 'CDTool', value: String.valueOf("${env.CDTool}"))
                    ]	
                },
                DeployDB: {
                    //xldDeploy serverCredentials: 'Admin', environmentId: 'Environments/${deployenv} ENV', packageId: 'Applications/${env.appname}_ddb/${version}'
                    //Refresh Pipeline for DMC Status
                    //bat 'cd ddb &amp;&amp; hammer.bat status'
                    //withCredentials([usernamePassword(credentialsId: 'DATICAL5', usernameVariable: 'DATICAL_USERNAME', passwordVariable: 'DATICAL_PASSWORD')]) {
                        //	bat 'cd ddb &amp;&amp; hammer.bat status %appname%'
                    //}
                }
            )
        }
        stage('Promotion Approval') {
            echo 'wait for approval'
        }
            input 'Continue to Deploy TEST'
            stage('Deploy To TEST') {
                env.deployenv = "TEST"parallel(
                    DeployApp: {
                        if (env.pipeline == 'pipeline1') {
                            env.deployenv = "TEST"}
                        if (env.pipeline == 'pipeline2') {
                            env.deployenv = "TEST2"}
                        build job: String.valueOf(appname) + '-DEP',
                        parameters: [
                            string(name: 'pipeline', value: String.valueOf("${env.pipeline}")),
                            string(name: 'labels', value: String.valueOf("${env.pipeline}")),
                            string(name: 'deployenv', value: String.valueOf("${env.deployenv}")),
                            string(name: 'deployver', value: String.valueOf("${env.version}")),
                            string(name: 'CDTool', value: String.valueOf("${env.CDTool}"))
                        ]	
                    },

                    DeployDB: {
                        //xldDeploy serverCredentials: 'Admin', environmentId: 'Environments/${deployenv} ENV', packageId: 'Applications/${env.appname}_ddb/${version}'
                        sleep 15
                    }
                )
            }
        }
        stage('Promotion Approval') {
            echo 'wait for approval'
        }
        input 'Continue to Deploy PROD'
        stage('Deploy To PROD') {
            env.deployenv = "PROD"parallel(
                DeployApp: {
                    build job: String.valueOf(appname) + '-DEP',
                    parameters: [
                        string(name: 'pipeline', value: String.valueOf("${env.pipeline}")),
                        string(name: 'labels', value: String.valueOf("${env.pipeline}")),
                        string(name: 'deployenv', value: String.valueOf("${env.deployenv}")),
                        string(name: 'deployver', value: String.valueOf("${env.version}")),
                        string(name: 'CDTool', value: String.valueOf("${env.CDTool}"))
                    ]
                },
                DeployDB: {
                    if (env.pipeline == 'hotfix') {
                        //withCredentials([usernamePassword(credentialsId: 'DATICAL5', usernameVariable: 'DATICAL_USERNAME', passwordVariable: 'DATICAL_PASSWORD')]) {
                            //bat 'cd ddb\\%appname% &amp;&amp; hammer.bat status %appname%'
                        //}
                    }
                }
            )
        }
    } catch (e) {
        // If there was an exception thrown, the build failed
        currentBuild.result = "FAILED"throw e
    } finally {
        // Success or failure, always send notifications
        notifyBuild(currentBuild.result)
        archiveArtifacts allowEmptyArchive: true, artifacts: '**/ddb/**/Reports/**'
    }
}
def notifyBuild(String buildStatus = 'STARTED') {
    // build status of null means successful
    buildStatus = buildStatus ?: 'SUCCESSFUL'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"//def summary = "${subject} (${env.BUILD_URL})"def summary = "${subject} (http://win-20e107kb4tn:8080/blue/organizations/jenkins/${env.JOB_NAME}/detail/${env.JOB_NAME}/${env.BUILD_NUMBER}/pipeline)"// Send notifications
    mail bcc: '', body: summary, cc: '', from: 'jenkins@company.local', replyTo: '', subject: subject, to: 'dev@company.local'
}</pre>
            </li>
        </ol>
        <h2 id="HowTo:UsecredentialsfromCyberArk-Relatedarticles">Related articles</h2><strong class="content-label-header">Content by label</strong>
    </body>
</html>