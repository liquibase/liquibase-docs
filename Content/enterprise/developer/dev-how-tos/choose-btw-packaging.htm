<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-how-tos/choose-btw-packaging.html" />
        <meta name="description" content="Learn the difference between CONVERT (ddl) and DDL_DIRECT (ddl_direct) packaging methods and how to choose between them." />
    </head>
    <body>
        <h1>How To: Choose Between CONVERT (ddl) and DDL_DIRECT (ddl_direct) Packaging Methods
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <h2 id="HowTo:ChooseBetweenCONVERT(ddl)andDDL_DIRECT(ddl_direct)PackagingMethods-TheDifferenceBetweenCONVERT(ddl)andDDL_DIRECT(ddl_direct)Packaging">The Difference Between CONVERT (ddl) and DDL_DIRECT (ddl_direct) Packaging</h2>
        <p>The CONVERT and DDL_DIRECT package methods work very differently. The CONVERT packaging method does not run the actual sql script during deploy. Instead, it creates an XML change set by comparing a "before" snapshot to the "after" snapshot and generating the change set based upon the difference between the two snapshots. In contrast, the DDL_DIRECT packaging method runs the actual script using the native database command line tools.</p>
        <p>For additional information regarding the CONVERT and DDL_DIRECT (or DIRECT) packaging methods, see the following pages:</p>
        <ul>
            <li><a href="choose-btw-packaging.htm">Writing SQL Scripts for <MadCap:variable name="General.LBEnterprise" /></a>
            </li>
            <li>
                <p><a href="choose-btw-packaging.htm">What is the difference between "ddl" and "sql_direct" folders?</a>
                </p>
            </li>
            <li>
                <p><a href="choose-btw-packaging.htm">Processing Changes</a>
                </p>
            </li>
            <li>
                <p><a href="choose-btw-packaging.htm">Packaging Overview</a>
                </p>
            </li>
            <li>
                <p><a href="choose-btw-packaging.htm">Complex and Interdependent Changes</a>
                </p>
            </li>
        </ul>
        <p>Since the CONVERT and DDL_DIRECT packaging methods operate differently, one method may be preferred over the other depending upon the situation.</p>
        <p>Note that DDL_DIRECT is only available with versions 7.15 and later.</p>
        <h2 id="HowTo:ChooseBetweenCONVERT(ddl)andDDL_DIRECT(ddl_direct)PackagingMethods-CONVERT">CONVERT</h2>
        <p><strong>Pros</strong>
        </p>
        <ul>
            <li>
                <p>The CONVERT packaging method provides the full forecasting and rules validation capabilities available with Datical.</p>
            </li>
            <li>
                <p>The change sets are very granular allowing failed deploys to be re-executed from the point of failure.</p>
            </li>
        </ul>
        <p><strong>Cons</strong>
        </p>
        <ul>
            <li>
                <p>The CONVERT packaging method takes longer because of the extra work required to generate the snapshots and perform the comparison.</p>
            </li>
            <li>
                <p>The order of statements within a SQL script may not be preserved when they are converted to XML change sets.</p>
            </li>
            <li>
                <p>SQL statements that will not generate a change set by diffing the before and after states of the database will not be deployed.</p>
            </li>
        </ul>
        <h2 id="HowTo:ChooseBetweenCONVERT(ddl)andDDL_DIRECT(ddl_direct)PackagingMethods-DDL_DIRECT">DDL_DIRECT</h2>
        <p><strong>Pros</strong>
        </p>
        <ul>
            <li>
                <p>The DDL_DIRECT packaging method is faster because it does not have to generate and compare database snapshots.</p>
            </li>
            <li>
                <p>The order of SQL statements within a script is maintained.</p>
            </li>
            <li>
                <p>The SQL script timeout setting can be used to terminate run-away or hung scripts.</p>
            </li>
        </ul>
        <p><strong>Cons</strong>
        </p>
        <ul>
            <li>
                <p>Scripts packaged using DDL_DIRECT are not forecasted, unless using SQL Parser for Oracle.</p>
                <ul>
                    <li>
                        <p>Note that not all objects can be forecasted with SQL Parser</p>
                    </li>
                    <li>See the topic "Limitations of SQL Parser" on this page: <a href="choose-btw-packaging.htm">Using SQL Parser</a></li>
                </ul>
            </li>
        </ul>
        <h2 id="HowTo:ChooseBetweenCONVERT(ddl)andDDL_DIRECT(ddl_direct)PackagingMethods-Recommendations">Recommendations</h2>
        <ul>
            <li>
                <p>Package DDL using CONVERT to get the most comprehensive forecasting and rules validation.</p>
            </li>
            <li>
                <p>Package DDL using DDL_DIRECT when packaging is taking too long due to snapshot generation.</p>
                <ul>
                    <li>
                        <p>Performance may be significantly improved for managed schemas that contain thousands of objects.</p>
                    </li>
                </ul>
            </li>
            <li>
                <p>Use SQL Parser for Oracle when packaging using DDL_DIRECT to provide forecasting for supported object types. Remember that not all objects can be forecasted by SQL Parser.</p>
            </li>
            <li>
                <p>Package complex scripts where the order of SQL execution must be maintained using DDL_DIRECT.</p>
            </li>
            <li>
                <p>Make scripts packaged using DDL_DIRECT as granular as possible. Consider using naming convention or commit order to maintain the sequence of SQL statements instead of packaging them in a single script.</p>
                <ul>
                    <li>
                        <p>More granular scripts will allow you to recover from a failed deploy much easier. Scripts are considered a single change set. If the script fails mid-way, Datical will try to re-execute the entire script. If non-rerunnable changes were made, a second execution of the script will fail. Manual database cleanup will be required in order to complete the deploy.</p>
                    </li>
                </ul>
            </li>
        </ul>
    </body>
</html>