<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-how-tos/improve-deployment-performance.html" />
        <meta name="description" content="Learn the reccomendations to improve deployment performance." />
    </head>
    <body>
        <h1>Recommendations to Improve Deployment Performance
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <ul>
            <li>Optimize your Project Settings by disabling features you don't use or by narrowing the scope of the features you do use.</li>
            <li>Increase the amount of RAM used by <MadCap:variable name="General.CompanyName" />
				.</li>
            <li>Upgrade to a newer version of Liquibase Enterprise/Datical.</li>
        </ul>
        <h3>Project Settings that improve deploy performance</h3>
        <h4>Check your values of these Project Settings</h4>
        <p>1. enableRowCount="disabled" or "approximate"&#160;→ <a href="improve-deployment-performance.htm" rel="nofollow">Settings for Collecting Row Counts</a></p>
        <p>2. limitForecastProfiling="true"&#160;→ For more information on this topic: <a href="improve-deployment-performance.htm" rel="nofollow">Limited Forecast</a></p>
        <p>3. deployMode="quick"&#160;→ For more information on this topic: <a href="improve-deployment-performance.htm" rel="nofollow">"Quick Deploy" Deployment Mode</a></p>
        <p>4. storedLogicValidityCheck="disabled" or "limited" or "local":&#160;→ Limited or Disabled will have faster performance than Local or Global</p>
        <ul>
            <li>Please see the notes in these pages:<br /><ul><li><span style="color: rgb(0,82,204);"><a href="improve-deployment-performance.htm" rel="nofollow">Stored Logic Validity Check details</a></li><li><MadCap:xref href="configure-project-settings.htm">Configure Project Settings</MadCap:xref></li></ul></li>
            <li>Performance recommendations:
                <ul>
                    <li>If you do <strong>not</strong> review or use the information in the Stored Logic Validity Check section of your deploy reports, then set storedLogicValidityCheck="disabled" to avoid possible performance slow down for a feature you aren't actively using.</li>
                    <li>If you review and use the Stored Logic Validity Check information in your deploy reports but you do <strong>not</strong> use the storedLogicValidityAction=FAIL option,&#160;then we recommend setting storedLogicValidityCheck="limited".</li>
                    <li>If you review and use the Stored Logic Validity Check information in your deploy reports <strong>and</strong> you also have enabled the storedLogicValidityAction=FAIL option,&#160;then we recommend setting storedLogicValidityCheck="local". (This is the default setting.)</li>
                    <li>Although storedLogicValidityCheck="global" is an available setting and is the most comprehensive, if performance timing is an important consideration then it may be better to use a smaller scope such as "local" or "limited".</li>
                </ul>
            </li>
        </ul>
        <p>5. forecastDML=false → Disabling Forecast DML can improve performance if you don't need to forecast DML: <a href="improve-deployment-performance.htm" rel="nofollow">Configuring Project Settings</a></p>
        <p>6. autoGenSQL=false → Disabling the Automatically Generate SQL setting can improve performance if you don't need it: <a href="improve-deployment-performance.htm" rel="nofollow">Configuring Project Settings</a></p>
        <h3 id="HowTo:ImproveDeploymentPerformance-Howthevalueslookindatical.projectfile">How the values look in datical.project file</h3><pre>&lt;dbproject:Project xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dbproject="http://datical.com/db/project/1.0" name="dpe-datical-paymentmanager" storedLogicExternal="true" deployThreshold="stopOnError" runtimeCredentials="true" multiSchema="true" dbSchemaDefinition="project" schemaSelectionStep="PAMAND5" trackingSchema="DATICAL" storedLogicValidityCheck="limited" enableRowCount="disabled" limitForecastProfiling="true" deployMode="quick" autoGenSQL="false" forecastDML="false"&gt;</pre>
        <h3 id="HowTo:ImproveDeploymentPerformance-HowtoChangetheProjectSettings">How to Change the Project Settings</h3>
        <p>There are more details about each setting option on the <a href="improve-deployment-performance.htm" rel="nofollow">Configuring Project Settings</a> page. You can change them using the method you prefer:</p>
        <h4 id="HowTo:ImproveDeploymentPerformance-GUI">GUI</h4>
        <p>In the desktop client/Eclipse GUI, open your project, go to the Settings tab, and expand open the Deployment Settings section. Here is an example of what the settings would look like in the GUI when optimizing for performance:</p>
        <p><img class="confluence-embedded-image confluence-content-image-border" height="400" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/622034960/DeploymentSettings.jpg?version=1&amp;modificationDate=1610587680508&amp;cacheVersion=1&amp;api=v2&amp;width=410&amp;height=400" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/622034960/DeploymentSettings.jpg?version=1&amp;modificationDate=1610587680508&amp;cacheVersion=1&amp;api=v2&amp;width=753&amp;height=733 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/622034960/DeploymentSettings.jpg?version=1&amp;modificationDate=1610587680508&amp;cacheVersion=1&amp;api=v2&amp;width=410&amp;height=400 1x" />
        </p>
        <h4 id="HowTo:ImproveDeploymentPerformance-CommandLine">Command Line</h4>
        <p>In the CLI, you can set those same items using "hammer set" commands for enableRowCount, limitForecastProfiling, deployMode, invalidsCheck, and autoGenSQL. Please see the set command details here: <a href="improve-deployment-performance.htm" rel="nofollow">CLI Commands#set</a></p>
        <h4 id="HowTo:ImproveDeploymentPerformance-ProjectCreator">Project Creator</h4>
        <p>If you use the optional project_creator script, you can set these settings when initially creating the project. Please see the instructions here: <a href="improve-deployment-performance.htm" rel="nofollow">Creating a Datical Project Using the Project Creation Script (project_creator.groovy)</a></p>
        <h2 id="HowTo:ImproveDeploymentPerformance-IncreasetheamountofRAMusedbyDatical">Increase the amount of RAM used by <MadCap:variable name="General.CompanyName" /></h2>
        <p>The default is -Xmx2048m. You can increase it to&#160;-Xmx4096m or&#160;-Xmx8192m.</p>
        <p>Please see the instructions on this page: <a href="improve-deployment-performance.htm">Increase the amount of RAM used by <MadCap:variable name="General.LBEnterprise" /></a></p>
        <h2 id="HowTo:ImproveDeploymentPerformance-UpgradetoanewerversionofLiquibaseEnterprise/DaticalDB">Upgrade to a newer version of <MadCap:variable name="General.LBEnterprise" /></h2>
        <ul>
            <li>There were performance improvements for those who use the Stored Logic Validity Check project setting in <MadCap:variable name="General.LBEnterprise" /> version 6.12 (and higher).</li>
            <li>There were performance improvements for Status, statusDetails, and Pipeline Status in <MadCap:variable name="General.LBEnterprise" /> version 6.14 (and higher). This also improved operations which run status implicitly such as deploy, rollback, deployPackager, convert SQL and changeLogSync.</li>
            <li>There were improvements for memory utilization of SQL scripts that produce a high-volume output in 7.11 (and higher).</li>
            <li>There were improvements for<a href="improve-deployment-performance.htm" rel="nofollow">SQL Parser for Oracle</a> in version 7.12 (and higher).</li>
            <li>There were improvements for <a href="improve-deployment-performance.htm" rel="nofollow">Limited Forecast</a>in version 7.13 (and higher):
				<ul><li>Limited Forecast will only profile tables impacted by the changesets to be forecasted or deployed</li><li>Limited Forecast will only profile the schema impacted by the changesets to be forecasted or deployed in multi-schema projects</li></ul></li>
            <li>Significant performance improvements for <a href="improve-deployment-performance.htm" rel="nofollow">Forecast</a> profiling in version 7.14 (and higher):
				<ul><li>Faster forecasting of Views and Materialized Views</li><li>Faster profiling for tables, columns, and views in multi-schema projects</li><li>Use multiple connections (maximum of 10 connections) to profile schemas simultaneously in Oracle multi-schema projects. Note that with 7.14 (and higher) in Oracle projects with multiple schemas, you may notice higher CPU utilization due to multiple connections being used for Oracle forecast profiling.</li></ul></li>
        </ul>
        <p>There are other performance improvement suggestions on these pages:</p>
        <ul>
            <li><a href="improve-deployment-performance.htm" rel="nofollow">Improving Performance</a>
            </li>
            <li><a href="improve-deployment-performance.htm">How To: Improve Packager Performance</a>
            </li>
        </ul>
        <h2 id="HowTo:ImproveDeploymentPerformance-Relatedarticles">Related articles</h2>
        <ul>
            <li><a href="improve-deployment-performance.htm">How To: Improve Packager Performance</a>
            </li>
            <li><a href="#">How To: Improve Deployment Performance</a>
            </li>
            <li><a href="improve-deployment-performance.htm">Implementation Guide: Forecast and Deploy</a>
            </li>
        </ul>
    </body>
</html>