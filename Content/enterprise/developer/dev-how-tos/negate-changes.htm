<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-how-tos/negate-changes.html" />
        <meta name="description" content="This document describes the case of negating database changes that have been packaged and deployed into the Liquibase Enterprise pipeline but deemed unnecessary to be deployed all the way into the PROD environment." />
    </head>
    <body>
        <h1>How To: Negate changes
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>This document describes the case of negating database changes that have been packaged and deployed into the <MadCap:variable name="General.LBEnterprise" /> pipeline but deemed unnecessary to be deployed all the way into the PROD environment.</p>
        <p>The idea is that these changes could be deployed into PROD safely as long as there is also a script which negates those changes.</p>
        <p>Examples of such cases are: Adding a new object, e.g., a new table, a new column or a new procedure, and this object is no longer needed. Since the addition of an object is not a concern for data loss, it is safe to deploy such changes into the pipeline. These changes could be safely negated by another script. As a result, the final state of the database would not show any of those changes.</p>
        <p>There is a separate use case around changes that are deemed detrimental and therefore cannot be deployed into higher environments. For example, doing so could result in a data loss. This use case is captured in another guide "<a href="negate-changes.htm">How To: Abandon changes</a>" which will prevent changes from deploying further in the pipeline.</p>
        <h2 id="HowTo:Negatechanges-Step-by-stepguide">Step-by-step guide</h2>
        <p>Process for negating changes is different for stored logic and ddl/dml code.</p>
        <h3 id="HowTo:Negatechanges-Changesin&quot;data_dml&quot;,&quot;ddl&quot;,&quot;ddl_direct&quot;,&quot;sql&quot;,or&quot;sql_direct&quot;folders">Changes in "data_dml", "ddl", "ddl_direct", "sql", or "sql_direct" folders</h3>
        <p>We will assume that a script by the name of "<code>international_billing.sql</code>" was packaged from "sql_direct" directory. This script created several tables. One of those tables "<code>international_billing_custom</code>" is not needed. Steps below will guide you how to negate this change, i.e., drop table international_billing_custom</p>
        <ol>
            <li>Commit a negating script. Since this script simply performs a "drop table" operation, this script can be committed into the "ddl" directory.
				<ol><li>From naming convention perspective, you would want to name this script as something meaningful for users, e.g., "<code>drop_international_billing_custom_table.sql</code>".
						<ol><li>Notice that this will not result in net data loss when both "create table" and "drop table" are deployed to a target environment respectively.</li></ol></li></ol></li>
            <li>Datical will package negating scripts into changesets.<br /><ol><li>Note that the changeset will inherit a label based on the script name. This could be useful later when reviewing status, forecast or deploy reports.</li></ol></li>
            <li>Because the negating script was packaged in a later commit relative to the initial script, Datical will deploy the negating script in the same order as the SCM commit.
				<ol><li>For example, when deploying changes to PROD environment, Datical will deploy all changesets from the originating script ("<code>international_billing.sql</code>"). This will also create the unwanted table in PROD. Datical will then proceed with deploying other changesets including the negating changeset which will remove the unwanted table "<code>international_billing_custom</code>" from PROD.</li></ol></li>
        </ol>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Best Practice:<br />Prior to deploying your changes to the target environment, especially when deploying to PROD, run a Forecast to check that negating changesets are getting picked up by your release labels and deployed in the correct order.</p>
        <h3 id="HowTo:Negatechanges-Changesin&quot;procedure&quot;,&quot;function&quot;,&quot;package&quot;,&quot;packagebody&quot;,&quot;trigger&quot;and&quot;view&quot;storedlogicfolders">
            <br />Changes in "procedure", "function", "package", "packagebody", "trigger" and "view" stored logic folders</h3>
        <p>Note: Scripts committed into one of these directories <u>do not move to the "archive" directory</u>. All stored logic scripts stay in their original directories after packaging.</p>
        <p>We will assume that a script by the name of "<code>international_customer_dependents.sql</code>" was packaged from the "procedure" directory. This script contains code for a procedure "<code>intl_cust_dep</code>". Because the original script has been packaged already, there exists a Datical changeset for this procedure. During testing, you realize that the procedure needs to be fixed. Steps below will guide you how to package a fix for this procedure.</p>
        <ol>
            <li>Since scripts in the "procedure" directory do not get archived, the original faulty script is already exists in that directory.</li>
            <li>The Developer will checkout the script from SCM</li>
            <li>Rework the script.</li>
            <li>Commit the reworked script using the same file name and in the same directory where it was originally placed ("procedure").</li>
            <li>Packager will detect a new commit in the "procedure" directory. As a result, a second changeset will be created for the same procedure.</li>
            <li>Because the reworked script was packaged in a later commit relative to the original faulty script, Datical will deploy the reworked script in the same order as the SCM commit.
				<ol><li>For example, when deploy changes to PROD environment, Datical will deploy the first changeset for&#160;"<code>intl_cust_dep</code>" procedure. This will create the procedure in PROD with faulty code. Datical will then proceed with deploying other changesets including the reworked changeset which will update the procedure with new code.</li></ol></li>
        </ol>
        <h2 id="HowTo:Negatechanges-Relatedarticles">Related articles</h2>
        <ul>
            <li><a href="negate-changes.htm">How To: Remove abandonded changes from Datical and lower environments</a>
            </li>
            <li><a href="negate-changes.htm">How To: Abandon changes</a>
            </li>
            <li><a href="#">How To: Negate changes</a>
            </li>
            <li><a href="negate-changes.htm">How To: Abandon a Single Changeset from a Script</a>
            </li>
            <li><a href="negate-changes.htm">How To: Leverage the "metadata.properties" file</a>
            </li>
        </ul>
    </body>
</html>