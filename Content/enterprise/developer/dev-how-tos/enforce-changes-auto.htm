<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-how-tos/enforce-changes-auto.html" />
        <meta name="description" content="Learn how to enforce changes to lower environments using automation." />
    </head>
    <body>
        <h1>How To: Enforce changes to Lower Environments using Automation
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <p>Many organizations have a database policy requiring any change to Production be deployed first in a lower environment. Liquibase Enterprise customers can use the forecast command in their automation script(s) to enforce this type of policy.</p>
        <h3 id="HowTo:EnforcechangestoLowerEnvironmentsusingAutomation-Instructions">Instructions</h3>
        <p>Sample pipeline</p>
        <p>current</p>
        <p>
            <img src="../../../Z_Resources/Images/enterprise/enforce-auto/1enforce.png" />
        </p>
        <p>hotfix</p>
        <p>
            <img src="../../../Z_Resources/Images/enterprise/enforce-auto/2enforce.png" />
        </p>
        <h2 id="HowTo:EnforcechangestoLowerEnvironmentsusingAutomation-Linux">Linux</h2>
        <ul>
            <li>
                <p>In this example, the deploy command looks as such: <strong>hammer deploy --labels=$labels --pipeline=$pipeline DEV</strong></p>
            </li>
            <li>
                <p>Update the script below to remove --labels or --pipeline if not using with the deploy command.</p>
            </li>
        </ul>
        <ol>
            <li>
                <p>In the Deploy automation workspace include a file called <strong>enforce_workflow.sh</strong> with example code below. If you deploy with labels or contexts make sure to pass those same parameters to the forecast command.</p><pre>#!/bin/bash
echo "Forecasting to lower environments to check all changes have been deployed"
echo "Labels: $1"
echo "Pipeline: $2"
echo "Current Environment: $3"
labels=$1
pipeline=$2
currentEnv=$3

#Check DEV
if [ $currentEnv == "DEV" ]
then
    echo "No previous environments"    exit 0
fi
#Check QA
if [ $currentEnv == "QA" ]
then
    echo "Forecasting to DEV"    
    hammer forecast --labels=$labels --pipeline=$pipeline DEV |&amp; tee output.txt
    if grep -q "There are 0 change sets forecast" "output.txt"; then
      exit 0
    fi
fi
#Check QA2
if [ $currentEnv == "QA2" ]
then
    echo "No previous environments"    exit 0
fi
#Check PROD (current)
if [ $currentEnv == "PROD" ] &amp;&amp; [ $pipeline == "current" ]
then
    echo "Forecasting to QA"    hammer forecast --labels=$labels --pipeline=$pipeline QA |&amp; tee output.txt
    if grep -q "There are 0 change sets forecast" "output.txt"; then
      exit 0
    fi
fi
#Check PROD (hotfix)
if [ $currentEnv == "PROD" ] &amp;&amp; [ $pipeline == "hotfix" ]
then
    echo "Forecasting to QA2"    hammer forecast --labels=$labels --pipeline=$pipeline QA2 |&amp; tee output.txt
    if grep -q "There are 0 change sets forecast" "output.txt"; then
      exit 0
    fi
fi
# Otherwise exit with 1 to indicate Lower Environments have not been satisfied
exit 1</pre>
            </li>
            <li>
                <p>Make sure there are executable permissions on <strong>enforce_workflow.sh</strong>.</p>
            </li>
            <li>
                <p>In the Deploy script include a call to <strong>enforce_workflow.sh</strong>.</p><pre>bash enforce_workflow.sh $(labels) $(PIPELINE) $(deployenv)
if [ $? -eq 0 ]
then
  hammer deploy --labels=$(labels) --pipeline=$(PIPELINE) $(deployenv) 
  hammer debug export --include="datical.project,changelog.xml,daticaldb*.log,*.html,deployPackager.properties,packager.log" --report=Reports/debug/ScrubbedDebugFiles.zip
else
  echo "Cannot run deployment until all changes have been deployed to lower environments"  hammer debug export --include="datical.project,changelog.xml,daticaldb*.log,*.html,deployPackager.properties,packager.log" --report=Reports/debug/ScrubbedDebugFiles.zip
  exit 1
fi</pre>
            </li>
        </ol>
        <h2 id="HowTo:EnforcechangestoLowerEnvironmentsusingAutomation-Windows">Windows</h2>
        <ul>
            <li>
                <p>In this example, the deploy command looks as such: <strong>hammer deploy --labels=$labels DEV</strong></p>
            </li>
            <li>
                <p>Update the script below to add --pipeline or any other parameters that are in-use with the deploy command.</p>
            </li>
        </ul>
        <ol>
            <li>
                <p>In the Deploy automation workspace include a file called <strong>enforce_workflow.bat</strong> with example code below. If you deploy with labels or contexts make sure to pass those same parameters to the forecast command.</p><pre>@echo off
echo "Forecasting to lower environments to check all changes have been deployed"echo "Labels: %1"echo "Current Environment: %2"SET labels=%1
SET currentEnv=%2
REM Check DEV
if "%currentEnv%"=="DEV" (
    echo "No previous environments"    exit /B 0
)
REM Check QA
if "%currentEnv%"=="QA" (
    echo "Forecasting to DEV"    hammer forecast --labels=%labels% DEV &gt; output.txt
	echo "Forecast is complete"    find "There are 0 change sets forecast" output.txt &gt; NUL &amp;&amp; echo All changesets have been deployed to DEV || echo There are changesets that were not deployed to DEV
)
REM Check PROD
if "%currentEnv%"=="PROD" (
    echo "Forecasting to QA"    hammer forecast --labels=%labels% QA &gt; output.txt
	echo "Forecast is complete"	find "There are 0 change sets forecast" output.txt &gt; NUL &amp;&amp; echo All changesets have been deployed to QA|| echo There are changesets that were not deployed to QA
)</pre>
            </li>
            <li>
                <p>Make sure there are executable permissions on <strong>enforce_workflow.bat</strong>.</p>
            </li>
            <li>
                <p>In the Deploy script include a call to <strong>enforce_workflow.bat</strong>.</p><pre>call enforce_workflow.bat %labels% %deployenv%
if ERRORLEVEL 1 (
  echo "Cannot run deployment until all changes have been deployed to lower environments"  hammer debug export --include="datical.project,changelog.xml,daticaldb*.log,*.html,deployPackager.properties,packager.log" --report=Reports/debug/ScrubbedDebugFiles.zip
  exit /B 1
) else (
  hammer deploy --labels=%labels% %deployenv%
  hammer debug export --include="datical.project,changelog.xml,daticaldb*.log,*.html,deployPackager.properties,packager.log" --report=Reports/debug/ScrubbedDebugFiles.zip
)</pre>
            </li>
        </ol>
    </body>
</html>