<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-how-tos/remove-lock-databasechangeloglock.html" />
        <meta name="description" content="This document describes how to remove a lock from DATABASECHANGELOGLOCK." />
    </head>
    <body>
        <h1>How To: Remove lock from DATABASECHANGELOGLOCK table
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <h2>Overview</h2><![CDATA[ 		]]><p>When a Liquibase Enterprise deployment process is killed before it finishes, its database process lock table (DATABASECHANGELOGLOCK) is left with a lock record that prevents subsequent packaging or deployment jobs from being able to run. In order to allow future processes to proceed, the table needs to be cleared out by manually updating the column to 0 (zero). This can happen with any of the supported database platforms.</p><p>If the target is an Oracle database the <code>DATICAL_SPERRORLOG</code>table might also be held open. The <code>DATICAL_SPERRORLOG</code>table is used to capture output for scripts executed using <code>sqlplus</code>during a deployment.</p><p>Newer versions of <MadCap:variable name="General.LBEnterprise" /> have better ways of handling the locks, so we recommend upgrading to <MadCap:variable name="General.LBEnterprise" /> version 7.3 or higher for the smoothest handling of the locks. Please see below for different instructions for different versions of <MadCap:variable name="General.LBEnterprise" />.
		</p><h3>Sample Error</h3><p>Below is sample text you may see in the Deploy Report if there is a lock on the databasechangeloglock table:</p><p><em>An error occurred deploying to '[dbDef]': liquibase.exception.LockException: Could not acquire change log lock. Currently locked by [user] ([user_ip]) since 2/27/20 9:44 AM</em></p><h2>Hammer Command for releasing DATABASECHANGELOGLOCK</h2><p>There is a hammer command to release the lock. The instructions for using releaseLocks are different for older versions of <MadCap:variable name="General.LBEnterprise" />
				(7.0 and lower), or version 7.2, or newer versions of <MadCap:variable name="General.LBEnterprise" />
				(7.3 and higher).
		</p><h3>
			Instructions for <MadCap:variable name="General.LBEnterprise" /> versions 7.3 and higher:
		</h3><p>The instructions for 7.3 and higher are simpler, because the hammer command works for both the DATABASECHANGELOGLOCK table and the Oracle DATICAL_SPERRORLOG table. We recommend upgrading to 7.3 or higher if you sometimes need to interrupt deploys and then use the releaseLocks command before running another deploy.</p><b>releaseLocks</b><pre> hammer releaseLocks &lt;dbDef&gt;</pre><h3>
			Instructions for <MadCap:variable name="General.LBEnterprise" /> version 7.2:
		</h3><p>With version 7.2 the releaseLocks command no longer requires a separate properties file for drivers.</p><b>releaseLocks</b><pre> hammer releaseLocks &lt;dbDef&gt;</pre><p>If you are using Oracle with <MadCap:variable name="General.LBEnterprise" /> version 7.2 and you need to manually terminate a packager job or a deploy job, the DATICAL_SPERRORLOG table may be held open on your <MadCap:variable name="General.LBEnterprise" /> tracking schema. You may need to disconnect the session for the user that runs <MadCap:variable name="General.LBEnterprise" />. The <code>DATICAL_SPERRORLOG</code>table is used to capture output for scripts executed using<code>sqlplus</code>during an Oracle deployment.</p><p>Here is how you can disconnect the session:</p><ul><li>Run a query to find the process</li></ul><pre>SELECT s.inst_id,
s.sid,
s.serial#,
p.spid,
s.username,
s.program FROM   gv$session s
JOIN gv$process p ON p.addr = s.paddr AND p.inst_id = s.inst_id;</pre><ul><li>Disconnect the session with the following statement.</li></ul><pre>ALTER SYSTEM DISCONNECT SESSION 'sid,serial#' IMMEDIATE;</pre><h3>
			Instructions for <MadCap:variable name="General.LBEnterprise" /> versions 7.0 and lower:
		</h3><p>The instructions for 7.0 and lower requires a daticaldb.properties file to indicate the path to the drivers.</p><b>releaseLocks.groovy</b><pre class="syntaxhighlighter-pre">hammer groovy releaseLocks.groovy [dbDef]</pre><p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">releaseLocks.groovy was deprecated in <MadCap:variable name="General.LBEnterprise" /> v8.3.</p><p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">You will need to specify path to your driver (jar file) in a new file called daticaldb.properties file within your project directory. Place the file in the same directory as the datical.project. Here's how we recommend setting up your daticaldb.properties file. Uncomment the relevant line before using:</p><b class="code-title">daticaldb.properties</b>Expand source
		<pre>## Oracle driver (Linux)
#drivers=/opt/datical/DaticalDB/repl/plugins/com.datical.db.drivers.oracle.common_1.0.12.jar
## Oracle driver (Windows)
#drivers=C:\\Users\\Administrator\\DaticalDB\\repl\\plugins\\com.datical.db.drivers.oracle.win_x86_64_1.0.12.jar
## MS SQL Server driver
#drivers=C:\\Users\\Administrator\\DaticalDB\\repl\\plugins\\com.datical.db.drivers.mssql_1.0.12.jar</pre><p>If you are using Oracle with <MadCap:variable name="General.LBEnterprise" /> version 7.0 and you need to manually terminate a packager job or a deploy job, the DATICAL_SPERRORLOG table may be held open on your <MadCap:variable name="General.LBEnterprise" /> tracking schema. You may need to disconnect the session for the user that runs <MadCap:variable name="General.LBEnterprise" />. The <code>DATICAL_SPERRORLOG</code>table is used to capture output for scripts executed using <code>sqlplus</code>during an Oracle deployment.</p><p>Here is how you can disconnect the session:</p><ul><li>Run a query to find the process</li></ul><pre>SELECT s.inst_id,
s.sid,
s.serial#,
p.spid,
s.username,
s.program FROM   gv$session s
JOIN gv$process p ON p.addr = s.paddr AND p.inst_id = s.inst_id;</pre><ul><li>Disconnect the session with the following statement.</li></ul><pre>ALTER SYSTEM DISCONNECT SESSION 'sid,serial#' IMMEDIATE;</pre><p>Known issue with Oracle: When running this command to clear locks with <MadCap:variable name="General.LBEnterprise" /> versions 7.0 or lower in an Oracle database you may see the following warning message relating to "MBeans":
		</p><b class="code-title">Warning when running releaseLocks against an Oracle database</b><pre>WARNING: Error while registering Oracle JDBC Diagnosability MBean.
java.security.AccessControlException: access denied ("javax.management.MBeanTrustPermission" "register")
at java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)
at java.lang.SecurityManager.checkPermission(SecurityManager.java:585)
at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanTrustPermission(DefaultMBeanServerInterceptor.java:1848)
at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:322)
at com.sun.jmx.mbeanserver.JmxMBeanServer.registerMBean(JmxMBeanServer.java:522)
at oracle.jdbc.driver.OracleDriver.registerMBeans(OracleDriver.java:416)
at oracle.jdbc.driver.OracleDriver$1.run(OracleDriver.java:248)
at java.security.AccessController.doPrivileged(Native Method)
at oracle.jdbc.driver.OracleDriver.&lt;clinit&gt;(OracleDriver.java:244)
at java.lang.Class.forName0(Native Method)
at java.lang.Class.forName(Class.java:348)
at liquibase.database.DatabaseFactory.openConnection(DatabaseFactory.java:197)
at liquibase.database.DatabaseFactory.openDatabase(DatabaseFactory.java:151)
at liquibase.integration.commandline.CommandLineUtils.createDatabaseObject(CommandLineUtils.java:86)
at liquibase.integration.commandline.Main.doMigration(Main.java:960)
at liquibase.integration.commandline.Main.run(Main.java:190)
at liquibase.integration.commandline.Main.main(Main.java:105)
at com.datical.hammer.repl.LiquibaseCliCommand.runLiquibase(LiquibaseCliCommand.java:271)
at com.datical.hammer.repl.LiquibaseCliCommand.runLiquibase(LiquibaseCliCommand.java:211)
at com.datical.hammer.repl.LiquibaseCliCommand.run(LiquibaseCliCommand.java:45)
at com.datical.hammer.repl.DaticalDBHelper.executeCommand(DaticalDBHelper.java:3151)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoCachedMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:233)
at org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:56)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)
at releaseLocks.run(releaseLocks.groovy:12)
at groovy.util.GroovyScriptEngine.run(GroovyScriptEngine.java:605)
at com.datical.hammer.repl.GroovyScriptCommand.run(GroovyScriptCommand.java:255)
at com.datical.hammer.repl.Main.runCommandFromArgs(Main.java:437)
at com.datical.hammer.repl.Main.main(Main.java:94)
at com.datical.hammer.repl.app.Application.start(Application.java:19)
at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
at org.eclipse.equinox.launcher.Main.main(Main.java:1386)
Successfully released all database change log locks for DATICAL_USER@jdbc:oracle:thin:@//demo-db1-rhel6.datical.net:1521/CAPS_REF1.datical.net
Liquibase 'releaseLocks' Successful</pre><h2>Alternate Solution for releasing DATABASECHANGELOGLOCK</h2><p>Update the DATABASECHANGELOGLOCK table manually:</p><b>SQL</b><pre>UPDATE DATABASECHANGELOGLOCK SET LOCKED=0;</pre><p>Note that if you update the DATABASECHANGELOGLOCK table manually, for Oracle you may also need to disconnect the session for the user that runs <MadCap:variable name="General.LBEnterprise" />. Then <code>DATICAL_SPERRORLOG</code>table is used to capture output for scripts executed using <code>sqlplus</code>during an Oracle deployment.
			</p><p>Here is how you can disconnect the session:</p><ul><li>Run a query to find the process</li></ul><pre>SELECT s.inst_id,
s.sid,
s.serial#,
p.spid,
s.username,
s.program FROM   gv$session s
JOIN gv$process p ON p.addr = s.paddr AND p.inst_id = s.inst_id;</pre><ul><li>Disconnect the session with the following statement.</li></ul><pre>ALTER SYSTEM DISCONNECT SESSION 'sid,serial#' IMMEDIATE;</pre></body>
</html>