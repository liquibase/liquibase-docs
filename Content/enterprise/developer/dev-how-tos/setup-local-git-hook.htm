<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-how-tos/setup-local-git-hook.html" />
        <meta name="description" content="This document describes how to setup a local Git hook script." />
    </head>
    <body>
        <h1>How To: Setup Local Git Hook (check for missing JIRA in commit message)
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <h2 id="HowTo:SetupLocalGitHook(checkformissingJIRAincommitmessage)-GitHookFiles">Git Hook Files</h2>
        <ul>
            <li>(original) Git Hook Script: <a href="https://datical-cs.atlassian.net/wiki/download/attachments/1216697/commit-msg?version=2&amp;modificationDate=1510597460932&amp;cacheVersion=1&amp;api=v2">commit-msg</a></li>
            <li>
				(updated <em>- some additional testing might be needed</em>) Git Hook Script: <a href="https://datical-cs.atlassian.net/wiki/download/attachments/1216697/commit-msg?version=2&amp;modificationDate=1510597460932&amp;cacheVersion=1&amp;api=v2">commit-msg</a><ul><li>Expanded the commit hook to check for some common team/collaboration errors.
						<ul><li><span style="color: rgb(0,51,102);">One when changes are made to the "archive" folder (in our case someone removed the folder completely and checked the set back in breaking things for the rest of the team).</li><li><span style="color: rgb(0,51,102);">Second is when a new script is checked in with a name which already exists in the archive folder</li></ul></li></ul></li>
        </ul>
        <h2 id="HowTo:SetupLocalGitHook(checkformissingJIRAincommitmessage)-Instructions">Instructions</h2>
        <p>The above code can be used for the client side Git hook. This script with ensure that the git commit message has a JIRA ticket listed If the JIRA ticket is missing from the commit, then the commit will fail.</p>
        <ul>
            <li>The script needs to go in the *_sql repo in the .git/hooks/ directory.</li>
            <li>The script needs to have execute permission</li>
        </ul>
        <p>Maintaining hooks for a team of DBAs can be a little tricky because the .git/hooks directory isn't cloned with the rest of your project, nor is it under version control. A simple solution to both of these problems is to store your hooks in the actual project directory (above the .git directory). This lets you edit them like any other version-controlled file.</p>
        <p>To install the hook, you can either create a symlink to it in .git/hooks (non Windows platforms) , or you can copy and paste it into the .git/hooks directory whenever the hook is updated.</p>
    </body>
</html>