<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/developer/write-sql-scripts/home.html" />
        <meta name="description" content="Learn how to write sql scripts, use both the sql_direct and ddl_direct folder, encode characters, environment variables and more in Enterprise." />
    </head>
    <body>
        <h1>Write SQL Scripts for <MadCap:variable name="General.LBEnterprise" /></h1>
        <MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <h2>Writing Scripts for Database Objects</h2>
        <p>Packaging for <MadCap:variable name="General.LBEnterprise" /> proceeds by database object type. It is best practice to break down SQL scripts into a script per database object type.</p>
        <h2>Using the sql_direct and ddl_direct Folder</h2>
        <p>Use the <code>ddl_direct</code> or <code>sql_direct</code> folder for SQL scripts to be processed by the native database client.</p>
        <p><code>ddl_direct</code> and <code>sql_direct</code> folders are identical except for the order in which they are processed in packaging:&#160;<code>ddl, ddl_direct, view, function, procedure, package, packageBody, trigger, sql, sql_direct, data_dml</code>.
        </p>
        <p>You may need to package scripts in this folder under certain conditions:</p>
        <ul>
            <li>You use multi-object scripts that you cannot break out into per-object scripts.</li>
            <li>Your scripts include database objects that are not supported by the CONVERT packaging method (which is the default method for the DDL folder) such as database links, queues, types, cursors, public synonyms, renames, grants, and revokes. See these pages for details:
				<ul><li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/oracle-packaging.htm" rel="nofollow">Oracle Database Objects and Packaging</a></li><li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/sql-objects-packaging.htm" rel="nofollow">SQL Server Database Objects and Packaging</a></li><li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/postgresql-objects-packaging.htm" rel="nofollow">Postgres Database Objects and Packaging</a></li></ul></li>
            <li>Your scripts have <a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/flexible-folder-names.htm">Complex and Interdependent Database Changes</a>.</li>
            <li>You need to preserve the actual statements in the script and the order of the statements in the script (which may not be preserved if using ddl folder/CONVERT packaging method, see <a href="https://datical-cs.atlassian.net/wiki/pages/resumedraft.action?draftId=896570004#WritingSQLScriptsforDaticalDB-CONVERT/ddlfolderversusDIRECT/sql_directfolder">CONVERT/ddl folder versus DIRECT/sql_direct folder</a> ).</li>
            <li>You get errors during packaging in other folders that you cannot resolve by other means.</li>
        </ul>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Changesets produced using the database native client cannot be deployed to other types of database.</p>
        <h2>Encoding and Characters in Script Files</h2>
        <p class="title">File Encoding Best Practice</p>
        <p>For best results, scripts should use UTF-8 encoding. Other encoding types can result in lexical issues with <MadCap:variable name="General.LBEnterprise" /> that require the affected files to be converted to UTF-8.</p>
        <ul>
            <li>This conversion is performed automatically when you use the Deploy Packager &amp; the <code>packagemethod</code> is set to <code><code>direct </code>or ddl_direct </code>in the <code><a href="../../dba/package/package-sql-scripts-deployment/configure-packaging/metadata-properties.htm" rel="nofollow">metadata.properties</a></code> file that affects the script's directory</li>
            <li>This conversion <strong>IS NOT</strong> performed when you create change sets that target scripts in the Change Set Wizard of the <MadCap:variable name="General.LBEnterprise" /> GUI. These options include:
				<ul><li>Execute with sqlplus for Oracle Databases</li><li>Execute a DML script with sqlplus for Oracle Databases (Required for DML Forecasting)</li><li>Execute with sqlcmd for Microsoft SQL Server &amp; Azure SQL Databases</li><li>Execute with clpplus for DB2 Databases</li><li>Execute with psql for Postgres Databases</li><li>Execute with edbplus for EnterpriseDB Databases</li><li>Execute a SQL script file using JDBC</li></ul></li>
        </ul>
        <h2 id="WritingSQLScriptsforDaticalDB-UsingtheNLS_LANGenvironmentvariablewithOracle">Using the NLS_LANG environment variable with Oracle</h2>
        <p>The NLS_LANG environment variable can impact the operation of <MadCap:variable name="General.LBEnterprise" /> in two ways.</p>
        <h3 id="WritingSQLScriptsforDaticalDB-sqlplusChangeSetExecution"><code>sqlplus</code> Change Set Execution</h3>
        <p>This setting is used by the database to ensure that script contents are interpreted appropriately when executed and that data values are stored appropriately in the database. This can effect how characters are displayed in query output and in SQL IDEs and workbenches. If you are unable to standardize on UTF-8 as recommended above, it is recommended that all scripts processed for a given <MadCap:variable name="General.LBEnterprise" /> project use the same locale and character set designations. You may then set the NLS_LANG value that corresponds to your script in your <MadCap:variable name="General.LBEnterprise" /> project as described in <a href="../dev-how-tos/configure-project-settings.htm">Configuring Project Settings</a></p>
        <h3 id="WritingSQLScriptsforDaticalDB-Log&amp;ConsoleOutput">Log &amp; Console Output</h3>
        <p>The setting also effects the characters sets used for output and logs. If the language and character set of the database does not match the language and character set specified on the client, you may see unexpected characters or question marks in your output instead. This can occur during Deploy operations or during the Backup and Restore phases of the Deploy Packager and, in some cases, can lead to operation failures. It is highly recommended that the NLS_LANG setting on the client system from which the Deploy Packager is executed match the setting on the RefDB. This can be accomplished by setting the NLS_LANG environment prior to executing <MadCap:variable name="General.LBEnterprise" /> on the client.
        </p>
        <h3 id="WritingSQLScriptsforDaticalDB-AdditionalInformation">Additional Information</h3>
        <p>See Oracle documentation for more information:</p>
        <ul>
            <li>Oracle Database Globalization Support Guide - <a class="external-link" href="https://docs.oracle.com/database/121/NLSPG/ch3globenv.htm#NLSPG189" rel="nofollow">Choosing a Locale with the NLS_LANG Environment Variable</a></li>
            <li>NLS_LANG FAQ - <a class="external-link" href="https://www.oracle.com/database/technologies/faq-nls-lang.html" rel="nofollow">https://www.oracle.com/database/technologies/faq-nls-lang.html</a></li>
        </ul>
        <h2>Error Handling</h2>
        <p>Do not put error-handling statements in the object definition. For example:</p>
        <ul>
            <li>Oracle - do not include WHENEVER SQLERROR statements with the object definition.</li>
            <li>SQL Server - do not include IF EXISTS statements with the object definition.
            </li>
        </ul>
        <p><MadCap:variable name="General.LBEnterprise" /> has its own error-handling that wraps SQL scripts. Specifying error-handling within the statements is not necessary.
        </p>
        <h2 id="WritingSQLScriptsforDaticalDB-OracleandPL/SQL">Oracle and PL/SQL
        </h2>
        <ul>
            <li>We recommend that you do not put error handling statements in your scripts, because <MadCap:variable name="General.LBEnterprise" /> has its own error-handling that wraps SQL scripts. However, If you include error-handling code, use the <code>raise_application_error()</code> method as part of your catch routine. <MadCap:variable name="General.LBEnterprise" /> relies on <code>raise_application_error()</code> to determine the status of a change (success, failure).
            </li>
            <li><MadCap:variable name="General.LBEnterprise" /> creates and uses a DATICAL_SPERRORLOG table in the <MadCap:variable name="General.LBEnterprise" /> tracking schema. It is re-created as needed when a sqlplus change is deployed.
            </li>
        </ul>
        <h2>Stored-Logic Scripts</h2>
        <p>Stored logic refers to the following "programmatic" SQL objects (when they are in a stored logic folder or in a folder with<code>packageMethod=STOREDLOGIC).</code></p>
        <ul>
            <li>function</li>
            <li>package</li>
            <li>packagebody</li>
            <li>procedure</li>
            <li>trigger</li>
            <li>view</li>
        </ul>
        <h3>Conventions</h3>
        <p>Use the following conventions for writing stored-logic scripts:</p>
        <ul>
            <li>Create or modify only one object per file.
				<ul><li>Exception: Oracle packages. A package header and package body can be included in the same file.</li></ul></li>
            <li>
                <p>For stored logic scripts, only use the CREATE command (such as "CREATE PROCEDURE"). When you update and deploy the file again, <MadCap:variable name="General.LBEnterprise" /> automatically converts the CREATE to an ALTER as needed</p>
                <ul>
                    <li>
                        <p>(Do not use "CREATE OR REPLACE" or "CREATE OR ALTER".)</p>
                    </li>
                </ul>
            </li>
            <li>Include only the object definition. Do not place other statements in the file.
				<ul><li><p>Deployment Packager fails if it encounters statements before an object definition for scripts in a stored logic folders or where packageMethod is defined in the metadata.properties as<code>packageMethod=STOREDLOGIC</code>.</p></li><li>This includes statements such as ALTER SESSION and USE. These statements should not be necessary when using Liquibase Enterprise.</li><li>This also includes statements such as SET QUOTED_IDENTIFIER ON/OFF and SET ANSI_NULLS ON/OFF. If these statements need to be included, use the sql_direct folder.</li><li>Do not put error-handling statements in the object definition for stored logic scripts. <MadCap:variable name="General.LBEnterprise" /> has its own error-handling that wraps SQL scripts. Specifying error-handling within the statements is not necessary.</li></ul></li>
        </ul>
        <h2 id="WritingSQLScriptsforDaticalDB-ManagingDropsofStoredLogicObjects">Managing Drops of Stored Logic Objects
        </h2>
        <h3 id="WritingSQLScriptsforDaticalDB-Version6.16andEarlier">Version 6.16 and Earlier
        </h3>
        <p>To add a change set to the changelog.xml that drops a stored logic object a user can delete the file in the SQL code repo that contained that object's definition. The next time the Deploy Packager runs, the files absence will be noted and the change set will be added to the changelog.xml.
        </p>
        <h3 id="WritingSQLScriptsforDaticalDB-Version6.17andLater">Version 6.17 and Later</h3>
        <p>In 6.17 this mechanism was altered to provide more precise control over adding change sets that drop stored logic objects to the changelog.xml file. Instead of deleting the file, the user can update the file to contain a valid SQL statement to drop that object. The next time the Deployment Packager runs, the change set to drop the object will be added to the changelog.xml.</p>
        <p>To prevent attempting to drop a nonexistent object, a special precondition is added to the change set to check and see if the object exists first.</p>
        <h4 id="WritingSQLScriptsforDaticalDB-VersioningandStoredLogicObjectDrops">Versioning and Stored Logic Object Drops</h4>
        <p>The change set that drops the stored logic object will be versioned with all other change sets that pertain to the management of that object. Consult the table below for an example versioning history for a stored logic object.</p>
        <table>
            <tbody>
                <tr>
                    <th>Description of Change</th>
                    <th>SQL File Contents</th>
                    <th>Version</th>
                </tr>
                <tr>
                    <td><code>procPrintHelloWorld</code> is initially created</td>
                    <td><pre>CREATE OR REPLACE PROCEDURE procPrintHelloWorld
IS
BEGIN

DBMS_OUTPUT.PUT_LINE('Hello World!');
END;</pre>
                    </td>
                    <td>1</td>
                </tr>
                <tr>
                    <td><code>procPrintHelloWorld</code> is modified</td>
                    <td><pre>CREATE OR REPLACE PROCEDURE procPrintHelloWorld
IS
BEGIN

DBMS_OUTPUT.PUT_LINE('Hello there World!');
END;</pre>
                    </td>
                    <td>2</td>
                </tr>
                <tr>
                    <td><code>procPrintHelloWorld</code> is dropped</td>
                    <td><pre>DROP PROCEDURE procPrintHelloWorld;</pre>
                    </td>
                    <td>3</td>
                </tr>
            </tbody>
        </table>
        <p>See <a href="../dev-user-guides/manage-changesets/changeset-version-strategy.htm">Changeset Versioning: version and versionStrategy</a> for more information about how change set versioning is used in <MadCap:variable name="General.LBEnterprise" />.</p>
        <h2>Statement Terminators</h2>
        <p>Use statement terminators in SQL scripts (the semicolon by convention).</p>
        <p>When a statement is missing the terminator, packager will stop processing and return an error if the script time out setting has been set for REF dbDef. See "CLPPlus Timeout", "SQL*Plus Timeout", "EDB*Plus Timeout", and "SQLCMD Timeout" here: <a href="../dev-how-tos/configure-step-settings-dbdefs.htm">Configuring Step Settings (DbDefs)</a>.</p>
        <h2>Dynamic SQL</h2>
        <p><MadCap:variable name="General.LBEnterprise" /> works with "compile-time" or "static" SQL statements in SQL script files.</p>
        <p>It does not work on the SQL code that is generated at run time through features for dynamic SQL.</p>
        <p>It accepts and passes through statements like EXECUTE IMMEDIATE that are used to produce SQL code dynamically.</p>
        <h2>CONVERT method/ddl folder versus DIRECT method/sql_direct folder versus DDL_DIRECT method/ddl_direct folder</h2>
        <h3>Version 7.15+</h3>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/enterprise/text/packaging-ddl-methods-7.15.flsnp" />
        <h3>Version 7.14 and earlier</h3>
        <p>The <code>CONVERT</code> packaging method (which is used by default in the ddl folder) does not run the actual sql script during the final deploy. The CONVERT packaging method (ddl folder) will deploy the change set that was created by comparing the "before" snapshot to the "after" snapshot where the change set is based on the difference between the two. The CONVERT method (ddl folder) may not preserve the order of statements and it may not include statements that do not result in a change set during the diff process.</p>
        <p>If the order of the statements in the script is critical or if the script contains statements that would not be represented in a change set generated by diffing the before and after states of the database, you could instead package those scripts with the DIRECT method (which is used by default in the sql_direct folder). Scripts packaged with the DIRECT method in the sql_direct folder (or other folders that you have set to use the DIRECT packaging method) will run the actual script, thereby preserving the statements and the order of the statements.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">
			Note that the possible drawback with using the DIRECT method/ sql_direct folder with some configurations is losing some of the simulation/forecasting/modeling/profiling abilities that may happen with the CONVERT method/ddl folder. For Oracle you could use <MadCap:variable name="General.LBEnterprise" />'s optional <a href="../../dba/package/package-sql-scripts-deployment/configure-packaging/sql-parser.htm" rel="nofollow">SQL Parser</a> feature to add forecasting to the DIRECT method/ sql_direct folder (or other folders that you have set to use the DIRECT packaging method). <br /></p>
        <h2>Related links</h2>
        <p>Here are pages with additional information such as an overview of the workflows packager uses, packaging methods, packaging folders, and which methods/folders to use for different types of changes:</p>
        <ul>
            <li><a href="../../dba/package/package-sql-scripts-deployment/overview-packaging/home.htm">Overview of Packaging</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/files-scm-repository.htm">Placing Files in the SCM Repository</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/fixed-folder-names.htm">Fixed Folder Names</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/flexible-folder-names.htm">Flexible Folder Names</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/sql-objects-packaging.htm">SQL Server Database Objects and Packaging</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/oracle-packaging.htm">Oracle Database Objects and Packaging</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/place-files-scm-repo/postgresql-objects-packaging.htm" rel="nofollow">PostgreSQL Server Database Objects and Packaging</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/configure-packaging/sql-parser.htm">Using SQL Parser</a>
            </li>
            <li><a href="../dev-how-tos/choose-btw-packaging.htm">How To: Choose Between CONVERT (ddl) and DDL_DIRECT (ddl_direct) Packaging Methods</a>
            </li>
            <li><a href="../../troubleshoot/difference-between-ddl-sql-folders.htm">What is the difference between "ddl" and "sql_direct" folders?</a>
            </li>
        </ul>
    </body>
</html>