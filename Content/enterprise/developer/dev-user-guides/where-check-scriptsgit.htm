<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-user-guides/where-check-scriptsgit.html" />
        <meta name="description" content="Learn how to check in database scripts with Git." />
    </head>
    <body>
        <h1>User Guide: Where Do I Check In Database Scripts (Git)</h1>
        <MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>This documentation shows database developers - those creating SQL scripts for changes to databases - where to place their scripts so that those scripts are picked up by <MadCap:variable name="General.CompanyName" />
			's Deployment Packager for creating database change artifacts.</p>
        <h2 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Prerequisites">Prerequisites</h2>
        <p>You will need access to your Git server, e.g. Bitbucket, Github or Gitlab, such that you have read/write access to the repository.</p>
        <p>You will also need to setup appropriate branches where developers can commit/check-in their database files.</p>
        <p>You may setup your Git repository in such a way that your database scripts reside in the application code repository. Or you could setup a separate repository just for database files which would be separate from your application code repository.</p>
        <p>Make sure to review <a href="where-check-scriptsgit.htm">Placing Files in the SCM Repository</a> to understand how <MadCap:variable name="General.LBEnterprise" /> processes database changes (SQL files) when those are checked into Git. There is additional information for Oracle and SQL Server:</p>
        <ul>
            <li><a href="where-check-scriptsgit.htm">Oracle Database Objects and Packaging</a>
            </li>
            <li><a href="where-check-scriptsgit.htm">SQL Server Database Objects and Packaging</a>
            </li>
        </ul>
        <p>Download a Git tool such as <a class="external-link" href="https://git-for-windows.github.io/" rel="nofollow">Git Bash</a> or <a class="external-link" href="https://tortoisegit.org/" rel="nofollow">Tortoise Git</a>.</p>
        <h2 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Overview">Overview</h2>
        <p>As a developer who creates database files you will now be checking your scripts into Git.
        </p>
        <p>Make sure to review "Developer SCM Packaging" links mentioned in Prerequisites to become familiar with directory structure necessary for Datical's Deployment Packager to work correctly.
        </p>
        <h3 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Git">Git</h3>
        <p>You will have a Git URL which you can point to for committing your database files. The Git URL may look like this:</p>
        <ul>
            <li>HTTP: http://<span style="color: rgb(153,153,153);"><em>&lt;git_server&gt;</em>/myproject/myproject_sql.git</li>
            <li>SSH:&#160;git@<span style="color: rgb(153,153,153);"><em>&lt;git_server&gt;</em>:myproject/myproject_sql.git</li>
        </ul>
        <p>Within a Git repository, you will be setup with a branch to commit your code. Let's assume that you are setup with a "developer" branch. Using a web browser or a Git tool (such as <a class="external-link" href="https://git-for-windows.github.io/" rel="nofollow">Git Bash</a> or <a class="external-link" href="https://tortoisegit.org/" rel="nofollow">Tortoise Git</a>), switch to the "developer" branch and commit your files. Here are a series of commands to setup connection to Git repository from your own machine:</p><b>Git commands</b><pre># Setup user name and email so that all commits are given this identity
git config --global user.name "&lt;user_name&gt;"git config --global user.email "&lt;user_email&gt;"# Change to directory on your local machine to create local repository
cd &lt;existing_ <MadCap:variable name="General.LBEnterprise" />_project_directory&gt;# Initialize this directory for git
git init
# Switch to "developer" branch on your local repository
git checkout -b developer
# Connect your local "developer" repository to remote "developer" repository
git remote add developer &lt;repository_URL_of_remote_repo&gt;# Always perform a "git pull" before committing your files
git pull developer developer
# Add your files so that they can be committed to remote repository
#   You can use "--all" for all files or specify individual files instead of "--all"git add --all
# Commit your files to local repository
#   You would typically provide a brief commit message to include ticket number or service ID
#   If you enclose your ticket number or service ID in square brackets, then Datical will use the string inside square brackets as a label
#	For example, git commit -m "Fixes [JIRA-90210]"git commit -m "&lt;your commit message&gt;"# Perform a "git push" to update changes to remote repository
git push -u developer developer</pre>
        <h2 id="UserGuide:WhereDoICheckInDatabaseScripts(Git)-Relatedarticles">Related articles</h2>
        <ul>
            <li><a href="where-check-scriptsgit.htm">How To: Configure Packaging Order with ddl Folder Set to DIRECT or DDL_DIRECT</a>
            </li>
            <li><a href="where-check-scriptsgit.htm">How To: Improve Packager Performance</a>
            </li>
            <li><a href="where-check-scriptsgit.htm">How To: Improve Deployment Performance</a>
            </li>
            <li><a href="where-check-scriptsgit.htm">How To: Remove abandonded changes from Datical and lower environments</a>
            </li>
            <li><a href="where-check-scriptsgit.htm">How To: Abandon changes</a>
            </li>
        </ul>
    </body>
</html>