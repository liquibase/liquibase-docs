<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-user-guides/manage-changesets/changeset-version-strategy.html" />
        <meta name="description" content="Learn how Changeset versioning operates." />
    </head>
    <body>
        <h1>Changeset Versioning: version and versionStrategy</h1>
        <MadCap:snippetText src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>Changeset Versioning is only for "rerunnable" stored logic scripts (where rerunnable=true is the default behavior or has been set in the metadata.properties file):</p>
        <ul style="list-style-type: square;">
            <li>function folder or packageMethod=STOREDLOGIC</li>
            <li>package folder or packageMethod=STOREDLOGIC</li>
            <li>packageBody folder or packageMethod=STOREDLOGIC</li>
            <li>procedure folder or packageMethod=STOREDLOGIC</li>
            <li>trigger folder or packageMethod=STOREDLOGIC</li>
            <li>view folder or packageMethod=STOREDLOGIC</li>
        </ul>
        <p>Do <strong>NOT</strong> use ignore/unignore or cleanup/replace with stored logic scripts that are packaged in those folders. Only use the versioning with stored logic in those folders.</p>
        <p>During packaging, the following attributes are set:</p>
        <ul>
            <li><code>datical:origFilePath</code>
            </li>
            <li><code>datical:origFileName</code>
            </li>
            <li><code>datical:version</code>
            </li>
            <li><code>datical:versionStrategy</code>
            </li>
        </ul>
        <p>The packaging process checks to see if changesets using <code>origFilePath</code> and <code>orgFileName</code> have been deployed before.</p>
        <p>If so, the <code>datical:version</code> is incremented.</p>
        <p>For stored-logic changes (function, procedure, package, packagebody, trigger, view), the packaging process leaves the files in the directory rather than archive them.</p>
        <p>Simply fix your stored logic script and check the modified sql script into your SQL repository. 
			<span style="background-color: rgb(255,255,255);">
				This will trigger a <MadCap:variable name="General.LBEnterprise" /> packaging build job and the updated script will get packaged and available to be deployed.</p>
        <ul>
            <li>Since the script was previously packaged, Datical increments the version in its changeset.
				<ul><li>For example: The first time you commit a stored logic sql script, packager will add a changeset with datical:version="1" to the changelog.xml. Then after you modify the same stored logic script and commit it again, packager will add a changeset with datical:version="2" to the changelog.xml. New changesets with higher versions will be created each time the stored logic script is modified and committed.</li></ul></li>
            <li>In case of reverting stored logic to previous version, you will end up creating a new changeset version with same logic from previous version.
				<ul><li>For example: Previously the highest changeset for this stored logic object was version 5. Now you would like to revert back to using what you had before as version 3 of that change set. Modify the script in your sql repository to have the same contents as it had back when you were on version 3. Commit the modified script. Packager will add a new changeset with datical:version="6" to the changelog.xml. The contents of the new version 6 can be the same as an older version of the script, but a new higher versioned change set will be created. Change set version numbers increment higher with each iteration.</li></ul></li>
        </ul>
        <p>Use the <code>versionStrategy</code> variable in a metadata.properties file to specify deployment behavior when multiple versions are available:</p>
        <ul>
            <li><code>deployAll</code> - deploy all versions found (default)</li>
            <li><code>deployLatest</code> - deploy only the latest version</li>
        </ul>
        <p>The <code>datical:versionStrategy</code> changeset attribute takes its value from this setting.</p>
        <p>By default <MadCap:variable name="General.LBEnterprise" /> will deploy all versions of the changeset to the target environment, but that can be changed.</p>
        <ul>
            <li>For example, if a specific stored logic change was never deployed to the STAGE environment, then Datical will deploy all versions of the changeset (from oldest to newest) to STAGE.</li>
            <li>If you prefer to only deploy the latest/newest/highest version of stored logic change sets, then you will need to specify<code>versionStrategy=deployLatest</code>in the metadata.properties files for your stored logic folders. Then only the newest version of a stored logic changeset will be deployed.</li>
        </ul>
        <p>See <a href="../../../dba/package/package-sql-scripts-deployment/configure-packaging/metadata-properties.htm" rel="nofollow">Using the metadata.properties file</a>.</p>
    </body>
</html>