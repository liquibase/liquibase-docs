<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-user-guides/scm-packaging.html" />
        <meta name="description" content="Learn how to package SCM content." />
    </head>
    <body>
        <h1>User Guide: Developer SCM Packaging
			<MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This information is now maintained in the product documentation: <a href="scm-packaging.htm">Placing Files in the SCM Repository</a></p>
        <h2>Source Code Management (SCM) Mode</h2>
        <p>Getting files from an SCM system directly makes it easy to process files as they are checked in without any additional intervention required. Once SQL scripts are checked in to the SCM repository, the user can manually start the Deployment Packager via the <MadCap:variable name="General.LBEnterprise" /> GUI or CLI. It can also be automatically invoked through SCM polling or an SCM trigger in an automated build solution.</p>
        <p>Given the higher level of automation available in SCM Mode, there are a few additional steps that must be taken in order to supply the necessary metadata the Deployment Packager requires to successfully process SQL scripts.</p>
        <h2>Types of Database Changes</h2>
        <table>
            <tbody>
                <tr>
                    <td>
                        <p>DDL - Data Definition Language</p>
                    </td>
                    <td><pre xml:space="preserve">CREATE, ALTER, DROP, COMMENT, RENAME</pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>DML - Data Manipulation Language</p>
                    </td>
                    <td><pre xml:space="preserve">INSERT, UPDATE, DELETE, TRUNCATE, MERGE, SELECT</pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>DCL - Data Control Language</p>
                    </td>
                    <td><pre xml:space="preserve">GRANT, REVOKE</pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Stored Logic</p>
                    </td>
                    <td><pre xml:space="preserve">CREATE (OR REPLACE) / DROP PACKAGE, PACKAGE BODY, PROCEDURE, FUNCTION, TRIGGER</pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2>Source Control Operations in the Packager</h2>
        <table>
            <tbody>
                <tr>
                    <th>SCM Operation</th>
                    <th>
						Result in <MadCap:variable name="General.LBEnterprise" /> Packager</th>
                </tr>
                <tr>
                    <td>
                        <p>Check-In New File</p>
                    </td>
                    <td>
                        <ul>
                            <li>The <MadCap:variable name="General.LBEnterprise" /> packager will process the sql script as a new file and add the changes in the <MadCap:variable name="General.LBEnterprise" /> changelog.xml file.</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Rename File</p>
                    </td>
                    <td>
                        <ul>
                            <li>The <MadCap:variable name="General.LBEnterprise" /> packager will process the sql script with the new filename.</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>Move File</td>
                    <td>
                        <ul>
                            <li>Moving a file more than once before calling the <MadCap:variable name="General.LBEnterprise" /> Packager could cause errors.</li>
                        </ul>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Defining Labels in SCM Check In Comments</h3>
        <p>The <MadCap:variable name="General.LBEnterprise" /> packager will automatically parse the source control commit message, identify strings enclosed by square brackets, and use the strings as labels for the associated sql scripts.</p>
        <p>For example, if a developer checked in a SQL script with the comment</p>
        <blockquote><pre xml:space="preserve">"Add a new column foo to the table bar [label1,label2] [label3]"</pre>
        </blockquote>
        <p>then, the Deployment Packager would parse</p>
        <blockquote><pre xml:space="preserve">"label1", "label2", and "label3"</pre>
        </blockquote>
        <p>from the comment and add them as labels to the Change Set(s) associated with the file(s) retrieved from the SCM repository.</p>
        <h3>Automatically associating Rollback files with sql scripts</h3>
        <p>To include a rollback file for a given script, name the file containing the rollback script the same name as the change script appended with "-rollback" or "_rollback". For example, if the name of the script is AddMiddleNameColumnToAccountTable.sql, then the rollback file would be named either AddMiddleNameColumnToAccountTable-rollback.sql (with a dash) or AddMiddleNameColumnToAccountTable_rollback.sql (with an underscore).</p>
        <h2>SQL Script Directory Structure in the Development SCM</h2>
        <p>In order to associate a script with a particular type of content, SQL scripts should be placed in specifically named directories under the root directory of the SQL code repository. The expected directory structure is documented below. For organizational purposes, the directories can contain sub directories but the top level directory structure must be created as documented if you are using a <a href="scm-packaging.htm" rel="nofollow">fixed folder</a> configuration. (There is also the option of using a <a href="scm-packaging.htm" rel="nofollow">flexible folder</a> configuration where you can name the folders to whatever names you prefer.)</p><pre>sql_script_scm_root_dir
			&gt; archive
			&gt; data_dml
			&gt; ddl
			&gt; ddl_direct
			&gt; function
			&gt; package
			&gt; packagebody
			&gt; procedure
			&gt; sql_direct
			&gt; trigger
		&gt; view</pre>
        <table style="width: 65.956154%;">
            <colgroup>
                <col style="width: 16.451017%;" />
                <col style="width: 83.54898%;" />
            </colgroup>
            <tbody>
                <tr>
                    <th>
                        <p>SCM Directory Name</p>
                    </th>
                    <th>
                        <p>Description</p>
                    </th>
                </tr>
                <tr>
                    <td>
                        <p>sql_script_scm_root_dir</p>
                    </td>
                    <td>
                        <p>The SQL script repositories root directory. Name is defined by the user. e.g., "<span style="color: rgb(112,173,71);">sql_code"</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>archive</p>
                    </td>
                    <td>
                        <p>The archive directory is created and managed by the Deployment Packager. Files added in the ddl, sqlfile, sqlPlus and data_dml directories will be copied here after successful Packaging to prevent post Packaging modification. The user does not need to create this directory.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>data_dml</p>
                    </td>
                    <td>
                        <p>Contains scripts that load, manipulate or delete data.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>ddl</p>
                    </td>
                    <td>
                        <p>Contains scripts that make ddl changes such as creating, modifying and dropping tables, indexes, sequences, etc. By default this folder uses packageMethod=convert.</p>
                    </td>
                </tr>
                <tr>
                    <td>ddl_direct</td>
                    <td>Contains scripts that make ddl changes such as creating, modifying and dropping tables, indexes, sequences, etc. By default this folder uses packageMethod=ddl_direct.</td>
                </tr>
                <tr>
                    <td>
                        <p>function</p>
                    </td>
                    <td>
                        <p>Contains scripts that create new or replace existing functions.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>package</p>
                    </td>
                    <td>
                        <p>Contains scripts that create new or replace existing package definitions.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>packagebody</p>
                    </td>
                    <td>
                        <p>Contains scripts that create new or replace existing package bodies.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>sql</p>
                    </td>
                    <td>
                        <p>Contains SQL scripts that don't cleanly map to any other category. This scripts will be run as is using an internal SQL executor (JDBC).</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>sql_direct</p>
                    </td>
                    <td>
                        <p>Oracle and SQL Server only. The same behavior as scripts in the 'sql' folder, except these scripts will be deployed using the database's native loader (such as sqlplus for Oracle and sqlcmd for SQL Server).</p>
                    </td>
                </tr>
                <tr>
                    <td><span style="color: rgb(128,128,128);"><s>sqlplus</s>
                    </td>
                    <td><span style="color: rgb(128,128,128);"><s>(obsolete) Oracle only. The same behavior as scripts in the 'sql' folder, except these scripts will be deployed using Oracle's native loader - sqlplus.</s>
                    </td>
                </tr>
                <tr>
                    <td>trigger</td>
                    <td>Contains scripts that create new or replace existing trigger definitions.
                    </td>
                </tr>
                <tr>
                    <td>view</td>
                    <td>Contains scripts that create new or replace existing view definitions.
                    </td>
                </tr>
                <tr>
                    <td colspan="2"><em><em>table updated in November 2021</em><br /></em>
                    </td>
                </tr>
            </tbody>
        </table>
        <h2><MadCap:variable name="General.LBEnterprise" /> Packaging Methods</h2>
        <ul>
            <li><strong>Convert SQL Scripts</strong>
                <br />
                <ul>
                    <li>This is the default method used for any change placed in the <strong>/ddl</strong> folder</li>
                    <li>It utilizes a diff process to capture the changes from the supplied SQL scripts and create them as detailed change sets in the Datical changelog.xml file</li>
                    <li><MadCap:variable name="General.LBEnterprise" /> can then execute Forecast and Customer Rules against these detailed change sets</li>
                </ul>
            </li>
            <li><strong>Native SQL Scripts</strong>
                <ul>
                    <li>This method is used for all other packaging folders</li>
                    <li>It does not require the diff process. Because of this, the packaging process is faster</li>
                    <li>The limitation is that <MadCap:variable name="General.LBEnterprise" /> only supports limited execution of Forecast and Customer Rules against these change sets</li>
                </ul>
            </li>
        </ul>
        <h2>Order of Execution in SCM Mode</h2>
        <p>Deployment Packager in SCM Mode follows 3 ordering tiers for automating the execution order of new SQL scripts:</p>
        <h3><strong>Tier 1: Commit Sequence</strong>
        </h3>
        <ul>
            <li>
                <ul>
                    <li>Files in earlier commits will be processed ahead of files in subsequent commits</li>
                    <li>If the same file was modified in a later commit, it's most recent state will be used, but it will be processed in the order of the original commit</li>
                </ul>
            </li>
        </ul>
        <h3><strong>Tier 2: File Type Sequence</strong>
        </h3>
        <p>Order of execution for a single commit will process as follows:</p>
        <table style="width: 69.7735%;">
            <colgroup>
                <col style="width: 14.3918%;" />
                <col style="width: 19.2201%;" />
                <col style="width: 54.8747%;" />
                <col style="width: 11.5135%;" />
            </colgroup>
            <tbody>
                <tr>
                    <th>SCM Directory Name</th>
                    <th>Datical Packaging Method</th>
                    <th>Refactoring</th>
                    <th>Archived?</th>
                </tr>
                <tr>
                    <td><strong>ddl</strong>
                    </td>
                    <td>Convert SQL Scripts</td>
                    <td>assorted refactorings based on diff process</td>
                    <td>Yes</td>
                </tr>
                <tr>
                    <td><strong>ddl_direct</strong>
                    </td>
                    <td><strong>Native SQL Scripts</strong>
                    </td>
                    <td>sqlplus (Oracle), sqlcmd (SQL Server), edbplus (Postgres EnterpriseDB), or clpplus (DB2)&#160;refactoring</td>
                    <td>Yes
                    </td>
                </tr>
                <tr>
                    <td><strong>view</strong>
                    </td>
                    <td>Native SQL Scripts</td>
                    <td>view refactoring</td>
                    <td>No</td>
                </tr>
                <tr>
                    <td><strong>function</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>function refactoring</td>
                    <td>No
                    </td>
                </tr>
                <tr>
                    <td><strong>procedure</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>procedure refactoring</td>
                    <td>No
                    </td>
                </tr>
                <tr>
                    <td><strong>package</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>package refactoring</td>
                    <td>No
                    </td>
                </tr>
                <tr>
                    <td><strong>packagebody</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>packagebody refactoring</td>
                    <td>No
                    </td>
                </tr>
                <tr>
                    <td><strong>trigger</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>trigger refactoring</td>
                    <td>No
                    </td>
                </tr>
                <tr>
                    <td><strong>sql</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>sqlfile refactoring uses JDBC
                    </td>
                    <td>Yes
                    </td>
                </tr>
                <tr>
                    <td><span style="color: rgb(128,128,128);"><s><strong>sqlplus</strong></s>
                    </td>
                    <td><span style="color: rgb(128,128,128);"><s>Native SQL Scripts</s>
                    </td>
                    <td><span style="color: rgb(128,128,128);">Obsolete<s>: sqlplus refactoring (Oracle only)</s>
                    </td>
                    <td><span style="color: rgb(128,128,128);"><s>Yes</s>
                    </td>
                </tr>
                <tr>
                    <td><strong>sql_direct</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>sqlplus (Oracle), sqlcmd (SQL Server), edbplus (Postgres EnterpriseDB), or clpplus (DB2)&#160;refactoring</td>
                    <td>Yes
                    </td>
                </tr>
                <tr>
                    <td><strong>data_dml</strong>
                    </td>
                    <td>Native SQL Scripts
                    </td>
                    <td>sqlplus (Oracle), sqlcmd (SQL Server), edbplus (Postgres EnterpriseDB), or clpplus (DB2)&#160;refactoring
                    </td>
                    <td>Yes
                    </td>
                </tr>
                <tr>
                    <td colspan="4">
                        <p><em>table updated on 1/2/2018</em>
                        </p>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3><strong>Tier 3: Filename Sequence</strong>
        </h3>
        <p>If multiple files are included in the same commit, and in the same directory, then files will be executed in alphabetical filename order</p>
        <h2>Packaging Guidelines</h2>
        <h3>General Notes</h3>
        <ul>
            <li>Don't use <MadCap:variable name="General.LBEnterprise" /> to create databases or schema. Create them outside of <MadCap:variable name="General.LBEnterprise" />.</li>
            <li>Always store files as UTF8 encoding.</li>
        </ul>
        <h3>Object Specific Notes</h3>
        <table style="width: 1551.0px;">
            <colgroup />
            <tbody>
                <tr>
                    <th>Object Type</th>
                    <th>Notes</th>
                </tr>
                <tr>
                    <td>
                        <p>Inserts, Updates and Deletes (DML)</p>
                    </td>
                    <td>
                        <ul>
                            <li>
                                <p>All data related scripts should be placed in the "/data_dml" folder.</p>
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Procedures, Functions, Views and Triggers</p>
                    </td>
                    <td>
                        <ul>
                            <li>
                                <p>It's common for developers to want to manage some database changes like they manage their source code.</p>
                                <ul>
                                    <li>
                                        <p>In this scenario, developers can maintain procedures, functions, views and triggers in their respective folders with one object per file.</p>
                                    </li>
                                    <li>
                                        <p>When a change is needed, developers can simply modify the script and commit the change to source control.</p>
                                    </li>
                                    <li>
                                        <p>Datical will pick up the file and package it for deployment.</p>
                                    </li>
                                    <li>
                                        <p>The file will remain in the directory after packaging.</p>
                                    </li>
                                    <li>
                                        <p>The file SHOULD be named the same as the object name for ease of maintenance</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>Developers should create the objects with the CREATE &lt;object&gt; syntax.</p>
                                <ul>
                                    <li>
                                        <p><MadCap:variable name="General.LBEnterprise" /> will automatically convert the CREATE to an ALTER, if needed, so permissions are maintained on the object when deployed.</p>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Complex/Interdependent Database Changes</p>
                    </td>
                    <td>
                        <p>Typically, DDL changes will be placed in the "/ddl" folder. The exception to this is when you need to package/deploy complicated interdependent db changes such as the example below. In this case, place these scripts into the "/sql_direct" or "/ddl_direct" folder.</p><pre>create table
move data from old table to new table
drop old table</pre>
                    </td>
                </tr>
                <tr>
                    <td>All RENAMEs</td>
                    <td>Object renames need to be placed in the "/sql" or "/sql_direct" or "/ddl_direct" folder so they are processed as renames (instead of DROP and CREATE)</td>
                </tr>
                <tr>
                    <td>Scripts with Datical Properties</td>
                    <td>If your scripts need to take advantage of Datical Properties, then those scripts must be placed in the "/sql" folder.<em> (by the end of Q4 2017 you will also be able to place them in the "sql_direct/" folder)</em></td>
                </tr>
                <tr>
                    <td>All Other Changes</td>
                    <td>
                        <p>All other database objects should be placed in the "/ddl"&#160;or "/ddl_direct" or "/sql_direct" folders as shown in the table.</p>
                    </td>
                </tr>
            </tbody>
        </table>
    </body>
</html>