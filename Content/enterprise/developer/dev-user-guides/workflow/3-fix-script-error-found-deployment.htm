<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-user-guides/workflow/3-fix-script-error-found-deployment.html" />
        <meta name="description" content="Follow these steps to fix your scripts that have been deployed to one or more environments." />
    </head>
    <body>
        <h1>3.0. Fix a script error found after deployment to one or more environments
			<MadCap:snippetText src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <p>Once your scripts have been packaged successfully, those scripts may already have been deployed into one or more non-prod environments. However, you may discover that those changes need to be fixed - or rolled back completely - before deploying further into the pipeline.</p>
        <p>Follow these steps to fix your scripts that have been deployed to one or more environments:</p>
        <h3 id="id-3.0.Fixingascripterrorfoundafterdeploymenttooneormoreenvironments-ForrerunnableStoredLogicscripts(procedure,function,trigger,view,package,packagebody):">For rerunnable Stored Logic scripts (procedure, function, trigger, view, package, packagebody):</h3>
        <ul>
            <li>Simply fix your stored logic script and check the modified sql script into your SQL repository.</li>
            <li>This will trigger a Datical packaging build job and the updated script will get packaged and available to be deployed.
				<ul><li>Since the script was previously packaged, Datical increments the version in its changeset.
						<ul><li>For example: The first time you commit a stored logic sql script, packager will add a changeset with datical:version="1" to the changelog.xml. Then after you modify the same stored logic script and commit it again, packager will add a changeset with datical:version="2" to the changelog.xml. New changesets with higher versions will be created each time the stored logic script is modified and committed.</li></ul></li><li>In case of reverting stored logic to previous version, you will end up creating a new changeset version with same logic from previous version.
						<ul><li>For example: Previously the highest changeset for this stored logic object was version 5. Now you would like to revert back to using what you had before as version 3 of that change set. Modify the script in your sql repository to have the same contents as it had back when you were on version 3. Commit the modified script. Packager will add a new changeset with datical:version="6" to the changelog.xml. The contents of the new version 6 can be the same as an older version of the script, but a new higher versioned change set will be created. Change set version numbers increment higher with each iteration.</li></ul></li></ul></li>
            <li>By default Datical will deploy all versions of the changeset to the target environment, but that can be changed.
				<ul><li>For example, if a specific stored logic change was never deployed to the STAGE environment, then Datical will deploy all versions of the changeset (from oldest to newest) to STAGE.</li><li>If you prefer to only deploy the latest/newest/highest version of stored logic change sets, then you will need to specify <code>versionStrategy=deployLatest</code> in the metadata.properties files for your stored logic folders. Then only the newest version of a stored logic changeset will be deployed. See How To: Leverage the "metadata.properties" file for more information on metadata.properties file.</li></ul></li>
        </ul>
        <h3 id="id-3.0.Fixingascripterrorfoundafterdeploymenttooneormoreenvironments-Forddl,ddl_direct,data_dmlandsql_direct(non-rerunnable)scripts:">For <code>ddl</code>, <code>ddl_direct</code>, <code>data_dml</code> and <code>sql_direct</code> (non-rerunnable) scripts:</h3>
        <p>If you want to <u>cleanup</u> changes from a particular script:</p>
        <ul>
            <li>Check in a script with cleanup or rollback code and name the file with -cleanup in the file name
				<ul><li>For example, if you want to clean up changes from scripts "<code>member_siblings_tab.sql</code>", then check in the cleanup script with this name&#160;"<code>member_siblings_tab<span style="color: rgb(255,102,0);">-cleanup.sql"</code></li><li>Note: In Datical changeset, this will also set the "ignore" attribute to "true"</li></ul></li>
        </ul>
        <p>If you want to <u>replace</u> changes from a particular script:</p>
        <ul>
            <li>Check in a script with replace code and name the file with -replace in the file name
				<ul><li>For example, if you want to clean up changes from scripts "<code>member_siblings_tab.sql</code>", then check in the cleanup script with this name&#160;"<code>member_siblings_tab<span style="color: rgb(255,102,0);">-replace.sql"</code></li></ul></li>
        </ul>
    </body>
</html>