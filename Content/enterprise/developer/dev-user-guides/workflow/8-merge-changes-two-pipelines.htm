<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-user-guides/workflow/8-merge-changes-two-pipelines.html" />
        <meta name="description" content="Learn how to merge changes from one pipeline to another." />
    </head>
    <body>
        <h1>8.0. Merge changes from one pipeline to another
			<MadCap:snippetText src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" /></h1>
        <ol>
            <li>merge changes in source control</li>
            <li><MadCap:variable name="General.LBEnterprise" /> packages the merged change by adding the new pipeline's labels</li>
        </ol>
        <p>It is often the case that there is more than one branch that developers are working with.</p>
        <p>You could have a use case where developers work on concurrent releases and therefore use separate branches for their code (e.g., "Q1-2018" branch and "Q2-2018" branch). Once a release goes out to PROD, then the branch merges with the "release" or "main" branch (e.g., "Q1-2018" merges with "main"). Those changes also need to back-merge (or sync up) with the other concurrent release branch (e.g., "Q2-2018" branch).</p>
        <p>You could also have a use case where developers work on their own branch (e.g., "develop" or "integration" branch) and then submit a Pull Request for their changes to be merged to a "release" or "release-candidate" branch.</p>
        <p>In both use cases, there is a need to merge changes from one branch to another.</p>
        <p>In <MadCap:variable name="General.LBEnterprise" />, you would have a pipeline mapped to each SCM branch. Let's say you have two branches in your SCM called "release1" branch and "release2" branch. You would configure <MadCap:variable name="General.LBEnterprise" /> project such that each database connection has the following pipeline label:</p>
        <table style="width: 74.0101%;">
            <colgroup>
                <col style="width: 24.7322%;" />
                <col style="width: 17.0399%;" />
                <col style="width: 19.6689%;" />
                <col style="width: 19.0847%;" />
                <col style="width: 19.4742%;" />
            </colgroup>
            <tbody>
                <tr>
                    <th>
                    </th>
                    <th>REF</th>
                    <th>DEV</th>
                    <th>UAT</th>
                    <th>PROD</th>
                </tr>
                <tr>
                    <th>
                        <p>Pipeline1</p>
                        <p>(mapped to "release1" branch)</p>
                    </th>
                    <td>
                        <p>REF1</p>
                        <p>(<code>label="release1"</code>)</p>
                    </td>
                    <td>
                        <p>DEV1</p>
                        <p>(<code>label="release1"</code>)</p>
                    </td>
                    <td rowspan="2">
                        <p>UAT</p>
                        <p>(<code>label="release1,release2"</code>)</p>
                    </td>
                    <td rowspan="2">
                        <p>PROD</p>
                        <p>(<code>label="release1,release2"</code>)</p>
                    </td>
                </tr>
                <tr>
                    <th>
                        <p>Pipeline2</p>
                        <p>(mapped to "release2" branch)</p>
                    </th>
                    <td>
                        <p>REF2</p>
                        <p>(<code>label="release2"</code>)</p>
                    </td>
                    <td>
                        <p>DEV2</p>
                        <p>(<code>label="release2"</code>)</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <p>Any changes that package in pipeline1 will automatically get "release1" label. Once packaged, those changes can be deployed to DEV1, UAT and PROD. When "release1" branch is deployed to PROD, then it is eventually merged with "release2" branch.</p>
        <p>After the branch merge, a single packaging job will automatically merge all "release1" changes to "release2" - meaning that all changes that were previously given a "release1" label will now get a "release2" label also. When this happens, all changes that were packaged in "release1" branch become eligible to be deployed into REF2 and DEV2 because those changes now also have "release2" label.</p>
        <p>Here is when labels get added to <MadCap:variable name="General.LBEnterprise" /> changesets:</p>
        <table style="width: 100.0%;">
            <colgroup>
                <col style="width: 6.49161%;" />
                <col style="width: 10.5762%;" />
                <col style="width: 10.5762%;" />
                <col style="width: 10.5762%;" />
                <col style="width: 10.5762%;" />
                <col style="width: 10.5762%;" />
                <col style="width: 16.7761%;" />
                <col style="width: 10.5762%;" />
                <col style="width: 6.63749%;" />
                <col style="width: 6.63749%;" />
            </colgroup>
            <tbody>
                <tr>
                    <th>Developer checks in scripts</th>
                    <th>Package on REF1</th>
                    <th>Deploy to DEV1</th>
                    <th>Deploy to UAT</th>
                    <th>Deploy to PROD</th>
                    <th>
                        <p>"release1" branch merges with "release2" branch</p>
                    </th>
                    <th>Package on REF2</th>
                    <th>Deploy to DEV2</th>
                    <th>Deploy to UAT</th>
                    <th>Deploy to PROD</th>
                </tr>
                <tr>
                    <th>
                        <ul>
                            <li>script1</li>
                            <li>script2</li>
                        </ul>
                    </th>
                    <td><code>label="release1"</code>
                    </td>
                    <td><code>label="release1"</code>
                    </td>
                    <td><code>label="release1"</code>
                    </td>
                    <td><code>label="release1"</code>
                    </td>
                    <td><code>label="release1"</code>
                    </td>
                    <td><code>label="release1, release2"</code>
                    </td>
                    <td><code>label="release1, release2"</code>
                    </td>
                    <td><code>&lt;already deployed&gt;</code>
                    </td>
                    <td><code>&lt;already deployed&gt;</code>
                    </td>
                </tr>
            </tbody>
        </table>
    </body>
</html>