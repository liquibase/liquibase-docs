<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/developer/introduction.html" />
        <meta name="description" content="With Agile software development and build automation becoming part of the day-to-day life of developers, automation and process is increasingly needed for the database as much as it is for code." />
    </head>
    <body>
        <h1>Introduction to <MadCap:variable name="General.LBEnterprise" /></h1>
        <MadCap:snippetText src="../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p><MadCap:variable name="General.LBEnterprise" /> is a tool for implementing DevOps for databases.</p>
        <h2>DevOps Concepts</h2>
        <p>While the concept of a develop/test/deploy pipeline is familiar to software development, it is often not a concept that DBAs have needed to be involved with or understand. With Agile software development and build automation becoming part of the day-to-day life of developers, automation and process is increasingly needed for the database as much as it is for code.</p>
        <h3><strong>A Quick Primer on Release Pipelines</strong>
        </h3>
        <p><strong><span class="confluence-embedded-file-wrapper image-center-wrapper confluence-embedded-manual-size"><img class="confluence-embedded-image image-center" height="250" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/Picture1.png?version=1&amp;modificationDate=1569858443897&amp;cacheVersion=1&amp;api=v2&amp;width=728&amp;height=250" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/Picture1.png?version=1&amp;modificationDate=1569858443897&amp;cacheVersion=1&amp;api=v2&amp;width=947&amp;height=325 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/Picture1.png?version=1&amp;modificationDate=1569858443897&amp;cacheVersion=1&amp;api=v2&amp;width=728&amp;height=250 1x" /></strong>
        </p>
        <p>A release pipeline consists of the steps required to build, test and ultimately release completed software bug fixes and features to a production environment. The earliest stages of the pipeline are typically automated. Automation is almost always in place for building the application and performing low-level unit tests. Depending on the maturity of release automation, it can involve several levels of testing before reaching the final stage of production deployment. While all of these steps could be automated, complete automation through the entire process is exceedingly rare. Current practice involves manual testing near the end of the testing pipeline. As a final testing step, it is also common for the original person who requested the bug fix or feature to perform User Acceptance Testing of the software to validate that the implemented changes actually satisfy the original request or requirement. It's only after layers of testing and acceptance validation that the software is made available for release.</p>
        <p>To match the automation occurring with code development, schema changes need to progress with the code so both are ready for testing throughout the pipeline and ultimately available for release. In the picture above, the blue arrows represent automated steps in the process while the yellow arrows are manual. As can be seen, database deployments are almost always manual today. With the increasing build and test automation in place for code, the demand for schema test and deployment automation becomes more critical.</p>
        <p>In addition to the single pipeline example, development can occur in multiple, parallel pipelines: one to address issues in the current release and one or more additional pipelines for parallel development of future releases. To support this workflow, multiple deployment pipelines will need to be modeled and managed from the database perspective. This way, changes can be deployed to match the deployment of code. When appropriate, schema changes can be merged into other pipelines to match the branching and merging of code that occurs in multi-pipeline software development.</p>
        <h2>Moving Database Changes to a DevOps Process</h2>
        <p>Before adopting DevOps processes, database changes typically are managed manually by database administrators. Developers submit database code for review and manual deployment to the databases associated with the application at each stage in the process.</p>
        <p>When you transition to using <MadCap:variable name="General.LBEnterprise" />, the database changes move to a model where they are reviewed, packaged, and deployed automatically through the pipeline in parallel with application code changes.</p>
        <ol>
            <li>Create a <MadCap:variable name="General.LBEnterprise" /> project to define the workflow for database changes - the stages of the workflow parallel application code stages.</li>
            <li>Check database changes into Source Control Management (SCM) alongside application code.</li>
            <li><MadCap:variable name="General.LBEnterprise" /> tools package the SQL code into changesets and deploy the changes through the workflow</li>
        </ol>
        <h2>SCM Repositories for Database Code</h2>
        <p>First, configure a repository for the <MadCap:variable name="General.LBEnterprise" /> project. Second, configure a repository for database code. It can be in the existing developer repository, or a new sql script repository exclusively used for database changes.</p>
        <ul>
            <li><MadCap:variable name="General.LBEnterprise" /> projects</li>
            <li>SQL code changes for a project</li>
        </ul>
        <p>Configure 3rd party CI automation triggers or polling to start packaging operations automatically.</p>
        <h2><MadCap:variable name="General.LBEnterprise" /> Project: Defines the Databases for Each Stage and Deployment Order</h2>
        <p>A Datical project (also called a deployment plan) defines the workflow for database changes.</p>
        <ul>
            <li>Database and Schema(s) for each stage</li>
            <li>Name and order of pipelines</li>
            <li>Name and order of stages within each pipeline</li>
            <li>Packaging and Deployment configuration information</li>
        </ul>
        <h2>Labels and Contexts: Managing the Database Change Workflow</h2>
        <p>Labels are user-defined text strings created during packaging or later in the deployment process. They are used to group related database changes, selectively deploy groups of changes, track deployed changes, and manage deployment workflow. Labels are automatically applied during packaging, specified by a developer at code check-in time and can also be specified by the DevOps engineer when configuring <MadCap:variable name="General.LBEnterprise" />. The standard labels most often used in a project are the <strong>script name</strong>, <strong>pipeline</strong>, and <strong>ticket number</strong> labels.</p>
        <p>Contexts are used to group a subset of environments to deploy to. For example, use the context "Performance" to deploy to the Performance environment.</p>
        <h2>Automating Deployment Operations</h2>
        <p>Use automation software (build and release tools) to call <MadCap:variable name="General.LBEnterprise" /> to perform these operations on database changes automatically. If you don't have automation in place yet, these operations can also be performed manually using the <MadCap:variable name="General.LBEnterprise" /> CLI and/or <MadCap:variable name="General.LBEnterprise" /> GUI.</p>
        <h3>Package SQL Code into Changesets</h3>
        <ul>
            <li>Flexible interpretation of SQL</li>
            <li>Targeted handling for each type of SQL</li>
            <li>Apply labels for process tracking and change auditing</li>
        </ul>
        <h3>Validate SQL Code and Database Changes</h3>
        <ul>
            <li>At multiple stages in the pipeline (starting with packaging), <MadCap:variable name="General.LBEnterprise" /> checks the changes against rules that you configure. The rules reflect your DB administration practices and guidelines.</li>
        </ul>
        <h3>Forecast: Simulate and Assess the Changes</h3>
        <ul>
            <li>Simulates the changes and compares them to the existing database</li>
            <li>Compliance with rules set by database administration</li>
            <li>Impact on the database - determine whether the changes introduce errors or conflicts</li>
            <li>If the forecast fails, the changes are not deployed!</li>
        </ul>
        <h3>Deploy: Apply the changes</h3>
        <ul>
            <li>Simulate (again)</li>
            <li>Check rules (again)</li>
            <li>Changesets are deployed to the live database for a stage.</li>
        </ul>
        <h3>Status: Where are the changes?</h3>
        <ul>
            <li>A changelog is used to assess each stage in the process. It represents all changes that have been packaged.</li>
            <li>Status shows <em>whether all known changes have been deployed</em> as well as <em>what changes have or have not been deployed.</em></li>
        </ul>
        <p><span class="confluence-embedded-file-wrapper"><img class="confluence-embedded-image confluence-external-resource" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/27001122/worddav7c4e8455e824b333083e9c416084afc7.png?version=1&amp;modificationDate=1505422779837&amp;cacheVersion=1&amp;api=v2&amp;width=624&amp;height=334" loading="lazy" />
        </p>
        <h2>
			Overview of <MadCap:variable name="General.LBEnterprise" /> System Architecture</h2>
        <h3><MadCap:variable name="General.LBEnterprise" /> Solution Components &amp; Interactions</h3>
        <p><img class="confluence-embedded-image confluence-content-image-border" height="562" width="1000" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/image2020-5-13_14-18-17.png?version=1&amp;modificationDate=1589397500987&amp;cacheVersion=1&amp;api=v2&amp;width=800&amp;height=450" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/image2020-5-13_14-18-17.png?version=1&amp;modificationDate=1589397500987&amp;cacheVersion=1&amp;api=v2&amp;width=800&amp;height=450 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/image2020-5-13_14-18-17.png?version=1&amp;modificationDate=1589397500987&amp;cacheVersion=1&amp;api=v2&amp;width=800&amp;height=450 1x" />
        </p>
        <h3>Integrating <MadCap:variable name="General.LBEnterprise" /> into CI/CD Toolchains</h3>
        <p><img class="confluence-embedded-image confluence-content-image-border" height="555" width="1000" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/CICD-Arch-DMC.png?version=1&amp;modificationDate=1597701375438&amp;cacheVersion=1&amp;api=v2&amp;width=953&amp;height=529" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/CICD-Arch-DMC.png?version=1&amp;modificationDate=1597701375438&amp;cacheVersion=1&amp;api=v2&amp;width=953&amp;height=529 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/896565313/CICD-Arch-DMC.png?version=1&amp;modificationDate=1597701375438&amp;cacheVersion=1&amp;api=v2&amp;width=953&amp;height=529 1x" />
        </p>
    </body>
</html>