<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/developer/dev-b-p/mng-changesets-dev.html" />
        <meta name="description" content="Learn how to manage changesets during development and testing." />
    </head>
    <body>
        <h1>Developer Workflows: Managing Changesets During Development and Test</h1>
        <MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <ul>
            <li><a href="../best-practice-workflow.htm">Best Practices for Developer Workflows</a>
            </li>
            <li><a href="../../dba/package/package-sql-scripts-deployment/workflow-deploy-changesets/effect-during-murges.htm">Effects During Merges</a>
            </li>
            <li><a href="path-attributes-changesets.htm">Path and File Attributes for Changesets</a>
            </li>
            <li><a href="../dev-user-guides/manage-changesets/abandon-restore-changeset.htm">Abandoning and Restoring a Changeset: ignore and unignore</a>
            </li>
            <li><a href="../dev-user-guides/manage-changesets/changeset-version-strategy.htm">Changeset Versioning: version and versionStrategy</a>
            </li>
            <li><a href="../dev-user-guides/manage-changesets/cleaning-deployed-changesets.htm">Cleaning Up Deployed Changesets: cleanup</a>
            </li>
            <li><a href="replace-deployed-changesets.htm">Replacing Deployed Changesets: replace</a>
            </li>
            <li><a href="../../devops/move-changes-pipeline/roll-back-changes/rollback-changes.htm">Rollback Script Handling</a>
            </li>
        </ul>
        <h2>Overview</h2>
        <p>The normal flow of deployment goes through stages. Your stages will depend on the environment you're working in.</p>
        <p>Development &gt; Test &gt; Production</p>
        <h3>Developer Workflow</h3>
        <p>During development and test you may find problems with the original SQL scripts that were packaged and deployed to test. A failed test might indicate a need to remove or replace changesets that were deployed to Test and make adjustments in the Development environment. These adjustments might require the developer to:</p>
        <ul>
            <li><strong>Ignore a changeset</strong> - Abandon changeset in place and prevent it from being deployed further. If needed, you can recover it (unignore) later.</li>
            <li><strong>Clean up a previously deployed changeset</strong> - Ignore deployed changeset, create changesets to clean up any changes that were created.</li>
            <li><strong>Replace a previously deployed changeset</strong> - Replace the changes in a changeset with other changes. This usually implies running a cleanup first.</li>
            <li><strong>Use versions with changesets</strong> - Deploy only the latest version of a changeset. This capability is intended for use with programmatic parts of the database (stored logic).</li>
        </ul>
        <p>To enable this capabilty, new changeset attributes are added to all changesets generated from a SQL script.</p>
        <h3>Comparison to Rollback</h3>
        <p>The normal release workflow allows you to deploy and roll back changesets throughout a project pipeline. Rollbacks can be automatic for some changes or be performed by custom rollback scripts you supply. See Rolling Back Changes.</p>
        <p>However, the development workflow is for making changes to the changesets (and other changesets they affect). When you use the -ignore, -cleanup, and -replace scripts, they mark the original changesets so that they are no longer deployed. Changes are anticipated at these stages in a pipeline. They are not expected in later stages.</p>
        <p>See <a href="../../devops/move-changes-pipeline/roll-back-changes/rollback-changes.htm">Rollback Script Handling</a> for more information on how to work with existing rollback scripts in a development workflow.</p>
        <h3>Example: ignoring a deployed changeset</h3>
        <p>To signal a change, you create a special file using the same base name as the original SQL script, apply a suffix (for example, -ignore), and place it in the same directory where you placed the original file.</p>
        <ul>
            <li><code>invoice_columns.sql</code>
            </li>
            <li><code>invoice_columns-ignore.sql or invoice_columns_ignore.sql</code>
            </li>
        </ul>
        <p>When <code>invoice_columns-ignore.sql or invoice_columns_ignore.sql</code> is processed, the <code>ignore</code> attribute is set on all of the original changesets produced by <code>invoice_columns.sql</code>. The changesets are no longer deployed.</p>
        <p>Do not use more than one suffix when working in a development workflow (-ignore, -unignore, -replace, -cleanup, -rollback). For example, when you update a <code>myscript-rollback.sql or myscript_rollback.sql</code> file, you update it in place. Do not create a <code>myscript-rollback-replace</code> script. It causes an error during packaging.</p>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">It is important to maintain consistent case in workflow file names!</p>
        <p>When creating a new workflow file it is important to maintain file name casing that is consistent with the original file. <code>MYSCRIPT-ignore.sql</code> will not match <code>myscript.sql</code>.</p>
        <p>If you are using git, you may have to run the following command to configure your repository to enforce consistent file name case:&#160;<strong><code>git config core.ignorecase false</code></strong></p>
    </body>
</html>