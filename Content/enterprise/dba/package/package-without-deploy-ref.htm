<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/dba/package/package-without-deploy-ref.html" />
        <meta name="description" content="Learn how to package without deploying to the REF Database." />
    </head>
    <body>
        <h1>Package Without Deploying to the REF Database</h1>
        <MadCap:snippetText src="../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>If you need to package a new change without deploying it to the REF database, you can use label logic to identify the changesets not to deploy. The REF database is typically a schema-only database (no or limited data) and used in the first deployment step in a pipeline. The first label in the REF dbdef will be used as a label for the pipeline.
        </p>
        <ol>
            <li>Set a label expression for the dbdef for the REF database. The expression should exclude changes marked with a particular label. For example, the label expression could include a !skip_ref element to mean that when a skip_ref label is found for a changeset, do not deploy the changeset. If the label used to identify the pipeline is "main", then the resulting label expression on the dbdef would be: (main AND !skip_ref)</li>
            <li>Set a label in a metadata.properties file. The label is applied to all changesets generated from scripts in the directory where the metadata.properties file is found. For example, set labels=skip_ref.</li>
            <li>Put a copy of the metadata.properties file in each of the desired script directories used by the project for packaging (for example, ddl, ddl_direct, sql, sql_direct).</li>
            <li>Run Deployment Packager.</li>
        </ol>
    </body>
</html>