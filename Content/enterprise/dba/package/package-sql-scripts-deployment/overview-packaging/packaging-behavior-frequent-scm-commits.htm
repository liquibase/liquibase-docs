<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/dba/package/package-sql-scripts-deployment/overview-packaging/packaging-behavior-frequent-scm-commits.html" />
        <meta name="description" content="Learn about packaging behavior with frequent SCM commits." />
    </head>
    <body>
        <h1>Packaging Behavior with Frequent SCM Commits</h1>
        <MadCap:snippetBlock src="../../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <h2>Single Packaging Job</h2>
        <ol>
            <li>When a single packaging job is triggered by a single commit, packaging tasks are performed in linear order.<br />			Check out from SCM</li>
            <p>Project file</p>
            <p>SQL scripts included in a commit</p>
            <li>Package each script</li>
            <li>Deploy changes to the REF database</li>
            <li>Commit changes to SCM</li>
            <p>Project file</p>
            <p>SQL scripts included in a commit</p>
            <li>Update sqlSCMLastChangeID</li>
        </ol>
        <h2>Packaging Jobs at Speed</h2>
        <p>Packaging scales correctly under load. As you scale up the number of developers who commit code on a project and the number of commits over time, packaging jobs do the right thing when multiple commits are performed. In a CI/CD setup, the SCM is set up so that a commit triggers a packaging job. in the following example, consider what happens when commits 2 and 3 are performed before packaging job 1 gets to the point of reading the SCM for commit 1.</p>
        <ol>
            <li>Commit triggers packaging job 1</li>
            <p>SQLfile_A.sql</p>
            <p>SQLfile_B.sql</p>
            <li>Commit triggers packaging job 2</li>
            <p>SQLfile_A.sql</p>
            <p>SQLfile_C.sql</p>
            <li>Commit triggers packaging job 3</li>
            <p>SQLfile_A.sql</p>
        </ol>
        <p>Q: What happens when the commits for packaging jobs 2 and 3 come in so fast that packaging job 1 finds both later commits for SQLfile_A.sql?</p>
        <p>A: Packaging job 1 picks up commits made since the last sqlScmLastImportID. If other commits were made between the start of the packaging job and the time it reads the SCM, those commits are picked up too.</p>
        <p>Q: In the example what do packaging jobs 2 and 3 do in response to SQLfile_A.sql?</p>
        <p>A: If a packaging job is run after a commit's changes have been packaged, it updates the pipeline label and then ends. In the example, if packaging job 1 picks up all the commits, then subsequent packaging jobs perform the following actions:</p>
        <ul>
            <li>Packaging job 2 packages SQLfile_C.sql but only updates the pipeline label for SQLfile_A.sql</li>
            <li>Packaging job 3 only updates  the pipeline label for SQLfile_A.sql</li>
        </ul>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;"> You should only run one deploy packager job at a time for each Datical project.  Do not run multiple simultaneous packager jobs for the same Datical project.</p>
    </body>
</html>