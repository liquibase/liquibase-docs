<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/dba/package/package-sql-scripts-deployment/place-files-scm-repo/custom-packaging-order.html" />
        <meta name="description" content="Learn how to override the default packaging behavior." />
    </head>
    <body>
        <h1>Custom Packaging Order</h1>
        <MadCap:snippetBlock src="../../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>In some cases you may need to override the default packaging behavior for SQL script processing order.</p>
        <p>Controlling the order becomes more important when you check in SQL scripts that have dependencies on objects created by other SQL scripts, typically in a single commit that contains many changes to many types of object.</p>
        <h2>Specifying Packaging Order Behavior for the Project in deployPackager.properties</h2>
        <p>Use the <strong>packageOrderStrategy</strong> property in <code>deployPackager.properties</code> to choose from three strategies.</p>
        <ul>
            <li>DEFAULT - Use the default packaging order. See also Processing Order in&#160;<a href="fixed-folder-names.htm">Fixed Folder Names</a>.&#160;<ul><li>Commit time - Process all files committed at the same as a group. If multiple groups are found, process them in commit-time order.</li><li>File type (folder) - Within a commit group, process files in folder order (corresponds to object type)</li><li>Alphabetical by filename - Within a folder, process files in alphabetical order.</li></ul></li>
            <li>PACKAGEMETHOD - Do not consider commit order. See also&#160;<a href="flexible-folder-names.htm">Flexible Folder Names</a>.&#160;<ul><li>packageMethod setting - Process in order of packageMethod (set in <code>metadata.properties</code>)</li><li>Alphabetical by filename - Within a packageMethod, process files in alphabetical order.</li></ul></li>
            <li>ALPHANUMERIC - Process in alphabetical order only. Do not consider commit time or packageMethod.&#160;<ul><li>That the name of the folder plus the filename are included when using alphanumeric packageOrderStrategy.</li><li>The primary sorting is alphanumeric by name of the folder, and the secondary sorting is alphanumeric by name of the file within each folder.</li></ul></li>
        </ul>
        <h2>Specifying Folder-Processing Order in metadata.properties</h2>
        <p>You can meet special needs for processing order by directly specifying the folder-processing order.</p>
        <ol>
            <li>Place a <code>metadata.properties</code> file in the top of the SQL code tree. It must correspond to the directory specified in the <strong>sqlScmSQLBaseDir</strong> property in the <code>deployPackager.properties</code> file.</li>
            <li>Use the <strong>folderOrder </strong>property in that <code>metadata.properties</code> file to specify a list of folders. Files in the folder are pulled to the front of the list of files to package, ahead of files in other directories. (Note that if you use custom folderOrder, the commit time will not be considered as part of the overall ordering.)</li>
        </ol>
        <h3>Examples: Specifying Packaging in a Multiple Schema Project</h3>
        <p>Each entry in the comma-separated list of values in the&#160;<strong>folderOrder&#160;</strong>property is used as a filter on the path to the file.</p>
        <ul>
            <li>Files matching the filter are moved to the front of the list of files to package. The process is repeated for each value, in order.</li>
            <li>The sorting takes place <em>after</em> the baseline packaging order is determined using the&#160;<strong>packageOrderStrategy </strong>property.</li>
            <li>Any file in the list that does not match one of the filters is processed after the ordered files and according to the&#160;<strong>packageOrderStrategy&#160;</strong>setting</li>
            <li><span style="color: rgb(9,30,66);">This method is intended as an extension to be used with the PACKAGEMETHOD and ALPHANUMERIC strategies.&#160;(It is not intended to be used with DEFAULT stategy.)
            </li>
        </ul>
        <h3 id="CustomPackagingOrder-SQLCodeFolderOrganizationandPackagingStrategyfortheExamples">SQL Code Folder Organization and Packaging Strategy for the Examples</h3>
        <p>The directories in a SQL Code repository for a Datical project that manages two schema are organized primarily as follows:</p>
        <ol>
            <li>By <em>schema name</em></li>
            <li>Then by <em>object type</em> name.</li>
        </ol>
        <p>SQL files are placed in the folders according to the object type they create or modify.</p>
        <p>
            <br />
        </p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>SQL Code Repository Layout: First by Schema then by Object Type</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>C:.
└───sql_code
    ├───schema1
    │   ├───constraints
    │   ├───grants
    │   ├───indexes
    │   ├───tables
    │   ├───types
    │   └───views
    └───schema2
        ├───constraints
        ├───grants
        ├───indexes
        ├───tables
        ├───types
        └───views</pre>
            </div>
        </div>
        <h3 id="CustomPackagingOrder-Goal:SpecifyPackagingOrder">Goal: Specify Packaging Order</h3>
        <p>The following examples progressively apply packaging order options. The desired outcome is to have scripts processed in the following order:</p>
        <ul>
            <li>By a customer object type (folder) order:&#160;types, tables, grants, indexes, constraints, views</li>
            <li>Within each type, scripts for schema2 are packaged before scripts for schema1</li>
        </ul>
        <p>Example output is obtained by running Deployment Packager with the preview=true option, which shows what files would be processed but does not actually process them.</p>
        <p>Output is shown for each of the following applications of options. It shows the resulting file order for the options specified.</p>
        <ol>
            <li><code>packageOrderStrategy</code> order</li>
            <li>Single <code>folderOrder</code> value</li>
            <li>Multiple <code>folderOrder</code> values in the desired order</li>
            <li>Addition of <code>folderOrder</code> values for the parent folders (schema2, schema1)</li>
        </ol>
        <h3 id="CustomPackagingOrder-1.PackagingOrderBasedonpackageOrderStrategyOnly">1.&#160;Packaging Order Based on packageOrderStrategy Only</h3>
        <p>The&#160;<strong>packageOrderStrategy&#160;</strong>for this project is set to <strong>PACKAGEMETHOD</strong>. Commit order of the files in the repository is not considered during initial ordering. Files are ordered first <em>by their package method</em>, then by <em>alphabetical order</em>.</p>
        <p>To determine default ordering of the files in the repository without packaging, run <code>hammer deployPackager.groovy</code>&#160;with the <code>preview=true</code> option:</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>Executing the Deploy Packager in Preview Mode</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>&gt;hammer groovy deployPackager.groovy scm=true pipeline=58_DEMO_PIPE1 preview=true</pre>
            </div>
        </div>
        <p>
            <br />
        </p>
        <p>The order in which files will be packaged is the last message in the preview output.</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>Initial File Order Based on 'packageOrderMethod' setting of 'PACKAGEMETHOD'</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>     PACKAGING ORDER FOR COMMIT FILES:
     ---------------------------------
     packageOrderStrategy: PACKAGEMETHOD
     folderOrder:
     COMMIT ID    PACKAGE METHOD    FILENAME/ROLLBACKFILE
     da62531      convert           schema1\constraints\SCHEMA1_FKS.sql
     da62531      convert           schema1\constraints\SCHEMA1_PK_UQ_CONSTRAINTS.sql
     da62531      convert           schema1\indexes\SCHEMA1_I_NAME.sql
     da62531      convert           schema1\tables\SCHEMA1_T_BORROWING.sql
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER.sql
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER_RATING.sql
     da62531      convert           schema1\tables\SCHEMA1_T_EXEMPLAR.sql
     da62531      convert           schema1\tables\SCHEMA1_T_FILM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_GENRE.sql
     da62531      convert           schema1\tables\SCHEMA1_T_MEDIUM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_ORDER.sql
     da62531      convert           schema2\constraints\SCHEMA2_FKS.sql
     da62531      convert           schema2\constraints\SCHEMA2_PK_UQ_CONSTRAINTS.sql
     da62531      convert           schema2\indexes\SCHEMA2_I_NAME.sql
     da62531      convert           schema2\tables\SCHEMA2_T_BORROWING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER_RATING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_EXEMPLAR.sql
     da62531      convert           schema2\tables\SCHEMA2_T_FILM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_GENRE.sql
     da62531      convert           schema2\tables\SCHEMA2_T_MEDIUM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_ORDER.sql
     da62531      ddl_direct        schema2\complex_tables\SCHEMA1_N_CUSTOMER.sql
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER.sql
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER_HAS_FILM.sql
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER.sql
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER_HAS_FILM.sql
     da62531      direct            schema1\grants\SCHEMA1_GRANT_SELECT.sql
     da62531      direct            schema1\types\SCHEMA1_UDTS.sql
     da62531      direct            schema2\types\SCHEMA2_UDTS.sql</pre>
            </div>
        </div>
        <p>This ordering has grouped files by&#160;<strong>PACKAGEMETHOD&#160;</strong>(determined by settings in the metadata.properties files in the SQL Code repo) and sub-ordered them alphabetically within each&#160;<strong>PACKAGEMETHOD&#160;</strong>grouping.</p>
        <h3 id="CustomPackagingOrder-2.SpecifyingaSingleFolderinfolderOrder">2. Specifying a Single Folder in folderOrder</h3>
        <p>Adding the&#160;<strong>folderOrder&#160;</strong>property in a&#160;<strong>metadata.properties&#160;</strong>file in the root of this SQL code repository allows the user to reorder these files to accommodate this projects specific dependency rules. First, the property is set to give anything in a 'types' folder ultimate precedence.</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>sql_code/metadata.properties Edit #1: Move 'types' to the Top of the Package Order List</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>folderOrder=types</pre>
            </div>
        </div>
        <p>Running deployPackager.groovy in preview mode again yields the desired ordering results.</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>'types' First File Order</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>     PACKAGING ORDER FOR COMMIT FILES:
     ---------------------------------
     packageOrderStrategy: PACKAGEMETHOD
     folderOrder: types
     COMMIT ID    PACKAGE METHOD    FILENAME/ROLLBACKFILE
     da62531      direct            schema1\types\SCHEMA1_UDTS.sql					
     da62531      direct            schema2\types\SCHEMA2_UDTS.sql						 
// ------------------------------------------------------------------------------------------'types' have moved from the bottom to the top of the Packaging Order
     da62531      convert           schema1\constraints\SCHEMA1_FKS.sql
     da62531      convert           schema1\constraints\SCHEMA1_PK_UQ_CONSTRAINTS.sql
     da62531      convert           schema1\indexes\SCHEMA1_I_NAME.sql
     da62531      convert           schema1\tables\SCHEMA1_T_BORROWING.sql
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER.sql
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER_RATING.sql
     da62531      convert           schema1\tables\SCHEMA1_T_EXEMPLAR.sql
     da62531      convert           schema1\tables\SCHEMA1_T_FILM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_GENRE.sql
     da62531      convert           schema1\tables\SCHEMA1_T_MEDIUM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_ORDER.sql
     da62531      convert           schema2\constraints\SCHEMA2_FKS.sql
     da62531      convert           schema2\constraints\SCHEMA2_PK_UQ_CONSTRAINTS.sql
     da62531      convert           schema2\indexes\SCHEMA2_I_NAME.sql
     da62531      convert           schema2\tables\SCHEMA2_T_BORROWING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER_RATING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_EXEMPLAR.sql
     da62531      convert           schema2\tables\SCHEMA2_T_FILM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_GENRE.sql
     da62531      convert           schema2\tables\SCHEMA2_T_MEDIUM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_ORDER.sql
     da62531      ddl_direct        schema2\complex_tables\SCHEMA1_N_CUSTOMER.sql
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER.sql
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER_HAS_FILM.sql
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER.sql
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER_HAS_FILM.sql
     da62531      direct            schema1\grants\SCHEMA1_GRANT_SELECT.sql</pre>
            </div>
        </div>
        <h3 class="auto-cursor-target" id="CustomPackagingOrder-3.SpecifyingMultipleFoldersforMoreComplexDependencies">3. Specifying Multiple Folders for More Complex Dependencies</h3>
        <p>Use multiple values for <strong>folderOrder</strong> in the <code>metadata.properties</code> file to fulfill more complex dependency ordering.</p>
        <p>Consider the following dependencies between SQL files:</p>
        <ul>
            <li class="auto-cursor-target">constraints and indexes must be packaged after tables because they refer to a table.</li>
            <li class="auto-cursor-target">tables must be packaged after types, because they refer to a type</li>
            <li class="auto-cursor-target">views must be packaged after grants, because they may rely on&#160;<em>select&#160;</em>operations on object. The grants provide the select privilege to desired objects.</li>
        </ul>
        <p>
            <br />
        </p>
        <p>For these constraints, with files organized by schema and object type as specified above, you would use the following directory order.</p>
        <ul>
            <li>types</li>
            <li>tables</li>
            <li>grants</li>
            <li>indexes</li>
            <li>constraints</li>
            <li>views</li>
        </ul>
        <p>
            <br />
        </p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>sql_code/metadata.properties Edit #2: Order the rest of the object type subdirectories</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>folderOrder=types,tables,grants,indexes,constraints,views</pre>
            </div>
        </div>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>Second Level Sub-directory Dependency Ordering Applied</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>     PACKAGING ORDER FOR COMMIT FILES:
     ---------------------------------
     packageOrderStrategy: PACKAGEMETHOD
     folderOrder: types, tables, grants, indexes, constraints, views
     COMMIT ID    PACKAGE METHOD    FILENAME/ROLLBACKFILE
     da62531      direct            schema1\types\SCHEMA1_UDTS.sql							
     da62531      direct            schema2\types\SCHEMA2_UDTS.sql
// ------------------------------------------------------------------------------------------'types' first
     da62531      convert           schema1\tables\SCHEMA1_T_BORROWING.sql					
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER.sql					
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER_RATING.sql
     da62531      convert           schema1\tables\SCHEMA1_T_EXEMPLAR.sql
     da62531      convert           schema1\tables\SCHEMA1_T_FILM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_GENRE.sql
     da62531      convert           schema1\tables\SCHEMA1_T_MEDIUM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_ORDER.sql
     da62531      convert           schema2\tables\SCHEMA2_T_BORROWING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER_RATING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_EXEMPLAR.sql
     da62531      convert           schema2\tables\SCHEMA2_T_FILM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_GENRE.sql
     da62531      convert           schema2\tables\SCHEMA2_T_MEDIUM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_ORDER.sql
// ------------------------------------------------------------------------------------------then 'tables'
     da62531      direct            schema1\grants\SCHEMA1_GRANT_SELECT.sql					
// ------------------------------------------------------------------------------------------then 'grants'
     da62531      convert           schema1\indexes\SCHEMA1_I_NAME.sql						
     da62531      convert           schema2\indexes\SCHEMA2_I_NAME.sql
// ------------------------------------------------------------------------------------------then 'indexes'
     da62531      convert           schema1\constraints\SCHEMA1_FKS.sql						
     da62531      convert           schema1\constraints\SCHEMA1_PK_UQ_CONSTRAINTS.sql
     da62531      convert           schema2\constraints\SCHEMA2_FKS.sql
     da62531      convert           schema2\constraints\SCHEMA2_PK_UQ_CONSTRAINTS.sql
// ------------------------------------------------------------------------------------------then 'constraints'
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER.sql					
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER_HAS_FILM.sql
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER.sql
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER_HAS_FILM.sql
// ------------------------------------------------------------------------------------------then 'views'</pre>
            </div>
        </div>
        <h3 class="auto-cursor-target" id="CustomPackagingOrder-4.AddingParentDirectoriestotheOrdering">4. Adding Parent Directories to the Ordering</h3>
        <p>Consider an additional constraint: for each of the preceding object type folders, <code>schema2</code> scripts should precede <code>schema1</code> scripts during packaging.</p>
        <p>To apply this constraint to the example, append the ordering for the parent directories of the object type directories <em>in the order that they should be processed</em>.</p>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>sql_code/metadata.properties Edit #3: Process Scripts in the 'schema2' Directory Tree Before the 'schema1' Directory Tree</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>folderOrder=types,tables,grants,indexes,constraints,views,schema2,schema1</pre>
            </div>
        </div>
        <div class="code panel pdl conf-macro output-block" style="border-width: 1px;">
            <div class="codeHeader panelHeader pdl" style="border-bottom-width: 1px;"><b>First &amp; Second Level Sub-directory Dependency Ordering Applied</b>
            </div>
            <div class="codeContent panelContent pdl"><pre>     PACKAGING ORDER FOR COMMIT FILES:
     ---------------------------------
     packageOrderStrategy: PACKAGEMETHOD
     folderOrder: types, tables, grants, indexes, constraints, views, schema2, schema1
     COMMIT ID    PACKAGE METHOD    FILENAME/ROLLBACKFILE
     da62531      direct            schema2\types\SCHEMA2_UDTS.sql						
     da62531      direct            schema1\types\SCHEMA1_UDTS.sql
// ------------------------------------------------------------------------------------------'types' first; schema2 tree is processed first
     da62531      convert           schema2\tables\SCHEMA2_T_BORROWING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER.sql
     da62531      convert           schema2\tables\SCHEMA2_T_CUSTOMER_RATING.sql
     da62531      convert           schema2\tables\SCHEMA2_T_EXEMPLAR.sql
     da62531      convert           schema2\tables\SCHEMA2_T_FILM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_GENRE.sql
     da62531      convert           schema2\tables\SCHEMA2_T_MEDIUM.sql
     da62531      convert           schema2\tables\SCHEMA2_T_ORDER.sql
     da62531      convert           schema1\tables\SCHEMA1_T_BORROWING.sql
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER.sql
     da62531      convert           schema1\tables\SCHEMA1_T_CUSTOMER_RATING.sql
     da62531      convert           schema1\tables\SCHEMA1_T_EXEMPLAR.sql
     da62531      convert           schema1\tables\SCHEMA1_T_FILM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_GENRE.sql
     da62531      convert           schema1\tables\SCHEMA1_T_MEDIUM.sql
     da62531      convert           schema1\tables\SCHEMA1_T_ORDER.sql
// ------------------------------------------------------------------------------------------then 'tables'; schema2 tree is processed first
     da62531      direct            schema1\grants\SCHEMA1_GRANT_SELECT.sql
// ------------------------------------------------------------------------------------------then 'grants'
     da62531      convert           schema2\indexes\SCHEMA2_I_NAME.sql
     da62531      convert           schema1\indexes\SCHEMA1_I_NAME.sql
// ------------------------------------------------------------------------------------------then 'indexes'; schema2 tree is processed first
     da62531      convert           schema2\constraints\SCHEMA2_FKS.sql
     da62531      convert           schema2\constraints\SCHEMA2_PK_UQ_CONSTRAINTS.sql
     da62531      convert           schema1\constraints\SCHEMA1_FKS.sql
     da62531      convert           schema1\constraints\SCHEMA1_PK_UQ_CONSTRAINTS.sql
// ------------------------------------------------------------------------------------------then 'constraints'; schema2 tree is processed first
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER.sql
     da62531      storedlogic       schema2\views\SCHEMA2_V_CUSTOMER_HAS_FILM.sql
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER.sql
     da62531      storedlogic       schema1\views\SCHEMA1_V_CUSTOMER_HAS_FILM.sql
// ------------------------------------------------------------------------------------------then 'views'; schema2 tree is processed first</pre>
            </div>
        </div>
        <p>
            <br />
        </p>
    </body>
</html>