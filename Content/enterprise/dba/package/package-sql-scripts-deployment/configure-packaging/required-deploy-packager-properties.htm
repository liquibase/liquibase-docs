<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/dba/package/package-sql-scripts-deployment/configure-packaging/required-deploy-packager-properties.html" />
        <meta name="description" content="Learn how to use the required deployPackager.properties file." />
    </head>
    <body>
        <h1>Use the Required <code>deployPackager.properties</code> File</h1>
        <p>
            <MadCap:snippetText src="../../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        </p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This guide applies to <MadCap:variable name="General.LBEnterprise" /> version 8.2 and earlier. <MadCap:variable name="General.LBEnterprise" /> 8.3 and later automatically adds a <code>deployPackager.properties</code> file when a new project is created. This works in the CLI, GUI, or a project_creator groovy script.</p>
        <p>A project must have a <code>deployPackager.properties</code> file in order for SQL scripts to be packaged for it.</p>
        <h2><code>deployPackager.properties</code> Configuration</h2>
        <p>Before using the Deployment Packager, a <code>deployPackager.properties</code> will need to be created in the top level of your <MadCap:variable name="General.LBEnterprise" /> project directory. This property file contains a variety of configuration information used by the Deployment Packager to interact with SCM solutions and to perform database backups and restorations.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">There is a sample <code>deployPackager.properties</code> file provided in DaticalDB/repl/scripts.</p>
        <h3>
			Properties Prefixes for SQL Code and <MadCap:variable name="General.LBEnterprise" /> Project Files</h3>
        <p>The property prefix indicates the type of files it affects and the location of those files.</p>
        <ul>
            <li><strong>sqlScm</strong> prefix – SQL code files (in predetermined subdirectories)</li>
            <li><strong>ddbScm</strong> prefix – Datical project files (in a predetermined hierarchy)</li>
        </ul>
        <p>When properties for the project are not specified (<strong>ddbScm</strong> prefix), the values typically default to the properties for the SQL code (<strong>sqlScm</strong> prefix)</p>
        <h3>Pipeline and DbDef Branch Settings</h3>
        <p>In order for the Deployment Packager to process the appropriate scripts for a specific dbdef or pipeline, the SCM branch name and the ID for the last import processed need to be tracked separately in the <code>deployPackager.properties</code> files. These properties should take the following form:</p>
        <ul>
            <li>Branch name:
				<ul><li>{<em>PipelineName</em>}.sqlScmBranch</li><li>{<em>DbDefName</em>}.sqlScmBranch for the branch name</li></ul></li>
            <li>Last
				<ul><li>{<em>PipelineName</em>}.sqlScmLastImportID</li><li>{<em>DbDefName</em>}.sqlScmLastImportID.</li></ul></li>
        </ul>
        <p>Refer to the properties in the bottom section of the file below for an example of the Deployment Pipeline specific properties.</p>
        <h2>Property List for deployPackager.properties</h2>
        <p>The following properties can be set in the <code>deployPackager.properties</code> file: (note that these properties are NOT in alphabetical order)</p>
        <table>
            <tbody>
                <tr>
                    <th>
                        <p><span style="color: rgb(255,255,255);"><strong>Name</strong>
                        </p>
                    </th>
                    <th>Applies to</th>
                    <th>
                        <p><strong>Description</strong>
                        </p>
                    </th>
                </tr>
                <tr>
                    <td>
                        <p><strong>databaseBackupRestoreLocation</strong>
                        </p>
                    </td>
                    <td>Backup</td>
                    <td>
                        <p>Location to use for packager-driven backups of the database. During processing, Deployment Packager makes backups of the database that are normally stored on the database server itself.</p>
                        <p>Depending on your DBMS, the location may need to be specified as directory or a specific file.</p>
                        <ul>
                            <li><strong>Oracle, MSSQL,</strong>&#160;and <strong>DB2</strong> – the directory is on the server host, so the path expression is OS-specific. ('<code>/</code>' on Linux, '<code>\</code>' on Windows.)</li>
                            <li><strong>Postgres</strong> – valid path on the server running hammer packaging<strong><br /></strong></li>
                            <li><strong>DB2</strong> – include a trailing slash</li>
                            <li><strong>Windows hosts</strong> - Double the backslashes in the path. The backslash ( <code>\</code> ) is an escape character in Java properties files, so you must write '\\' to stand for '\'.
								<ul><li>Example:&#160;<code>C:\\Program Files\\Microsoft SQL Server\\MSSQL14.MyInstance\\DaticalBackups</code></li></ul></li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>db2BackupDir.&lt;referenceDBName&gt;=0</strong>
                        </p>
                    </td>
                    <td>Backup</td>
                    <td>
                        <p><strong>DB2 Only</strong>: Set automatically after the first execution of Deployment Packager. The warning from the first execution of packager on a given database can be ignored.</p>
                    </td>
                </tr>
                <tr>
                    <td><strong>ddlExcludeList</strong>
                    </td>
                    <td>Compares</td>
                    <td>
                        <p>SQL code types to exclude from a compare, typically to improve performance. When packaging DDL scripts, Deployment Packager compares the before and after state of the reference database. Use this property to exclude object types and table objects from the comparison. Values can be:</p>
                        <ul>
                            <li><strong>none</strong> (the default)</li>
                            <li><strong>all</strong>
                            </li>
                            <li>Comma-separated list of these values:&#160;<strong>procedure</strong>, <strong>package</strong>, <strong>packagebody</strong>, <strong>function, trigger, view</strong>, and <b>non_stored_logic</b>.<p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;"><span class="HTMLCode_1">non_stored_logic is available in <MadCap:variable name="General.LBEnterprise" /> 8.3 and later. When non_stored_logic is provided for the ddlExcludeList property this will exclude Snapshot, Diff, and DiffChangelog.</p>Excluding non-ddl objects can improve performance, especially with large databases.<br /><ul><li>The preferred style is to separate by comma only. However, spaces and tabs are trimmed if they are encountered.</li><li>The values list may be enclosed in double quotes or not.</li></ul></li>
                        </ul><b>Example ddlExcludeList property setting</b><pre>ddlExcludeList="package,packagebody,procedure,function,trigger,view,non_stored_logic"<br />ddlExcludeList=package,packagebody,procedure,function,trigger,view,non_stored_logic</pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>ddbScmBranch</strong>
                        </p>
                    </td>
                    <td>Project files</td>
                    <td>
                        <p>The SCM branch to use. If not specified, Deployment Packager uses the value from <strong>sqlScmBranch</strong>.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>ddbScmDoCheckout</strong>
                        </p>
                    </td>
                    <td>Project files</td>
                    <td>
                        <p>If this is not present or is set to <code>true</code>, Deployment Packager ensures that the local repository is up to date before packaging. To skip this operation, set to <code>false</code>.</p>
                        <ul>
                            <li>Git - equivalent to <code>git pull</code></li>
                            <li>SVN - equivalent to <code>svn update</code></li>
                            <li>TFS - equivalent to <code>tf get</code></li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>ddbScmLastImportID</strong>
                        </p>
                    </td>
                    <td>Project files</td>
                    <td>
                        <p>The SCM system ID for the most recently <em>processed</em> SQL code check in. It is automatically updated when the Deployment Packager completes successfully.</p>
                        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Do not leave blank. Do not use the most recent check-in. For first time use, use an ID from an earlier check-in.</p>
                        <ul>
                            <li>Git – first 8 digits of the hash</li>
                            <li>SVN – revision number</li>
                            <li>TFS – changeset number</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>ddbScmPath</strong>
                        </p>
                    </td>
                    <td>Project files</td>
                    <td>
                        <p>Path to the local copy of the SCM repository. If this is not present, Deployment Packager will use the value from <strong>sqlScmPath</strong>.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>ddbScmSystem</strong>
                        </p>
                    </td>
                    <td>Project files</td>
                    <td>
                        <p>SCM type – one of <strong>git</strong>, <strong>svn</strong>,&#160;<strong>tfs</strong></p>
                        <p>May be different than the <strong>sqlScmSystem</strong>. If not specified, Deployment Packager uses the value from <strong>sqlScmSystem</strong>.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>enableBackupRestore</strong>
                        </p>
                    </td>
                    <td>Backup</td>
                    <td>
                        <p>When the Packager is run in 'dbdef=' mode, the backup and restore routines can be skipped for certain sensitive environments. The value of this property is a comma separated list of the environments in which the Packager should perform backup and restore tasks.<strong>NOTE:</strong> Backup and restore tasks are NOT recommended for environments beyond development &amp; test.</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>scmBranchHandling</strong>
                        </p>
                    </td>
                    <td>SCM</td>
                    <td>
                        <p>Specifies how to handle branches in a multiple-branch project, one of two methods:</p>
                        <ul>
                            <li><strong>scmswitch</strong> – use SCM-specific commands to switch branches in <strong>sqlScmPath</strong></li>
                            <li><strong>directory</strong> – use a specified directory.<ul><li><p>When run against a pipeline, a pipeline-specific <strong>sqlScmPath</strong> is checked:</p><pre xml:space="preserve">&lt;pipeline&gt;.sqlScmPath=&lt;path&gt;</pre></li><li><p>When run against a dbdef, a dbdef-specific <strong>sqlScmPath</strong> is checked:</p><pre xml:space="preserve">&lt;dbdef&gt;.sqlScmPath=&lt;path&gt;</pre></li><li>If a pipeline-specific or dbdef-specific path is not provided, <strong>sqlScmPath</strong> is used. If <strong>sqlScmPath</strong> is also not specified, an error is returned.</li></ul></li>
                        </ul>
                        <p>See&#160;"Pipeline and DbDef Branch Settings" below.
                        </p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>sqlScmBranch</strong>
                        </p>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>The repository branch to be used for SQL code. Format varies by SCM:
                        </p>
                        <ul>
                            <li>Git - branch name only
                            </li>
                            <li>SVN - full branch URL, such as <code>svn://servername/projectname/branches/branchname</code>
                            </li>
                            <li>TFS - full branch specifier, such as <code>$/repo/project/branch</code>
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>sqlScmDoCheckout</strong>
                        </p>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>If this is not present or is set to <code>true</code>, Deployment Packager ensures that the local repository is up to date before packaging. To skip this operation, set to <code>false</code>. (Note that when setting this property to <code>false</code> that the DDB repo status will still be checked to make sure there aren't any uncommitted changes, but a pull/update/skip will not be performed.)
                        </p>
                        <ul>
                            <li>Git - equivalent to <code>git pull</code></li>
                            <li>SVN - equivalent to <code>svn update</code></li>
                            <li>TFS - equivalent to <code>tf get</code></li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>sqlScmLastImportID</strong>
                        </p>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>The SCM system ID for the most recently<em>processed </em>SQL code check in. It is automatically updated when the Deployment Packager completes successfully.</p>
                        <p><strong>Note:</strong>Do not leave blank. Do not use the most recent check-in. For first time use, use an ID from an earlier check-in.
                        </p>
                        <ul>
                            <li>Git - first 8 digits of the hash
                            </li>
                            <li>SVN - revision number</li>
                            <li>TFS - changeset number</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>sqlScmPath</strong>
                        </p>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>Path to the directory for SQL code in the local copy of the SCM repository. Can be an absolute path or path relative to the project directory.
                        </p>
                        <p>When packager determines the location of SQL code, it builds the location from <strong>sqlSCMPath</strong> and <strong>sqlScmSQLBaseDir</strong>.
                        </p>
                        <p>On Windows, backslashes must be doubled. Example:<br />
                        </p><pre xml:space="preserve">sqlScmPath=c:\\users\\username\\scmworkdir\\projectname</pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong>sqlScmSQLBaseDir</strong>
                        </p>
                    </td>
                    <td>SQL code files</td>
                    <td>
						Top level directory for SQL code stored in the local copy of the repository. This is a name only, not a path. If set to '.' uses the value of <strong>sqlScmPath</strong>. This directory contains:
						<ul><li>Set of fixed-name sub-directories needed by Deployment Packager (ddl,data_dml,sql, and so on)</li><li>Specially configured directories (See <a href="../place-files-scm-repo/flexible-folder-names.htm">Flexible Folder Names</a>.)</li><li>Combination of fixed-name and flexible-name directories</li></ul><p>If not specified, a default directory name <code>sql_code</code> is used.</p><p>When packager determines the location of SQL code, it builds the location from <strong>sqlSCMPath</strong> and <strong>sqlScmSQLBaseDir</strong>.</p></td>
                </tr>
                <tr>
                    <td>
                        <p><strong>sqlScmSystem</strong>
                        </p>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>SCM type – one of <strong>git</strong>, <strong>svn</strong>,&#160;<strong>tfs</strong>
                        </p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong><span class="code">commitMsgLabelRegexp</strong>
                        </p>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>By default, the Deploy Packager will scan the commit messages in your SQL code repo for values in square brackets. These values will be added as labels to the change sets that are produced by the files in that commit. For example:</p><pre xml:space="preserve">Commit Message: Adding column to hold area code information for [JIRA-1234]
						Change Set Label: JIRA-1234</pre>
                        <p>
                            <br />If there is another pattern you would like to use for the designation of change set labels you can specify the regular expression for that pattern using this property. For example:</p><pre xml:space="preserve">commitMsgLabelRegexp=JIRA (\\d{6})

							Commit Message: Adding column to hold area code information for JIRA 4321 which requires phone number separation
						Change Set Label: 4321</pre>
                        <p><strong>NOTE:</strong> If you provide a different pattern for matching desired label values, the values in square brackets will no longer be included as labels on change sets.</p>
                    </td>
                </tr>
                <tr>
                    <td><strong>databaseBackupRestoreMethod</strong>
                    </td>
                    <td>Backup</td>
                    <td>
                        <p>Class name to use for custom backup and restore. The class is implemented in a .groovy script.
                        </p>
                        <ul>
                            <li>Class name <strong>BackupRestoreOracleDatapump</strong> is reserved. When set to this value, Deployment Packager uses Oracle Datapump API rather than the Oracle client and expdp/impdp utilities to perform the backups and restores during packaging. See <a href="mng-backup-restore.htm">Configuring Deployment Packager to Use the Oracle Datapump API for Backup and Restore</a>.
                            </li>
                            <li>Class name <strong>BackupRestoreOracleFlashback</strong> is reserved. When set to this value, Deployment Packager uses Oracle Flashback rather than the Oracle client and expdp/impdp utilities to perform the backups and restores during packaging. See 
                                <MadCap:xref href="configure-oracle-flashback.htm">Configure Deployment Packager to Use the Oracle Flashback for Backup and Restore</MadCap:xref>
                            </li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td><strong>extensionsPath</strong>
                    </td>
                    <td>Backup</td>
                    <td>Path to directory containing .groovy files that implement a custom backup and restore method. If not specified, the following directory is used:
                        <br /><code>&lt;datical-install&gt;/repl/scripts/extensions</code>.
                    </td>
                </tr>
                <tr>
                    <td><strong>databaseBackupMode</strong>
                    </td>
                    <td>Backup</td>
                    <td>
                        <p>Specifies how to manage reference database backups that are required for deployments.</p>
                        <ul>
                            <li><strong>always</strong> - (Default) Back up the database for every change deployment. The schema to be backed up may be limited by using the <code>schemaName</code> property in <code>metatdata.properties</code>. This is the most commonly used mode.</li>
                            <li><strong>on_demand</strong> - Back up the database only when a <code>deployPackager.groovy</code> command line option is used: <code>createDatabaseBackup=true</code>. <em>This mode always backs up <strong>all</strong> managed schema and the tracking schema.</em> This mode is intended as a special case for use with large databases that take a very long time to back up.</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p><strong><span class="code">oracleRestoreErrorWhitelist</strong>
                        </p>
                    </td>
                    <td>Restore (Oracle Only)</td>
                    <td>
                        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This property is available in version 7.3 and higher.</p>
                        <p>A comma separated list of Oracle error codes to be ignored when evaluating <code>impdp</code> import/restore output for errors.  During an Oracle restore that uses local <span class="code">expdp / <span class="code">impdp clients OR the DATAPUMP API on the server, error messages are compared to the white-list:</p>
                        <ul>
                            <li>
                                <p>If any errors are found that <strong>do not</strong> exist in the white-list <strong>restore fails</strong></p>
                            </li>
                            <li>
                                <p>If the only errors found <strong>do exist</strong> in the white-list, <strong>restore completes successfully.</strong></p>
                            </li>
                        </ul>
                        <p>Example:</p><pre xml:space="preserve">oracleRestoreErrorWhitelist=ORA-31684,ORA-39111,ORA-39151</pre>
                    </td>
                </tr>
                <tr>
                    <td><b>oracleBackupErrorWhitelist</b>
                    </td>
                    <td>Backup (Oracle Only)</td>
                    <td>
                        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">This property is available to users in version 7.8 and later.</p>
                        <p>A comma separated list of Oracle error codes to be ignored
                    when evaluating expdp output for errors. During an Oracle backup that uses
                    local expdp / impdp clients OR the DATAPUMP API on the server,
                    error messages are compared to the white-list:</p>
                        <ul>
                            <li>If any errors are found that do not exist in the white-list, backup fails.</li>
                            <li>If the only errors found <b>do exist</b> in the white-list, <b>backup completes successfully</b>.</li>
                        </ul>
                        <p>Example:
<pre xml:space="preserve">oracleBackupErrorWhitelist=ORA-31684,ORA-39111,ORA-39151</pre></p>
                    </td>
                </tr>
                <tr>
                    <td><strong>parallel</strong>
                    </td>
                    <td>Backup</td>
                    <td><strong>Oracle only</strong>. Maximum of parallel threads for expdp and impdp to use during backup and restore.</td>
                </tr>
                <tr>
                    <td><span style="color: rgb(128,128,128);"><strong>archive</strong>
                    </td>
                    <td><span style="color: rgb(128,128,128);">Processing
                    </td>
                    <td>
                        <p><span style="color: rgb(128,128,128);">Archive SQL scripts in the archive directory after processing. This is done for SQL code in the <strong>ddl, sql_direct, data_dml</strong> directories. Archiving is done by default.
                        </p>
                        <p><span style="color: rgb(128,128,128);">Set to <strong>false</strong> to override the default behavior.
                        </p>
                        <p><span style="color: rgb(128,128,128);">If not set or if set to <strong>true</strong>, archiving is done as usual.
                        </p>
                        <p><span style="color: rgb(128,128,128);">The archive property has been deprecated. Instead it is preferable to set the newer rerunnable property in the metadata.properties of each relevant folder.
                        </p>
                    </td>
                </tr>
                <tr>
                    <td><strong>validateRollback</strong>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>Test the rollback script provided for a SQL script (-rollback), unless set to <strong>none</strong>. The rollback script must be able to restore the database to its state before the SQL script was run. During testing, packager runs a test rollback and a test deploy from the rolled-back state. The test operations performed by packager are not logged to the Deployment Monitoring Console database (DMCDB). Available with Datical version 5.1 or higher.</p>
                        <ul>
                            <li><strong>none</strong> – Do not test rollback scripts.</li>
                            <li><strong>withCompare</strong> - Test rollback scripts and their effect. During packaging, take a snapshot of the REF database to use for comparing database states to validate the rollback script. If the test fails, packager continues and shows a WARNING message in the log.</li>
                            <li><strong>withoutCompare</strong> - Test rollback scripts only to see if they run. Does not test their effects. If the test fails, packager exits with an ERROR. </li>
                        </ul>
                        <p class="title">Note</p>
                        <p>If you enable rollback validation, you must provide rollback files (-rollback) for all SQL scripts <em>starting from when you enable it</em>. You do not need to provide files for SQL scripts that have already been packaged and deployed.</p>
                        <p>See <a href="../../../../devops/move-changes-pipeline/roll-back-changes/rollback-valid-packaging.htm">Rollback File Validation During Packaging</a>.</p>
                    </td>
                </tr>
                <tr>
                    <td><strong>disableTraceFile</strong>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p><strong>Oracle only</strong>. Controls whether the Oracle trace file is used. Default value is false. The option to disable trace file is only available in Datical versions 5.3 and higher.</p>
                        <ul>
                            <li><strong>true</strong> - disables the use of the trace file</li>
                            <li><strong>false</strong> - enables the use of the trace file</li>
                        </ul>
                        <p>With tracefile turned on, Datical is able to detect and include the following additional SQL statement types during the CONVERT process (for Oracle Only):&#160;"create type", "create or replace type",&#160;"alter type", "drop type", "create materialized view",&#160;"alter materialized view",&#160;"drop materialized view",&#160;"create database link", "create shared database link",&#160;"create public database link",&#160;"create shared public database link",&#160;"drop database link",&#160;"drop public database link", "grant", "revoke",&#160;"insert", "update", "delete",&#160;select".</p>
                    </td>
                </tr>
                <tr>
                    <td><strong>packageOrderStrategy</strong>
                    </td>
                    <td>SQL code files</td>
                    <td>
                        <p>Specifies a custom package order, one of:</p>
                        <ul>
                            <li>DEFAULT - use the default ordering of commit order, then packageMethod, then alphanumeric</li>
                            <li>PACKAGEMETHOD - use ordering by packageMethod, then alphanumeric</li>
                            <li>ALPHANUMERIC - use ordering by alphanumeric only</li>
                        </ul>
                    </td>
                </tr>
                <tr>
                    <td><strong><span style="color: rgb(3,47,98);">skipCheckin</strong>
                    </td>
                    <td>Project files, SQL code files</td>
                    <td>
						If this is not present or is set to <code>false</code>, Deployment Packager performs the final SCM operation to send changes from the local repository to the SCM server. To skip this operation, set to <code>true</code>.<br /><ul><li>Git - skip the final <code>git push</code> (but still do the add and the commit)</li><li>SVN - skip the final <code>svn commit</code> (but still do the add)</li><li>TFS - skip the final <code>tf checkin</code> (but still do the add)</li></ul></td>
                </tr>
                <tr>
                    <td><strong>ephemeralConnectionRetryTimeout</strong>
                    </td>
                    <td>Backup (Azure SQL Managed Instance &amp; Azure SQL DB only)</td>
                    <td>This setting defines an overall time (in minutes) that a Deploy Packager job should try to get a connection to the <span class="code" style="color: rgb(23,43,77);">ephemeral database instance copy created for use in Azure SQL Managed Instance packaging. If the time expires and a successful connection cannot be made, Deploy Packager will fail. For more information see The ephemeralConnectionRetryTimeout property for Azure SQL Managed Instance</td>
                </tr>
            </tbody>
        </table>
        <h2>Sample deployPackager.properties files</h2>
        <h3>Documented example deployPackager.properties file</h3>
        <h4>deployPackager.properties</h4><pre># This properties file controls the <MadCap:variable name="General.LBEnterprise" /> deployPackager
sqlScmSystem=git
sqlScmLastImportID=421541c
sqlScmBranch=master
sqlScmPath=/home/developer/mySqlCode
sqlScmSQLBaseDir=sql_code

# the database backup restore location is on the db server.
databaseBackupRestoreLocation=

# Branch &amp; Pipeline Specific Properties for Multiple Pipeline Projects
# Settings for the JUL_2016 Datical Deployment Pipeline
JUL_2016.sqlScmBranch=JUL_2016_SQL
JUL_2016.sqlScmLastImportID=75782c

#Settings for the AUG_2016 Datical Deployment Pipeline
AUG_2016.sqlScmBranch=AUG_2016_SQL
AUG_2016.sqlScmLastImportID=49628d

#Settings for the PROD_STAGING Database Definition
PROD_STAGING.sqlScmBranch=AUG_2016_SQL
PROD_STAGING.sqlScmLastImportID=69371n</pre>
        <h3>Sample deployPackager.properties file included in the product</h3>
        <p>A sample<code> deployPackager.properties</code> file is included in the DaticalDB installation in directory <code>&lt;datical-install&gt;\DaticalDB\repl\scripts\</code>. You can copy it to each of your project directories and edit it for each project.</p><pre># This is a sample deployPackager properties file. 
#
# There are two sets of SCM information that can be supplied. The first specifies 
# the location of the SQL files that will be packaged - these start with "sqlScm". 
# The second is for the <MadCap:variable name="General.LBEnterprise" /> project itself and has property names that start 
# with "ddbScm". 
#
# In addition to SCM properties, you can also supply a location for database backups.
#
# The following properties can be set in the deployPackager.properties file:
#
# sqlScmSystem       - SCM software type for SQL code - currently supported types
#                      are git, svn, and tfs. Required. No default.
#
# sqlScmPath         - Local directory path to the developer's SCM working copy for
#                      SQL code. Can be absolute, or relative to the directory
#                      where the <MadCap:variable name="General.LBEnterprise" /> project is.
#                      If using multiple branches, see the section below for more
#                      details.
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character. Proper Windows
#                      statement for this would look like this:
#                      sqlScmPath=c:\\users\\username\\scmworkdir\\projectname
#
# sqlScmBranch       - The repository branch to be used for SQL code. The format of
#                      this value is dependent on the SCM system being used.
#                        git - just supply the branch name
#                        svn - supply the full branch URL, which might look like
#                              svn://servername/projectname/branches/branchname
#                        tfs - full branch specifier like $/repo/project/branch (your 
#                              path may have more or fewer segments)
#                      If using multiple branches, see the section below for more
#                      details.
#
# sqlScmLastImportID - The SCM system's "id" for the most recently processed SQL
#                      code check in. This will be automatically updated when the 
#                      deploy packager completes successfully.
#                      For Git, this is the first 8 digits of the relevant hash
#                      For SVN, this is the relevant release number
#                      For TFS, this is an integer change identifier
#                      Note: Do not leave blank. Do not use the most recent 
#                      checkin. For first time use, use an ID from an earlier checkin.
#                      If using multiple branches, see the section below for more
#                      details.
#
# sqlScmSQLBaseDir   - Top level directory for the SQL scripts stored in the 
#                      developer's SQL SCM working copy. This is just the name of a 
#                      single directory. Can be the character '.' to specify that
#                      the directory specified by sqlScmPath is a directory that
#                      contains the sub-directories (ddl,data_dml,sql,sqlplus,
#                      sql_direct,function,procedure,package,packagebody,trigger)
#
# sqlScmDoCheckout   - If this is not present or is set to 'true', deploy packager 
#                      will ensure that the latest available revision of the SQL 
#                      repository is retrieved before processing. Set this to 
#                      'false' to skip this.
#                      For users using git, this is equivalent to 'git pull'
#                      For users using svn, this is equivalent to 'svn update'
#                      For users using TFS, this is equivalent to 'tf get'
#
# ddbScmSystem       - SCM software type for the <MadCap:variable name="General.LBEnterprise" /> project. Currently 
#                      supported types are git, svn, and tfs. May be different than 
#                      the sqlScmSystem. If this is not present, deploy packager 
#                      will use the value from sqlScmSystem.
#
# ddbScmPath         - Local absolute directory path to the developer's <MadCap:variable name="General.LBEnterprise" /> SCM 
#                      working copy. If this is not present, deploy packager will 
#                      use the value from sqlScmPath. 
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character. Proper Windows
#                      statement for this would look like this:
#                      ddbScmPath=c:\\users\\username\\scmworkdir\\projectname
#
# ddbScmBranch       - The branch to be used for the <MadCap:variable name="General.LBEnterprise" /> project. If this 
#                      is not present, deploy packager will use the value from 
#                      sqlScmBranch. See the description for sqlScmBranch for examples
#                      of valid values.
#
# ddbScmDoCheckout   - If this is not present or is set to 'true', deploy packager 
#                      will ensure that the latest available revision of the 
#                      <MadCap:variable name="General.LBEnterprise" /> repository is retrieved before processing. Set 
#                      this to 'false' to skip this. If this is not present, 
#                      deploy packager will use the value from sqlScmSystem.
#                      For users using git, this is equivalent to 'git pull'
#                      For users using svn, this is equivalent to 'svn update'
#                      For users using TFS, this is equivalent to 'tf get'
#
# parallel           - ORACLE-ONLY:  The number of parallel threads that can be 
#                      used by expdp/impdp when doing backup/restore
#
# databaseBackupRestoreLocation - 
#                      During packaging, the script will make backups 
#                      of the database. These are usually stored on the database 
#                      server itself. This property specifies the location to which 
#                      the database backup should be written. Depending on your 
#                      DBMS, this may need to be a directory or it may need to 
#                      be a file.
#                      Note: On Oracle and DB2, this directory will be on the 
#                      server, so the path separator must follow the server's 
#                      convention ('/' on Linux, '\' on Windows.) Because the 
#                      '\' is an escape character in Java properties files, you 
#                      must supply '\\' to indicate a single backslash.)
#
# databaseBackupRestoreMethod
#                    - This property can be used to load custom backup/restore scripts.
#                    - ORACLE-ONLY: Set to BackupRestoreOracleDatapump to use the
#                      Oracle Datapump API directly instead of the expdb/impdb 
#                      command line tools.  
#
# databaseBackupMode
#                    - always (default) - A backup of the reference database will
#                      be taken for every run of deploy packager.  If a failure
#                      occurs during packaging, the reference database will be restored
#                      to this backup file.  This does not apply to feature merge
#                      packaging where a dbDef is provided.
#                    - on_demand - A backup of the reference database will only be taken
#                      when a command line parameter of createDatabaseBackup=true
#
# When working with multiple branches in the sqlScm repository, there are 
# additional pipeline-specific and dbDef-specific properties that can be set, as 
# well as a property that controls how scm branching is handled. 
#
# scmBranchHandling  - This property can be set to either 'directory' or 
#                      'scmswitch'. If it is not present, then deployPackager will 
#                      behave as if 'scmswitch' has been set.
#                      When set to 'directory', deployPackager will use different 
#                      working copies that should each contain sql code 
#                      corresponding to a particular SCM branch. This is most 
#                      useful for SCM systems like SVN and TFS that pose
#                      difficulties when working with multiple branches. When set 
#                      to 'directory' then you will also need to set 
#                      pipeline_name.sqlScmPath and/or dbDef_name.sqlScmPath 
#                      properties as described below.
#                      When this is set to 'scmswitch' or if this property is not 
#                      set, then deployPackager will use the path specified by 
#                      sqlScmPath as a single working copy, and will use SCM
#                      specific commands to switch that working copy to use the 
#                      appropriate branch that is specified using the 
#                      pipeline_name.sqlScmBranch and/or dbDef_name.sqlScmBranch 
#                      properties. This setting is most appropriate when using
#                      git as the SCM tool.
#
# pipeline_name.sqlScmPath - 
#                      Local directory path to the developer's SCM working copy, 
#                      on the branch that corresponds to the given pipeline, for 
#                      SQL code. Can be absolute, or relative to the directory 
#                      where the <MadCap:variable name="General.LBEnterprise" /> project is.
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character.
#
# pipeline_name.sqlScmBranch - 
#                      The repository branch to be used for SQL code. The format of
#                      this value is dependent on the SCM system being used.
#                        git - supply the branch name
#                        svn - supply the full branch URL, which might look like
#                              svn://servername/projectname/branches/branchname
#                        tfs - full branch specifier like $/repo/project/branch (your 
#                              path may have more or fewer segments)
#
# pipeline_name.sqlScmLastImportID - 
#                      The SCM system's "id" for the most recently processed 
#                      <MadCap:variable name="General.LBEnterprise" /> project check in on the branch corresponding to
#                      the given pipeline_name. This will be automatically 
#                      updated when the deploy packager completes successfully.
#                      For Git, this is the first 8 digits of the relevant hash
#                      For SVN, this is the relevant release number
#                      For TFS, this is an integer identifier
#                      Note: Do not leave blank. Do not use the most recent 
#                      checkin. For first time use, use an ID from an earlier checkin.
#
# dbDef_name.sqlScmPath - Local directory path to the developer's SCM working copy, 
#                      on the branch that corresponds to the given dbDef, for 
#                      SQL code. Can be absolute, or relative to the directory 
#                      where the <MadCap:variable name="General.LBEnterprise" /> project is.
#                      Note that When used on Windows, backslashes MUST be doubled,
#                      because the \ character is an escape character.
#
# dbDef_name.sqlScmBranch -
#                      The repository branch to be used for SQL code corresponding
#                      to the given dbDef_name. The format of this value is 
#                      dependent on the SCM system being used.
#                        git - supply the branch name
#                        svn - supply the full branch URL, which might look like
#                              svn://servername/projectname/branches/branchname
#                        tfs - full branch specifier like $/repo/project/branch (your 
#                              path may have more or fewer segments)
#
# dbDef_name.sqlScmLastImportID     - 
#                      The SCM system's "id" for the most recently processed 
#                      <MadCap:variable name="General.LBEnterprise" /> project check in on the branch corresponding to 
#                      the given dbDef_name. This will be automatically updated 
#                      when the deploy packager completes successfully.
#                      For Git, this is the first 8 digits of the relevant hash
#                      For SVN, this is the relevant release number
#                      For TFS, this is an integer identifier
#                      Note: Do not leave blank. Do not use the most recent 
#                      checkin. For first time use, use an ID from an earlier checkin.
#
# ddlExcludeList       Comma separated list of stored logic types to exclude from snapshot
#                        This may be the values 'all', 'none', or combinations of:
#                        'procedure', 'function', 'package', 'packagebody', 'trigger', 'view'
#
# archive              DEPRECATED starting with <MadCap:variable name="General.LBEnterprise" /> v4.37.  Previously if this is not present or is set to 'true', 
#                      deploy packager would archive successfully processed SQL files after packaging. 
#                      If it was set to false, no archiving would occur.  The archive property has been deprecated.  
#                      Instead it is preferable to set the newer rerunnable property in the metadata.properties of each relevant folder.
#
# packageOrderStrategy -
#                      DEFAULT - this is the default strategy that is set if the property is
#                                not specified. This preserves the commit order while packaging.
#                      PACKAGEMETHOD - packaging order is  based on the packageMethod first
#                                and then by path/filename
#                      ALPHANUMERIC - packaging order is based strictly on path/filename
#
# skipCheckin        - If this is not present or is set to false, Deployment Packager performs
#                      the final SCM operation to send changes from the local repository to
#                      the SCM server. To skip this operation, set to true.
#                        git - skip the final  git push (but still do the add and the commit)
#                        svn - skip the final  svn commit (but still do the add)
#                        tfs - skip the final  tf checkin (but still do the add)
#
# commitMsgLabelRegexp -
#                      By default, the Deploy Packager will scan the commit messages in your SQL code repo
#                      for values in square brackets.  These values will be added as labels to the change sets
#                      that are produced by the files in that commit.
#                      For example:
#                           Commit Message: Adding column to hold area code information for [JIRA-1234]
#                           Change Set Label: JIRA-1234
#                      If there is another pattern you would like to use for the designation of change set labels
#                      you can specify the regular expression for that pattern using this property.
#                      For example: commitMsgLabelRegexp=JIRA (\\d{6})
#                           Commit Message: Adding column to hold area code information for JIRA 4321 which requires phone number separation
#                           Change Set Label: 4321
#
# oracleRestoreErrorWhitelist -
#                      A comma separated list of Oracle error codes to be ignored
#                      when evaluating impdp output for errors.  During an Oracle restore that uses
#                      local expdp / impdp clients OR the DATAPUMP API on the server,
#                      error messages are compared to the white-list:
#                           If any errors are found that do not exist in the white-list restore fails
#                           If the only errors found do exist in the white-list, restore completes successfully
#                      For example:
#                           oracleRestoreErrorWhitelist=ORA-31684,ORA-39111,ORA-39151
#
# ephemeralConnectionRetryTimeout -
#                      Defines an overall time to get the connection to the Ephemeral database instance
#                      after the backup operation is executed. Default value is 20 minutes.
#                      This is only for Azure SQL DB and Azure SQL Managed Instance.
#
sqlScmSystem=
sqlScmLastImportID=
sqlScmBranch=
sqlScmPath=
sqlScmSQLBaseDir=
ddbScmSystem=
ddbScmBranch=
ddbScmPath=
databaseBackupRestoreLocation=
databaseBackupMode=
parallel=
ddlExcludeList=
packageOrderStrategy=
skipCheckin=
commitMsgLabelRegexp=
oracleRestoreErrorWhitelist=
ephemeralConnectionRetryTimeout=</pre>
    </body>
</html>