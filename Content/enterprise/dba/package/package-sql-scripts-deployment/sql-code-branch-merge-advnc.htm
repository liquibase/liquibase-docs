<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/dba/package/package-sql-scripts-deployment/sql-code-branch-merge-advnc.html" />
        <meta name="description" content="To support development of database application across concurrent releases or to support Continuous Delivery lifecycles, application teams often manage the source code of their applications across several branches of the same source code control repository." />
    </head>
    <body>
        <h1>SQL Code Branching &amp; Merging (Advanced)</h1>
        <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>To support development of database application across concurrent releases or to support Continuous Delivery lifecycles, application teams often manage the source code of their applications across several branches of the same source code control repository. This allows individual developers and teams to better control when their changes and additions are released and when they accept changes from other developers or teams that are working on a different feature or release in the same application. To incorporate changes from another source, an application team will merge the source code files from the branch in which they were created to the branch in which the new changes are needed.</p>
        <p>To support these branching practices the Deployment Packager can detect when SQL scripts are merged into the SQL code repository, locate existing Change Sets associated with the merged scripts and modify the <MadCap:variable name="General.changeset" />s' labels and contexts settings so they can be deployed in a new pipeline or environment.</p>
        <h2>Associating <MadCap:variable name="General.changeset" />s with SQL script merges</h2>
        <p>In order to identify the change sets that were previously generated by a merged script, the Deployment Packager will now assign a <code>scriptChecksum</code> attribute to each <MadCap:variable name="General.changeset" /> it introduces when the Packager is run in SCM Mode. The value of the attribute is a checksum that is based on the contents of the script that generated them. &#160;This checksum safeguards against unintended script modification or duplicate name use by ensuring that the script that was merged matches the script that was used to generate the <MadCap:variable name="General.changeset" />s.</p>
        <img src="../../../../Z_Resources/Images/enterprise/sql-code-branch-merge/script-merge.png" />
        <h2>Merge approaches</h2>
        <p>The Deployment Packager can be configured to manage source code merges in two ways: <b>Concurrent Pipeline Merging</b> and <b>Feature Merging</b>.</p>
        <h3>Concurrent Pipeline Merging</h3>
        <p>When an application development group is split into multiple teams working on separate planned releases, they often perform source code merges across branches that are tied to distinct pipelines established for each release. A pipeline is a chain of environments in which software is developed, tested, staged and released. After a team's release occurs, they will merge the branch for their pipeline into the branches associated with other teams' planned releases. This allows the other teams to better plan and execute their own development as changes are made to production.</p>
        <p>The following diagram illustrates the flow of database changes for a group that is split into three teams, each working in its own pipeline on a separate release. Each pipeline terminates in the production environment. When development is complete and the new features and fixes from a pipeline are released to the production database, the branch in which those changes were developed and tested are merged into the branches associated with future releases.</p>
        <p>
            <img src="../../../../Z_Resources/Images/enterprise/sql-code-branch-merge/concurrent-pipeline-merge.png" />
        </p>
        <p>When the Deployment Packager detects that a SQL script has been merged into the source code control branch associated with a pipeline, it will search for <MadCap:variable name="General.changeset" />s with matching script names and <code>scriptChecksum</code> values. When matches are found, the <strong>label</strong> for the new pipeline is added to those <MadCap:variable name="General.changeset" />s which makes them available for Deployment on the new pipeline.</p>
        <p>To configure your project to take advantage of Concurrent Pipeline Merge mode, configure pipeline-specific branch properties in the <code>deployPackager.properties</code> file as described in&#160;<a href="configure-packaging/required-deploy-packager-properties.htm">Using the required deployPackager.properties file</a>.&#160;&#160;Once configured, the detection and handling of merged scripts should occur automatically when the Deploy Packager is run in SCM mode.</p>
        <h4><code>DbDef</code> Label Requirements for Pipeline Merges</h4>
        <p>Each <code>DbDef</code> must have the pipeline name as the first label in order for pipeline merges to succeed.</p>
        <h3>Feature Based Merging</h3>
        <p>Feature merges must merge existing <MadCap:variable name="General.changeset" />s only. Do not attempt to package new changes during a merge.</p>
        <p>Feature Based Merge mode is designed to support development activities where source code control branches are associated with specific environments within a pipeline. In this mode the merge activity represents the opening of a deployment gate between environments in the lifecycle. Consider the following automated development process:</p>
        <ul>
            <li>A development team using a Feature Based Merge strategy has three environments: DEV, QA, &amp; PROD.</li>
            <li>Each environment maps to a GIT branch:<ul><li>DEV -&gt; IN_WORK</li><li>UAT -&gt; READY_FOR_TEST</li><li>RELEASE -&gt; RELEASE_APPROVED</li></ul></li>
            <li>Each environment/branch combo has a Jenkins job associated with it that builds and deploys the application from the branch tied to that environment.</li>
            <li>When a developer merges the files that provide a feature into the 'READY_FOR_TEST' branch of the source code repository, that developer is indicating that the feature is dev complete and should be deployed to the UAT environment.</li>
            <li>Jenkins detects the merge into the READY_FOR_TEST branch and starts the job that builds from that branch and deploys to the QA environment.</li>
            <li>A similar merge into the RELEASE_APPROVED source code control branch triggers the build and deploy to the RELEASE environment for that feature.</li>
        </ul>
        <p>Unlike Concurrent Pipeline Merge mode where a group of features are merged after a release, the merges in Feature Based Merge mode precede the release of functionality to the next environment in the pipeline.</p>
        <p>
            <img src="../../../../Z_Resources/Images/enterprise/sql-code-branch-merge/feature-based-merge-mode.png" />
        </p>
        <p>When the Deployment Packager detects that a SQL script has been merged into the source code control branch associated with a specific environment, it will search for <MadCap:variable name="General.changeset" />s with a label that matches the script names and compare <code>scriptChecksum</code> values in order to validate that the scripts have not been modified since they were originally Packaged. When matches are found, the <strong>context</strong> for the new database definition is added to those <MadCap:variable name="General.changeset" />s. The new context makes them available for Deployment in the new environments.</p>
        <p>Follow these steps to configure your <MadCap:variable name="General.LBEnterprise" /> project to take advantage of Feature Based Merge mode:</p>
        <ol>
            <li>Configure environment specific branch properties in the <code>deployPackager.properties</code> file.&#160;For this merge mode, your property names should take the format of&#160;<code>&lt;dbdefName&gt;.branch</code>. See <a href="configure-packaging/required-deploy-packager-properties.htm" rel="nofollow">Using the required deployPackager.properties file</a>.</li>
            <li>Add a unique identifying default <strong>context</strong> to each database definition in your project. This default context is required to take advantage of Feature Based Merge mode.</li>
            <li>Configure the <code>enableBackupRestore</code> property in the <code>deployPackager.properties</code> file for your <MadCap:variable name="General.LBEnterprise" /> project. The value of this property is a comma separated list of environments that are safe to backup and restore.</li>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Running the Packager's backup and restore routines is not recommended for environments beyond development and test.</p>
        </ol>
        <p>Run the Deployment Packager and target the <code>dbdef</code> to which you wish to merge and deploy changes. Detection and handling of merged scripts should occur automatically when the Deploy Packager is run in SCM mode.</p>
    </body>
</html>