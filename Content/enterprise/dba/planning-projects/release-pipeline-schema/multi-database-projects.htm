<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /> | Enterprise Docs</title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/dba/planning-projects/release-pipeline-schema/multi-database-projects" />
        <meta name="description" content="Learn when and how to implement multi database projects." />
    </head>
    <body>
        <h1>Multi-database Projects</h1>
        <MadCap:snippetText src="../../../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <MadCap:snippetBlock src="../../../../Z_Resources/Snippets/enterprise/DBA.flsnp" />
        <p>Multi-database projects are supported for only SQL Server databases.</p>
        <h2>Creating and Managing the Project</h2>
        <h3>Using the <MadCap:variable name="General.LBEnterprise" /> GUI to Create the Project</h3>
        <ul>
            <li>When you create the project, check <strong>Schema to be managed are in multiple database (SQL Server only)</strong>.
				<ul><li><img src="../../../../Z_Resources/Images/enterprise/multi-database/1-multi-database.png" /></li></ul></li>
            <li>When you specify multiple database, the <strong>Multiple Schema</strong> setting is also set for the project automatically.</li>
            <li>When selecting the <strong>Schema to Manage in This Deployment Plan</strong> the values will be added to the <strong>datical.project</strong> file as eg.&#160;<em>&lt;schemas name="schema"/&gt;</em>. These values will need to be modified after creating the project to be in the format:&#160;<em>&lt;schemas name="databaseName.schema"/&gt;. </em>The values must also be copied and added for each database in the project. (See below <strong>Example Project</strong> section.)
				<ul><li><img src="../../../../Z_Resources/Images/enterprise/multi-database/2-multi-database.png" /></li></ul></li>
        </ul>
        <h3>Using the project_creator.groovy script to Create the Project</h3>
        <p>Alternatively you can use the project_creator.groovy script to create projects<strong>.</strong></p>
        <ul>
            <li>Please see the example MultiCatalog MSSQL .tsv files and details here: <a href="../../create-projects/groovy.htm">Creating a Datical Project Using the Project Creation Script (project_creator.groovy)</a></li>
        </ul>
        <h3>Representation in Project File</h3>
        <p>The following elements distinguish a multi-database project:</p>
        <ul>
            <li><code>multiCatalog</code> attribute</li>
            <li><code>multiSchema</code> attribute</li>
            <li><code>schemas</code> statement: dot-notated schema names of the form <code>&lt;database&gt;.&lt;schema&gt;</code>.</li>
        </ul>
        <p>The <code>dbDefs</code> statements for SQL Server databases also require a <code>databaseName</code> statement, which is used only for connection checking. Use the name of one of the managed databases.</p>
        <ul>
            <li><code>databaseName=&lt;database&gt;</code>
            </li>
        </ul>
        <h3>Example Project</h3>
        <p>Note the following parts of the multi-database <strong>datical.project</strong> file listing</p>
        <ul>
            <li>Attributes on &lt;dbproject&gt;<br /><code><br />multiSchema="true"</code><br /><code>multiCatalog="true"</code><br /><code>trackingSchema="DATABASE_1.TRACKING_SCHEMA"<br /><br /></code></li>
            <li>Dot notation for databaseName.schema in the &lt;schemas&gt; statements. The example specifies two databases, with two schema each.<br /><br /><code>&lt;schemas name="DATABASE_1.SCHEMA_A"/&gt;</code><br /><code>&lt;schemas name="DATABASE_1.SCHEMA_B"/&gt;</code><br /><code>&lt;schemas name="DATABASE_2.SCHEMA_A"/&gt;</code><br /><code>&lt;schemas name="DATABASE_2.SCHEMA_C"/&gt;<br /><br /></code></li>
            <li>In the <code>dbDefs</code> statement, include <code>databaseName</code> attribute. <MadCap:variable name="General.LBEnterprise" /> uses this information for an internal check of the database connection. Set this attribute for each DbDef.<br /><br /><code><code>databaseName="DATABASE_1"</code></code><p class="title">Important</p><p>You will only have <u><strong>one</strong></u> dbDef for an environment, eg. REF, DEV, TEST, PROD, etc. The additional databases will be listed in the schemas nodes as part of the&#160;&lt;schemas name="databaseName.schema"/&gt; notation.</p></li>
        </ul>
        <p>The sample project includes one step (REF).</p><b class="code-title">Multi-database datical.project file</b><pre>?xml version="1.0" encoding="ASCII"?&gt;&lt;dbproject:Project 
xmi:version="2.0" 
xmlns:xmi="http://www.omg.org/XMI" 
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:dbproject="http://datical.com/db/project/1.0" 
name="MyMultiDBProject" 
storedLogicExternal="true" 
deployThreshold="stopOnError" 
runtimeCredentials="false" 
multiSchema="true" 
dbSchemaDefinition="project" 
schemaSelectionStep="REF" 
trackingSchema="DATABASE_1.TRACKING_SCHEMA" 
enableRowCount="true" 
multiCatalog="true"&gt;  &lt;dbDefs xsi:type="dbproject:SqlServerDbDef" 
name="REF" driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" 
databaseName="DATABASE_1"	 hostname="localhost" 
port="1433" 
username="user_name" 
password="pwd_for_user_name" 
contexts="" 
integratedSecurity="false" 
applicationName="<MadCap:variable name="General.LBEnterprise" />"/&gt;  &lt;plans name="MyMultiDBProject" databaseDefs="//@dbDefs[name='REF']"/&gt;  &lt;changelog href="Changelog/changelog.xml#//@databaseChangeLog"/&gt;  &lt;schemas name="DATABASE_1.SCHEMA_A"/&gt;  &lt;schemas name="DATABASE_1.SCHEMA_B"/&gt;  &lt;schemas name="DATABASE_2.SCHEMA_A"/&gt;  &lt;schemas name="DATABASE_2.SCHEMA_C"/&gt;&lt;/dbproject:Project&gt;</pre>
        <h2>SQL Script Coding</h2>
        <p><MadCap:variable name="General.LBEnterprise" /> requires that you follow some coding conventions in order for it to package SQL scripts correctly or create change sets correctly for a multi-database project.</p>
        <ul>
            <li>Each SQL script is required to identify the database it is working on. You can provide the database names using these methods:
				<ul><li>USE DATABASE statement for packaging scripts in <code>ddl, ddl_direct,</code> and <code>sql_direct</code> folders (or for creating "Execute with sqlcmd for Microsoft SQL Server and Azure SQL databases" change sets in the GUI Change Set Wizard)</li><li>With deploy packager you could create a <code>metadata.properties</code> file that specifies <code>schemaName</code> as <code>&lt;databaseName&gt;.&lt;schema&gt;</code></li></ul></li>
            <li>Object references in a SQL script must be unambiguous.
				<ul><li>Use <strong>fully qualified</strong> object references:<code>&lt;schema&gt;.&lt;object&gt;</code>.</li><li>Do not use unqualified object references: <code>&lt;object&gt;</code></li><li>External (cross-database) object references must be fully specified:<code>&lt;databaseName&gt;.&lt;schema&gt;.&lt;object&gt;</code></li></ul></li>
        </ul>
        <p>See SQL Server Database Objects and Packaging.</p>
        <h2 id="Multi-databaseProjects-Cross-databaseReferences">Cross-database References</h2>
        <p>Within the body of a SQL statement you can refer to an object that belongs to another database.</p>
        <p>Use a fully-qualified object name: <code>&lt;databaseName&gt;.&lt;schema&gt;.&lt;object&gt;</code>.</p>
        <p>Normal SQL Server rules apply when you create or modify an object in a script. For example, in a script using the context of one database:</p>
        <ol>
            <li>You can create an object for the current database object (a table, a procedure, a view, and so on).</li>
            <li>You cannot create an object for another database object.</li>
        </ol>
        <p>See SQL Server documentation for more information.</p>
        <h2>Packaging</h2>
        <p>Provide values for configuration options before packaging SQL scripts. SQL scripts are organized in folders per object type.</p>
        <p>Multi-database/multi-catalog configuration allows you to put the SQL scripts for all of the databases in this project into the same SQL repository in source code. However, you will still need a REF DB for each database.</p>
        <p>See these pages for more information:</p>
        <ul>
            <li><a href="../../package/package-sql-scripts-deployment/place-files-scm-repo/files-scm-repository.htm" rel="nofollow">Placing Files in the SCM Repository</a>
            </li>
            <li>SQL Server Database Objects and Packaging</li>
        </ul>
        <h2 id="Multi-databaseProjects-FileHierarchyforMulti-DatabaseProjects">File Hierarchy for Multi-Database Projects</h2>
        <p>A best practice is to use the target database names as top-level folders.</p><pre xml:space="preserve">&lt;sql_code&gt;   DatabaseOne
SchemaA
    ddl
        [...]
    SchemaB
        [...]
    DatabaseTwo
        [...]
    DatabaseThree
        [...]</pre>
        <p>Under each database folder you arrange folders by schema and then SQL type as normal, either using the fixed-name folders or flexible-name folders.</p>
        <h3 id="Multi-databaseProjects-UsingOnlyDatabaseFolders">Using Only Database Folders</h3>
        <p>You can manage all files under only the database folder as well. Use a wildcard in the the schemaName attribute in <code>metadata.properties</code>: <code>&lt;database&gt;.*</code>. If you use this arrangement, the object references in the SQL scripts must be fully qualified: <code>&lt;schema&gt;.&lt;object&gt;</code>.</p>
        <h2 id="Multi-databaseProjects-metadata.properties">metadata.properties</h2>
        <p>The best practice for working with multi-database projects to provide a <code>metadata.properties</code> file for each packaging folder. The <code>schemaName</code> attribute provides the database and schema context to be used by all SQL scripts in the folder. The settings apply to the current folder and all sub-folders.</p>
        <ul>
            <li><strong>schemaName</strong> - Specify both the database and schema in the form <code>&lt;database&gt;.&lt;schema&gt;</code>. For all SQL files this option provides the value of the database name and schema name to use if one is not specified in the SQL script. The packager tests that the object reference is valid, using the list of schema names provided. For multi-database projects, you can use a wildcard for the <code>&lt;schema&gt;</code> if you wish to manage all SQL scripts in the database folder and not create folders per schema. Example: <code>&lt;database&gt;.*</code></li>
        </ul>
        <p>See Using the metadata.properties file, especially the "Using schemaName with Multi-schema and Multi-database Projects" section.</p>
        <h2 id="Multi-databaseProjects-PackagingFilesinsqlcmdDirectories">Packaging Files in sqlcmd Directories</h2>
        <p>During packaging, the database specified is used to add a USE &lt;databasename&gt; statement to the SQL files being packaged.</p>
        <h2>Operations</h2>
        <p>Use the <MadCap:variable name="General.LBEnterprise" /> CLI for managing the project and performing operations
        </p>
        <ul>
            <li>package (including backup, snapshot, and compare)</li>
            <li>status</li>
            <li>forecast</li>
            <li>deploy</li>
            <li>rollback</li>
        </ul>
        <h2>DMC</h2>
        <p>When you view changes in DMC for multi-database projects, the database name is not currently displayed. If you would like to see the database name for your changes in DMC, consider using labels or file naming conventions that include the database name.</p>
        <h2>Using Properties for Database Names</h2>
        <p>Some customers who use the multi-database project configuration use properties for their database names. This can be useful if your database names aren't the same for every environment. You can use the contexts that are set for each dbDef to indicate the properties in the changelog.</p>
        <p>Here is an example of using contexts in the dbDefs section of the datical.project file:</p>
        <blockquote><pre xml:space="preserve">&lt;dbDefs xsi:type="dbproject:SqlServerDbDef" name="DEV" driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" hostname="host" port="1433" username="DATICAL_USER" contexts="DEV" labels="development" environment="DEV" databaseName="BDM_SMT_INV_DEV" integratedSecurity="false"/&gt;<br />&lt;dbDefs xsi:type="dbproject:SqlServerDbDef" name="QA2" driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" hostname="host" port="1433" username="DATICAL_USER" contexts="QA2" labels="sprint" environment="QA" databaseName="BDM_SMT_INV_QA2" integratedSecurity="false"/&gt;<br />&lt;dbDefs xsi:type="dbproject:SqlServerDbDef" name="QA1" driver="com.microsoft.sqlserver.jdbc.SQLServerDriver" hostname="host" port="1433" username="DATICAL_USER" contexts="QA1" labels="release" environment="QA" databaseName="BDM_SMT_INV_QA1" integratedSecurity="false"/&gt;</pre>
        </blockquote>
        <p>Here is an example of how the database names and schema names would look in the managed schemas section of the datical.project file:</p>
        <blockquote><pre xml:space="preserve">&lt;schemas name="${BDM_SMT_INV}.AppData"/&gt;<br />&lt;schemas name="${BDM_SMT_INV}.AppObject"/&gt; <br />&lt;schemas name="${BDM_SMT_INV_EU}.AppData"/&gt;<br />&lt;schemas name="${BDM_SMT_INV_EU}.AppObject"/&gt;<br />&lt;schemas name="${BDM_SMT_INV_GB}.AppData"/&gt;<br />&lt;schemas name="${BDM_SMT_INV_GB}.AppObject"/&gt; <br />&lt;schemas name="${BDM_SMT_INV_APAC}.AppData"/&gt;<br />&lt;schemas name="${BDM_SMT_INV_APAC}.AppObject"/&gt;</pre>
        </blockquote>
        <p>Here is an example of how the properties would look in the changelog.xml file:</p>
        <blockquote>
            <p>&lt;!-- DEV --&gt;<br />&lt;property context="DEV" labels="" name="BDM_SMT_INV" value="BDM_SMT_INV_DEV"/&gt;<br />&lt;property context="DEV" labels="" name="BDM_SMT_INV_EU" value="BDM_SMT_INV_EU_DEV"/&gt;<br />&lt;property context="DEV" labels="" name="BDM_SMT_INV_GB" value="BDM_SMT_INV_GB_DEV"/&gt;<br />&lt;property context="DEV" labels="" name="BDM_SMT_INV_APAC" value="BDM_SMT_INV_APAC_DEV"/&gt;<br />&lt;!-- QA2 --&gt;<br />&lt;property context="QA2" labels="" name="BDM_SMT_INV" value="BDM_SMT_INV_QA2"/&gt;<br />&lt;property context="QA2" labels="" name="BDM_SMT_INV_EU" value="BDM_SMT_INV_EU_QA2"/&gt;<br />&lt;property context="QA2" labels="" name="BDM_SMT_INV_GB" value="BDM_SMT_INV_GB_QA2"/&gt;<br />&lt;property context="QA2" labels="" name="BDM_SMT_INV_APAC" value="BDM_SMT_INV_APAC_QA2"/&gt;<br />&lt;!-- QA1 --&gt;<br />&lt;property context="QA1" labels="" name="BDM_SMT_INV" value="BDM_SMT_INV_QA1"/&gt;<br />&lt;property context="QA1" labels="" name="BDM_SMT_INV_EU" value="BDM_SMT_INV_EU_QA1"/&gt;<br />&lt;property context="QA1" labels="" name="BDM_SMT_INV_GB" value="BDM_SMT_INV_GB_QA1"/&gt;<br />&lt;property context="QA1" labels="" name="BDM_SMT_INV_APAC" value="BDM_SMT_INV_APAC_QA1"/&gt;</p>
        </blockquote>
        <p>See also these pages for general information about using properties:</p>
        <ul>
            <li><a href="../../../developer/define-release-pipeline/set-prop-project-changelog.htm">Setting Properties in the Project Changelog</a>
            </li>
            <li><a href="../../../overview/how-enterprise-works.htm" rel="nofollow">How Liquibase/Datical Works video 12: Introduction to Substitution Properties</a>
            </li>
        </ul>
    </body>
</html>