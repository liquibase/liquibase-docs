<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
	<head><title><MadCap:variable name="Heading.Level1" /></title>
		<link rel="canonical" href="https://docs.liquibase.com/enterprise/how-to-guides/releaselocks-command-packager-cleanup-option" />
		<meta name="description" content="This page discusses two specific features:
			ReleaseLocks command (for non-REF environments) and Packager with cleanup option (for REF environments only)" />
	</head>
    <body>
        <h1>How To: Use ReleaseLocks Command and Packager with Cleanup Option</h1>
        <MadCap:snippetText src="../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>This page discusses two specific features:</p>
        <ul>
            <li>
                <p>ReleaseLocks command (for non-REF environments)</p>
            </li>
            <li>
                <p>Packager with "cleanup" option (for REF environments only)</p>
            </li>
        </ul>
        <h2>ReleaseLocks command</h2>
        <p><MadCap:variable name="General.LBEnterprise" /> CLI command <code>hammer releaseLocks</code> have been improved as of version 7.2. This command now supports dropping of the <code>DATICAL_SPERRORLOG</code> table for Oracle databases.</p>
        <p> (If using runtime credentials, upgrade to version 7.4 or higher to use <code>hammer releaseLocks</code>.)</p>
        <ul>
            <li>
                <p>If a REF database operation is interrupted, the cleanup option is recommended.</p>
            </li>
            <li>
                <p>If a non-REF database operation is interrupted, the releaseLocks command is recommended.</p>
            </li>
        </ul>
        <h3>When to use ReleaseLocks Command</h3>
        <p>This command can be used at the end of a Deploy operation as long as no other <MadCap:variable name="General.LBEnterprise" /> operations are being performed on the database.</p>
        <h3>Usage</h3>
        <p><code>hammer releaseLocks &lt;dbDef&gt;</code>
        </p>
        <h3>Reference</h3>
        <ul>
            <li><a href="../../commands/home.htm">CLI Commands - ReleaseLocks</a>
            </li>
        </ul>
        <h2>Packager with "cleanup" option</h2>
        <p>Starting with version 7.3, the hammer deployPackager.groovy was updated to include a cleanup option. This cleanup option can be used when a Packaging operation has been interrupted and the REF database is left in an unknown or partially deployed state. The deployPackager.groovy <code>cleanup</code> option includes a restore using the backup referenced in the deployPackager.properties file.</p>
        <p>(If using runtime credentials, upgrade to version 7.4 or higher to use the packager cleanup option.)</p>
        <h3>When to use Cleanup Option</h3>
        <p>The deployPackager.groovy <code>cleanup</code> option includes a restore using the backup referenced in the deployPackager.properties file. Because of this restore, the cleanup option should not be used except in cases where the Packaging job was terminated unexpectedly. We recommend that this should be separate automation job that users can run to clean up their REF databases.</p>
        <h3>Usage</h3>
        <h3><code>hammer groovy deployPackager.groovy pipeline=&lt;pipeline_name&gt; scm=true cleanup</code>
        </h3>
        <h3>Reference</h3>
        <ul>
            <li><a href="../devops/best-practices/deploy-packager-config.htm">CLI - Deployment Packager</a>
            </li>
        </ul>
        <h2>Warning</h2>
        <ul>
            <li>
                <p>Ensure no other Datical jobs are running on the database prior to using the cleanup option or releaseLocks command.</p>
            </li>
            <li>
                <p>The deployPackager.groovy cleanup option should only be used in conjunction with a clean automation workspace. Any uncommitted changes to the changelog.xml in the abandoned run will be destroyed along with the workspace.</p>
            </li>
        </ul>
        <h2>Examples</h2>
        <h3>Setup Manually Triggered Jobs for Release Locks and Cleanup</h3>
        <p>A best practice recommendation is to setup jobs to allow users to manually trigger the Release Locks command or Cleanup option from the automation platform. Users should only trigger these jobs after guaranteeing that no other jobs are currently running for that project. For Jenkins, the plugin <a class="external-link" href="https://plugins.jenkins.io/build-blocker-plugin/" rel="nofollow">Build Blocker</a> can help ensure jobs do not run simultaneously.</p>
        <h3>Issue the Release Locks Command after a Failed Deployment</h3>
        <p>Run the in the catch block of a failed packaging or deployment job:</p><pre>hammer releaseLocks ${TARGET_DB}</pre>
        <h3>Using the Jenkins Post Stage Aborted Condition</h3>
        <p>For customers using Jenkins, there is a an aborted condition in the post stage that can be used during Packaging to issue the cleanup option. The code will only be executed when the current Pipeline's run has an "aborted" status. See more information at <a class="external-link" href="https://www.jenkins.io/doc/book/pipeline/syntax/#post" rel="nofollow">https://www.jenkins.io/doc/book/pipeline/syntax/#post</a>.</p><pre>post {
  aborted {
    dir("${PROJ_DDB}") {
      sh '''
        echo "===== Jenkins Build Manually Aborted ===="        echo "===== Running Packager Cleanup ===="        hammer groovy deployPackager.groovy pipeline=${DATICAL_PIPELINE} scm=true cleanup
      '''
    }
  }
}</pre>
    </body>
</html>