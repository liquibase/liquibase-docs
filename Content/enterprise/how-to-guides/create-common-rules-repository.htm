<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/enterprise/how-to-guides/create-common-rules-repository" />
        <meta name="description" content="Learn how to create a common rules repository." />
    </head>
    <body>
        <h1>How To: Create a Common Rules Repository</h1>
        <MadCap:snippetText src="../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p>The below steps outline how a common rules repository can be setup with Packager automation. This configuration allows customers to maintain rules at a corporate or global level versus having rules stored at the individual project level. This method has several advantages including:</p>
        <ul>
            <li>
                <p>Rules standardization</p>
            </li>
            <li>
                <p>Modification to rules only need to be made in one location</p>
            </li>
        </ul>
        <p>Additionally this page describes additional configurations:</p>
        <ul>
            <li>
                <p>Add project-specific rules in conjunction with a common rules repository</p>
            </li>
            <li>
                <p>Override global-level rules for a particular project</p>
            </li>
        </ul>
        <p>Prior to beginning these steps, be sure to select and consolidate the rules you would like to be added to the common repository to reduce duplication.</p>
        <h2 id="HowTo:CreateaCommonRulesRepository-Steps">Steps</h2>
        <ol>
            <li>
                <p>Create an SCM repository to house the Liquibase Enterprise Rules. For this example the repository is called <strong>liquibase-centralized-rules.</strong></p>
                <ol>
                    <li>
                        <p>Add folders to this repository for <strong>Forecast</strong>, <strong>PostForecast</strong>, <strong>PreForecast</strong>, and <strong>SqlRules</strong>.</p>
                    </li>
                    <li>
                        <p>Copy the desired rules into the appropriate folders from a Liquibase Enterprise project.</p>
                    </li>
                    <li>
                        <p>Push the changes to the new repository. In this example we are using branch <strong>main</strong> for the changes.</p>
                    </li>
                </ol>
            </li>
            <li>
                <p>Remove the Rules folders from the DDB repository.</p>
                <ol>
                    <li>
                        <p>Push this change to the existing DDB repository.</p>
                    </li>
                    <li>
                        <p><em>Note: Step 2 does need to occur prior to Step 3 in order for the file deletions to be detected by SCM.</em>
                        </p>
                    </li>
                </ol>
            </li>
            <li>
                <p>Add the Rules folder to the <strong>.gitignore</strong> for the DDB repository. <em>The Packager automation script will be copying files into the Rules folder so the folder needs to be added to the .gitignore to prevent SCM changes from being detected there.</em></p>
                <ol>
                    <li>
                        <p>Add to .gitignore</p><pre>Rules/</pre>
                    </li>
                    <li>
                        <p>Push this change to the existing DDB repository.</p>
                    </li>
                </ol>
            </li>
            <li>
                <p>Update the packager automation script to clone the Liquibase Enterprise Rules repository and checkout the main branch.</p>
                <ol>
                    <li>
                        <p>Do this step AFTER checkout of the DDB repository.</p>
                    </li>
                    <li>
                        <p>If using <strong>Jenkins</strong>, you can clone the rules repository and copy the files directly into the target directory with the checkout command. The target directory will be the Rules folder of the DDB repository.</p><pre>// checkout Rules from Rules repo
checkout([
    $class: 'GitSCM',
    branches: [
        [name: '*/main']
    ],
    doGenerateSubmoduleConfigurations: false,
    extensions: [
        [$class: 'RelativeTargetDirectory', relativeTargetDir: "${DDB_REPO}/Rules"],
        [$class: 'LocalBranch', localBranch: 'main']
    ],
    gitTool: 'Git - Windows',
    submoduleCfg: [],
    userRemoteConfigs: [
        [credentialsId: 'Liquibase', url: "${GITURL_RULES}"]
    ]
])</pre>
                    </li>
                    <li>
                        <p><strong>Other tools</strong> may require cloning the rules repository and then copying the Rules folder from the rules repository into the ddb repository using shell commands, eg.</p><pre>cp -R &lt;path_to_rules_repo&gt;/liquibase-centralized-rules/Rules &lt;path_to_ddb_repo&gt;/.</pre>
                    </li>
                </ol>
            </li>
            <li>
                <p>The hammer packager command should be able to run without any modifications. The rules from the common rules repository will be in place in the Rules folder of the project. Packager should not detect any SCM changes to this folder because it is present in the .gitignore.</p>
            </li>
        </ol>
        <h2 id="HowTo:CreateaCommonRulesRepository-Addproject-specificrulesinconjunctionwithacommonrulesrepository">Add project-specific rules in conjunction with a common rules repository</h2>
        <ol>
            <li>
                <p>Perform Steps above to setup to setup a common rules repository.</p>
            </li>
            <li>
                <p>Create a folder called <strong>ProjectRules</strong> in the DDB repository.</p>
                <ol>
                    <li>
                        <p>Add folders to this folder for <strong>Forecast</strong>, <strong>PostForecast</strong>, <strong>PreForecast</strong>, and <strong>SqlRules</strong>.</p>
                    </li>
                </ol>
            </li>
            <li>
                <p>Add any project-specific rules to these folders beneath ProjectRules.</p>
            </li>
            <li>
                <p>In the packager automation script, after the Steps above that copy the common rules into the DDB repository do the following:</p>
                <ol>
                    <li>
                        <p>Use shell commands to copy the rules from ProjectRules into Rules of the DDB repository.</p>
                        <ol>
                            <li>
                                <p>Windows</p><pre>xcopy /s/y ProjectRules\\* Rules</pre>
                            </li>
                            <li>
                                <p>Linux</p><pre>cp -r ProjectRules/* Rules</pre>
                            </li>
                        </ol>
                    </li>
                </ol>
            </li>
            <li>
                <p>The hammer packager command should be able to run without any modifications. The rules from the common rules repository will be in place in the Rules folder of the project with additional project-specific rules included as well.</p>
            </li>
        </ol>
        <h2 id="HowTo:CreateaCommonRulesRepository-Overrideglobal-levelrulesforaparticularproject">Override global-level rules for a particular project</h2>
        <ol>
            <li>
                <p>Perform Steps above to setup to setup a common rules repository.</p>
            </li>
            <li>
                <p>Create a folder called <strong>ProjectRules</strong> in the DDB repository.</p>
                <ol>
                    <li>
                        <p>Add folders to this folder for <strong>Forecast</strong>, <strong>PostForecast</strong>, <strong>PreForecast</strong>, and <strong>SqlRules</strong>.</p>
                    </li>
                </ol>
            </li>
            <li>
                <p>For any rules you wish to modify, use the same rule name as what is present in the common rules repository.</p>
                <ol>
                    <li>
                        <p>Make the necessary code adjustments to the rule.</p>
                    </li>
                </ol>
            </li>
            <li>
                <p>Place the project-specific rule in the appropriate folder beneath ProjectRules.</p>
            </li>
            <li>
                <p>In the packager automation script, after the Steps above that copy the common rules into the DDB repository do the following:</p>
                <ol>
                    <li>
                        <p>Use shell commands to copy the rules from ProjectRules into Rules of the DDB repository.</p>
                        <ol>
                            <li>
                                <p>Windows</p><pre>xcopy /s/y ProjectRules\\* Rules</pre>
                            </li>
                            <li>
                                <p>Linux</p><pre>cp -r ProjectRules/* Rules</pre>
                            </li>
                        </ol>
                    </li>
                </ol>
            </li>
            <li>
                <p>The hammer packager command should be able to run without any modifications. The rules from the common rules repository will be in place in the Rules folder of the project with any project-specific overrides having replaced the common rule.</p>
            </li>
        </ol>
        <h3 id="HowTo:CreateaCommonRulesRepository-Tipsformodifyingrules:">Tips for modifying rules:</h3>
        <ul>
            <li>
                <p>If you just wish to turn off a rule for a particular project, you can switch the ResponseType from FAIL or WARN to PASS.</p><pre>insert(new Response(ResponseType.PASS,errorMessage,drools.getRule().getName()));</pre>
            </li>
        </ul>
    </body>
</html>