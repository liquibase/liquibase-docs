<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <meta rel="canonical" href="https://docs.liquibase.com/enterprise/how-to-guides/forecast" />
        <meta name="description" content="Learn how forecast is a necessary operation prior to deploying changes." />
    </head>
    <body>
        <h1>Implementation Guide: Forecast</h1>
        <MadCap:snippetText src="../../Z_Resources/Snippets/images/icon-enterprise-top.flsnp" />
        <p><MadCap:variable name="General.LBEnterprise" />'s Forecast is a necessary operation prior to deploying changes. In automation, you would need a separate Forecast job which allows you to simulate a deployment. Typically, a release engineer would run the forecast job days before performing a deployment to a target environment. This would create a forecast report - an HTML report - which could be shared with the team to ensure all the correct changes are being forecasted. This also allows the team to make any necessary changes and rerun forecast job in preparation for deployment.</p>
        <h2 id="ImplementationGuide:Forecast-Inputsrequired">Inputs required</h2>
        <p>You may decide to create one Forecast job and allow user to select the target database environment to forecast. Or you may decide to create separate Forecast jobs for each database environment. For example, "Forecast QA", "Forecast STAGE" and "Forecast PROD".</p>
        <p>Instructions here will be for creating a single Forecast job controlled by user selection.</p>
        <h2 id="ImplementationGuide:Forecast-Step-by-stepguide">Step-by-step guide</h2>
        <p>Follow these steps to setup a Forecast job in your automation tool:</p>
        <ol>
            <li>Setup a user selection parameter for each database environment. We will call this "DBDEF" parameter.</li>
            <li>Start with a clean workspace. Your automation tool may already have a template step for performing a clean operation.</li>
            <li>Fetch the desired version of the Datical artifact which contains your database changes. This is the same artifact version which you will later use to deploy to the target database environment.
				<ol><li>If you don't use artifacts, you may also checkout the Datical project from your SCM such as Git or TFS. This is not a typical DevOps workflow, but could be necessary in certain other workflows.</li></ol></li>
            <li>If your <MadCap:variable name="General.LBEnterprise" /> artifact is a zip file, then unzip your artifact. The artifact is a complete <MadCap:variable name="General.LBEnterprise" /> project which contains all your database changes that have been packaged.
				<ol><li>For running a Forecast you will need to be in the <MadCap:variable name="General.LBEnterprise" /> project directory.</li></ol></li>
            <li>
				"cd" into the <MadCap:variable name="General.LBEnterprise" /> project directory</li>
            <li>Issue the Forecast command using the user supplied "DBDEF" parameter. Here is what your Forecast command may look like - this may change based on your operating system of your automation agent:
				<ol><li><code>hammer forecast %DBDEF%</code></li><li>Ensure that "hammer" is included in PATH environment variable.
						<ol><li>"hammer" is located in <code>&lt;datical_install_dir&gt;/repl</code> directory.</li></ol></li><li>Optionally, you can also pass&#160;"--<code>genSQL</code>" argument if you would like Datical to automatically generate the SQL script for all the changes that are forecasted to be deployed. Your Forecast command would look like this:
						<ol><li><code>hammer forecast %DBDEF% --genSQL</code></li></ol></li></ol></li>
        </ol>
        <h2 id="ImplementationGuide:Forecast-ForecastReport">Forecast Report</h2>
        <p>The forecast reports are located in the project directory, typically: <code>&lt;project_dir&gt;/Reports/&lt;YYYY&gt;/&lt;DD-Mon&gt;/&lt;dbDef&gt;</code> folders. There are subdirectories for each forecast report that is invoked which contain the HTML report.</p>
        <p>The screenshot below shows the forecast directory for a job that ran on a Jenkins executor (agent). This particular job performed a forecast on DEV database, hence you see DEV in the path.</p>
        <p>
            <img class="confluence-embedded-image confluence-content-image-border" width="650" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-31-25.png?version=1&amp;modificationDate=1504816287521&amp;cacheVersion=1&amp;api=v2&amp;width=650&amp;height=149" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-31-25.png?version=1&amp;modificationDate=1504816287521&amp;cacheVersion=1&amp;api=v2&amp;width=990&amp;height=228 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-31-25.png?version=1&amp;modificationDate=1504816287521&amp;cacheVersion=1&amp;api=v2&amp;width=650&amp;height=149 1x" />
        </p>
        <p>Shown below are contents of the "forecast" directory, containing the "forecastReport.html" file.</p>
        <p>
            <img class="confluence-embedded-image confluence-content-image-border" width="650" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-33-17.png?version=1&amp;modificationDate=1504816399759&amp;cacheVersion=1&amp;api=v2&amp;width=650&amp;height=133" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-33-17.png?version=1&amp;modificationDate=1504816399759&amp;cacheVersion=1&amp;api=v2&amp;width=1088&amp;height=223 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-33-17.png?version=1&amp;modificationDate=1504816399759&amp;cacheVersion=1&amp;api=v2&amp;width=650&amp;height=133 1x" />
        </p>
        <p>If&#160;"--<code>genSQL</code>" argument was used for the Forecast command, then you would also see a SQL script in the same directory as the forecastReport.html file:</p>
        <p>
            <img class="confluence-embedded-image confluence-content-image-border" width="650" loading="lazy" src="https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-41-32.png?version=1&amp;modificationDate=1504816894715&amp;cacheVersion=1&amp;api=v2&amp;width=650&amp;height=135" srcset="https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-41-32.png?version=1&amp;modificationDate=1504816894715&amp;cacheVersion=1&amp;api=v2&amp;width=1090&amp;height=227 2x, https://datical-cs.atlassian.net/wiki/download/thumbnails/6389803/image2017-9-7_15-41-32.png?version=1&amp;modificationDate=1504816894715&amp;cacheVersion=1&amp;api=v2&amp;width=650&amp;height=135 1x" />
        </p>
        <h2 id="ImplementationGuide:Forecast-Relatedarticles">Related articles</h2>
        <ul>
            <li><a href="../developer/dev-how-tos/configure-packaging-order-direct-ddl.htm">How To: Configure Packaging Order with ddl Folder Set to DIRECT or DDL_DIRECT</a>
            </li>
            <li><a href="improve-packager-performance.htm">How To: Improve Packager Performance</a>
            </li>
            <li><a href="../troubleshoot/improve-performance/home.htm">How To: Improve Deployment Performance</a>
            </li>
            <li><a href="recover-archive-modified.htm">How To: Remove abandonded changes from Datical and lower environments</a>
            </li>
            <li><a href="abandon-changes.htm">How To: Abandon changes</a>
            </li>
        </ul>
    </body>
</html>