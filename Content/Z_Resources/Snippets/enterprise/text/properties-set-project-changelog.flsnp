<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
    </head>
    <body>
        <p>Property values are defined in the <code>changelog.xml</code> file. Once defined, properties can be added to scripts, to <code>metadata.properties</code> files, and to the <code>datical.project</code> file to provide variability across environments.</p>
        <ol>
            <li>Create property statements in the changelog. Use <code>context=</code> and <code>label=</code> to set up the conditions where you intend the different values to be used.</li>
            <li>Write a SQL script that uses a variable to reference the property.</li>
            <li>Package the changeset.
				<ul><li>As the first step in packaging the variable is resolved to a literal value based on the property and changeset using matching context or labels attributes.</li></ul></li>
            <li>Deploy the changeset. During forecast and deploy you can specify values for context and labels attributes. The changesets with matching contexts or labels are used.</li>
        </ol>
        <p>When you use the <code>diffChangelog</code> command, databases are compared as deployed, with the interpreted property values. To compare changelogs with the property expressions as written (uninterpreted), use <strong>Reverse Substitution During diffChangelog</strong> option.</p>
        <h2>
			Setting Properties in the <MadCap:variable name="General.DaticalDB"></MadCap:variable> GUI</h2>
        <p>In the <MadCap:variable name="General.DaticalDB"></MadCap:variable> GUI, do the following:</p>
        <ol>
            <li>Open a project</li>
            <li>Click the <strong>Settings</strong> tab</li>
            <li>Open the <strong>Change Log Property Substitution</strong> section.<br /><br /><img src="../../../Images/enterprise/prop-changelog/1prop-changelog.jpg" /></li>
            <li>Click <strong>Manage Properties</strong>.<br /><br /><img src="../../../Images/enterprise/prop-changelog/2prop-changelog.jpg" /></li>
            <li>
                <p>Add or edit property keys and values, along with the contexts and labels to use to determine when to apply the property substitution.<br /><br /><img src="../../../Images/enterprise/prop-changelog/3prop-changelog.jpg" /><br /><br /></p>
                <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Property statements that use the same name and value must also have a context or label set to differentiate them. That difference expresses the conditions where each value is used. You cannot create more than one property setting for the same condition (contexts and labels settings).</p>
            </li>
            <li>If you provided values for <strong>Substitution Mode</strong> and <strong>Target</strong>, you must also select <strong>Reverse Substitute During diffChangelog</strong> for the project. See the section "Reverse Substitute During diffChangelog Option".</li>
            <li>Click <strong>Save</strong>.</li>
        </ol>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">You can also edit the <code>changelog.xml</code> using a text editor if that is more convenient that using the GUI.</p>
        <h2>Property Syntax</h2>
        <ol>
            <li>Create property statements in the changelog. Use <code>context=</code> and <code>label=</code> to set up the conditions where you intend the different values to be used.</li>
            <li>Write a SQL script that uses a variable to reference the property.</li>
            <li>Package the changeset. During packaging the variable is resolved to a literal value based on the property and changeset using matching context or labels attributes.</li>
            <li>Deploy the changeset. During forecast and deploy you can specify values for context and labels attributes. The changesets with matching contexts or labels are used.</li>
        </ol>
        <h3>Appearance in the Changelog</h3>
        <p>Use GUI to create properties (or edit the changelog.xml using a text editor if that is more convenient). Differentiate properties with the same name by setting different values and contexts. Use the <code>context</code> to specify the environments where the values are applied.</p>
        <p>In the following code example, the <code>context</code> property is used to set <code>SCHEMA_NAME</code> to different values (<code>schema_alpha</code> for the <code>REF</code> context, <code>schema_beta</code> for the <code>DEV</code> context).</p>
        <h4>Property Definitions in the Changelog</h4><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;!-- properties for different schema --&gt;&lt;property context="REF" name="SCHEMA_NAME" value="schema_alpha"/&gt;&lt;property context="DEV" name="SCHEMA_NAME" value="schema_beta"/&gt;</pre>
        <h3>Syntax in SQL Scripts</h3>
        <p>Use the following form where you want to substitute the value of a property in the script:</p><pre xml:space="preserve">${property-name}</pre>
        <h4>Use with Oracle Databases</h4>
        <p>It is common to host multiple environments on a single Oracle instance. Properties can be used for several purposes. Some examples are:</p>
        <ul>
            <li>Schemas - point to the desired copy of a schema. Multiple copies might exist on the same instance.</li>
            <li>Storage options - such as <code>TABLESPACE</code></li>
            <li>Sequences - different settings for <code>startsWith</code> and <code>incrementBy</code>, depending on environment</li>
        </ul>
        <h3>Example Scenario</h3>
        <p>Normally a workflow through <code>REF</code> &gt; <code>DEV</code> &gt; <code>TEST</code> &gt; <code>PROD</code> uses the same schema name at each step. However, if in <code>DEV</code> the schema is named <code>SCHEMA1</code> and in <code>QA</code> it is named <code>SCHEMA2</code>, you could set up property statements to give <code>SCHEMA_NAME</code> a different value depending on the context where a changeset is deployed.</p>
        <ol>
            <li>
                <p>Create two property statements in the changelog. Use the same name but different values (value=) and deployment conditions (in this case, context=).<br></br><br></br></p><b>Property Definitions in the Changelog</b><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;!-- properties for different schema --&gt;&lt;property context="DEV" name="SCHEMA_NAME" value="SCHEMA1"/&gt;&lt;property context="QA" name="SCHEMA_NAME" value="SCHEMA2"/&gt;</pre>
            </li>
            <li>
                <p>Write the SQL to use the property name rather than a literal schema name.</p>
                <p><b>SQL Script Using a Property</b>
                </p><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE "${SCHEMA_NAME}"."MYTABLE"   (MYCOLUMN VARCHAR(100));</pre>
            </li>
            <li>Package and Deploy. The value used for <code>${SCHEMA_NAME}</code> is driven by the difference in the <code>context=</code> attribute in the property statements.
				<ul><li>In the <code>DEV</code> database, the table is named <code>SCHEMA1.MYTABLE</code></li><li>In the <code>QA</code> database, the table is named <code>SCHEMA2.MYTABLE</code></li></ul></li>
        </ol>
        <h3>Using Properties for Schema Names</h3>
        <p>You can use properties for the <code>schemaName</code> attribute in the following places:</p>
        <ul>
            <li><code>datical.project</code> file</li>
            <li><code>metadata.properties</code> file</li>
        </ul>
        <p>You may use properties in the managed-schema names. Here is an example:</p>
        <h4>Schema specification in <code>datical.project</code></h4><pre class="syntaxhighlighter-pre" xml:space="preserve">SCHEMA1${ENV}
SCHEMA2${ENV}</pre>
        <p>To use this capability, the <code>ENV</code> property in the previous example needs to have values supplied for it. Errors are returned during packaging if a schema name does not match a schema in the database.</p>
        <p>Set the <code>ENV</code> property in the changelog. In this case, the <code>context</code> property determines the value to use for <code>ENV</code>.</p><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property context="DEV" name="ENV" value="_DEV"/&gt;&lt;property context="QA" name="ENV" value="_QA"/&gt;</pre>
        <p>The following database schema must exist in the corresponding managed databases:</p><pre class="syntaxhighlighter-pre" xml:space="preserve">DEV Database:
SCHEMA1_DEV
SCHEMA2_DEV

QA Database:
SCHEMA1_QA
SCHEMA2_QA</pre>
        <h2>How and When Properties are Interpreted</h2>
        <p>Properties are evaluated and values substituted during the following operations:</p>
        <ul>
            <li>Packaging (deploy to REF database). SQL scripts are scanned for property expressions in SQL scripts and substituted.</li>
            <li>Deploy</li>
        </ul>
        <h3>Property Substitution During Packaging</h3>
        <p>SQL scripts are scanned for properties. If there is a match with a property defined in the changelog, a value is substituted before packaging.</p>
        <table>
            <tbody>
                <tr>
                    <th>Action</th>
                    <th>Code</th>
                </tr>
                <tr>
                    <td>
                        <p>Set a property in the changelog to be used during packaging.</p>
                        <p>Note that setting the context to the REF database affects how it behaves during packaging.</p>
                    </td>
                    <td><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property context="REF_DB" labels="" name="tbl_prefix" value="REF_DB"/&gt;</pre>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Check in SQL script that uses the property.</p>
                        <p>The property is substituted before packaging.</p>
                    </td>
                    <td><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE ${tbl_prefix}_newtable(
						id INTEGER);</pre>
                    </td>
                </tr>
                <tr>
                    <td>SQL script that is packaged</td>
                    <td><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE REF_DB_newtable(
						id INTEGER);</pre>
                    </td>
                </tr>
            </tbody>
        </table>
        <h3>Disabling Property Substitution During Packaging Using metadata.properties</h3>
        <p>To turn off changelog property interpretation <em>for packaging only</em>, set <code>disablePropertySubstitution</code> to false in a <code>metadata.properties</code> file. Property expressions in SQL scripts are passed through during packaging, rather than interpreted.</p>
        <p>This capability can be used for debugging packaging issues or incremental testing.</p>
        <p>Note that <code>disablePropertySubstitution</code> has no effect on the substitutions made during a deploy operation.</p>
        <p>See <a href="../../../../enterprise/dba/package/package-sql-scripts-deployment/configure-packaging/metadata-properties.htm">Using the metadata.properties file</a>.</p>
        <h3>Property Substitution During Forecast and Deploy</h3>
        <p>When you set a property to be interpreted for a context, then the property is interpreted when changes are forecast for the context or deployed to the context.</p><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property context="DEV" name="ENV" value="_DEV"/&gt;&lt;property context="QA" name="ENV" value="_QA"/&gt;</pre>
        <h2>Reverse Substitution During diffChangelog Option</h2>
        <p>This option works only for SQL scripts in the <strong>ddl</strong> folder.</p>
        <p>If the <strong>Reverse Substitute During diffChangelog</strong> project setting is enabled, then during packaging (specifically during a diffChangelog operation), the original property variable is reverse-substituted into the changelog in place of the value that was placed in the changelog before.</p>
        <p>This feature has the following benefits:</p>
        <ul>
            <li>Property substitution in contexts later than REF. Example: you use a different TABLESPACE size for SQL CREATE TABLE per context. Specifically, it needs to be one size in DEV and one size in QA. You need to have the variable you use for the tablespace size put back into the changelog so that it can be evaluated during deployment to those contexts.</li>
            <li>A portable changelog. The changelog can be copied to another project and re-used.</li>
        </ul>
        <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">Discuss this option with your Datical Support representative to ensure its proper usage.</p>
        <h3>Targeting Selected Properties with the <code>substitutionMode</code> Attribute</h3>
        <p>When the option is set, by default all instances of properties are reverse-substituted.</p>
        <p>Use the <code>substitutionMode</code> attribute in the property declaration to control whether it is reverse substituted.</p>
        <p>Values are:</p>
        <ul>
            <li><code>always</code>- always reverse-substitute. A value for the <code>target</code> attribute is also required.</li>
            <li><code>never</code> - do not reverse-substitute</li>
            <li><code>onMatch</code> - reverse substitute this property where it occurs. If <code>target</code> is not specified, the property is substituted wherever the value occurs. <strong>Note</strong> that this may result in unintended substitution if the value is not unique to the property and appears elsewhere in the changesets.</li>
        </ul>
        <h4>Example for <code>substitutionMode=onMatch</code></h4>
        <ol>
            <li>
                <p>The following property is set in the changelog. Note that substitution mode set to <code>onMatch</code>.<br></br></p><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property key="SUFFIX" value="REF" context="REFDB" appdba:substitutionMode="onMatch"/&gt;</pre>
            </li>
            <li><strong>Reverse Substitute During diffChangelog</strong> project setting is enabled.</li>
            <li>
                <p>A script in the ddl folder contains the following code for creating a table:<br></br></p><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE PROP_SUB_${SUFFIX}</pre>
            </li>
            <li>
                <p>When the script is packaged, the property is evaluated during packaging to <code>PROP_SUB_REF</code>.</p>
            </li>
            <li>
                <p>During reverse substitution, the property expression <code>${SUFFIX}</code> is re-substituted for <code>REF</code> for the name of the createTable changeset that is placed in the changelog. The changeset name is the following string:</p><pre class="syntaxhighlighter-pre" xml:space="preserve">PROP_SUB_${SUFFIX}</pre>
            </li>
        </ol>
        <h4>Example for substitutionMode=always</h4>
        <ol>
            <li>
                <p>The property <code>seq.incrementBy</code> is set in the changelog. Note that substitution mode set to <code>always</code> and <code>target</code> is specified.<br></br>Using the GUI:</p>
                <p>
                    <img src="../../../Images/enterprise/prop-changelog/4prop-changelog.jpg" />
                </p>
                <p>Property appearance in the changelog:</p><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property name="seq.incrementBy" value="2" context="REF" appdba:substitutionMode="always" appdaba:target=\createSequence\@incrementBy/&gt;</pre>
            </li>
            <li><strong>Reverse Substitute During diffChangelog</strong> project setting is enabled.</li>
            <li>
                <p>A script in the ddl folder contains the following code for creating a sequence. It uses the property <code>${seq.incrementBy</code>} rather than a literal value, because you want to use a different value for different Datical contexts. <br></br></p><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE SEQUENCE century_years
MINVALUE 1
MAXVALUE 100
START WITH 1
INCREMENT BY ${seq.incrementBy}
CACHE 20;</pre>
            </li>
            <li>
                <p>When the script is packaged, the property is evaluated during packaging to <code>seq.incrementBy</code>, which is set in the property to 2. The resulting changeset:<br></br></p><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;changeSet author="datical" context="REF" created="Thu Sep 20 09:09:34 CDT 2018" id="create_seq_REF" objectQuotingStrategy="QUOTE_ALL_OBJECTS"&gt;        &lt;createSequence cacheSize="20" incrementBy="2" maxValue="100" minValue="1" sequenceName="century_years" startValue="1"/&gt;    &lt;/changeSet&gt;</pre>
            </li>
            <li>
                <p>During reverse substitution, the property expression <code>${seq.incrementBy}</code> is re-substituted for <code>REF</code> for the value "2" that was placed in the changeset. The changeset includes the following string:</p><pre class="syntaxhighlighter-pre" xml:space="preserve">incrementBy=${seq.incrementBy}</pre>
            </li>
        </ol>
        <h4>Example for substitutionMode=never</h4>
        <ol>
            <li>
                <p>The following property is set in the changelog. Note that substitution mode set to <code>never</code>.<br></br></p><pre class="syntaxhighlighter-pre" xml:space="preserve">&lt;property key="SUFFIX" value="REF" context="REFDB" appdba:substitutionMode="never"/&gt;</pre>
            </li>
            <li><strong>Reverse Substitute During diffChangelog</strong> project setting is enabled.</li>
            <li>
                <p>A script in the ddl folder contains the following code for creating a table:<br></br></p><pre class="syntaxhighlighter-pre" xml:space="preserve">CREATE TABLE PROP_SUB_${SUFFIX}</pre>
            </li>
            <li>
                <p>When the script is packaged, the property is evaluated during packaging to <code>PROP_SUB_REF</code>.</p>
            </li>
            <li>
                <p>During reverse substitution, the property expression <strong>is not re-substituted</strong> into the name in the createTable changeset that is placed in the changelog. The changeset name is the following string:</p><pre class="syntaxhighlighter-pre" xml:space="preserve">PROP_SUB_REF</pre>
            </li>
        </ol>
        <h3>Constraining the Values to Substitute with the <code>target</code> Attribute</h3>
        <p>Use the <code>target</code> attribute to constrain the values to substitute to just those matching a search expression.</p>
        <p>The search expression takes the form of an XPATH-like target expression. XPATH is used to specify a nodes in an XML document, in this case the changelog. The syntax for the target attribute is simplified.</p>
        <p><code>target=&lt;search&gt;&lt;attribute&gt;</code>
        </p>
        <ul>
            <li><code>&lt;search&gt;</code> - The element to search for. It can be a hierarchical expression of elements and subelements. For example <code>/createTable/column/</code> means to find all <code>column</code> elements within <code>createTable</code> elements.</li>
            <li><code>&lt;attribute&gt;</code> - The attribute to substitute with the property. An attribute is expressed in one of the following ways:
				<ul><li><code>@&lt;attr-name&gt;</code> - the name of an attribute for . The @name</li><li><code>text()</code> - text string associated with the element.</li><li><code>filepath()</code> - the contents of a file associated with the element</li></ul></li>
            <li>Multiple search-attribute pairs can be separated with a pipe character ( | ), a logical OR. All of the pairs are put together to express the replacement targets.</li>
        </ul>
        <h4>Exclusions</h4>
        <p>Do not specify search for the following elements. An error is returned and the operation fails if they are specified.</p>
        <ul>
            <li><code>databaseChangeLog</code>
            </li>
            <li><code>changeSet</code>
            </li>
        </ul>
        <h4>Examples for the target attribute</h4>
        <p>The target attribute constrains reverse-replacements of values with property names to the attributes within elements that you specify.</p>
        <table style="margin-left: auto;margin-right: auto;">
            <col>
            </col>
            <col>
            </col>
            <thead>
                <tr>
                    <th>Value</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><code>/createTable/column/@name</code>
                    </td>
                    <td>Locate the <code>column</code> element in a <code>createTable</code> element. Replace within the <code>name</code> attribute.</td>
                </tr>
                <tr>
                    <td><code>/addPrimaryKey/@appdba:fillFactor</code>
                    </td>
                    <td>Locate the <code>addPrimaryKey</code> element. Replace the <code>appdba:fillFactor</code> within the attribute.</td>
                </tr>
                <tr>
                    <td><code>/createTable/column/constraints/@nullable</code>
                    </td>
                    <td>Locate the <code>constraints</code> element for the <code>column</code> element within the <code>createTable</code> element. Replace within the <code>nullable</code> attribute.</td>
                </tr>
                <tr>
                    <td><code>/createProcedure/@path/filecontent()</code>
                    </td>
                    <td>Locate the <code>createProcedure</code> element. Replace within the contents of the file specified by the <code>path</code> attribute.</td>
                </tr>
                <tr>
                    <td><code>/createProcedure/@schemaName|/createFunction/@schemaName|/createTable/@schemaName|</code>
                    </td>
                    <td>Locate and replace the <code>schemaName</code> attribute within <code>createProcedure</code>, <code>createFunction</code>, and <code>createTable</code> elements.</td>
                </tr>
                <tr>
                    <td><code>/createSequence/@incrementBy</code>
                    </td>
                    <td>Locate and replace the <code>incrementBy</code> attribute within the <code>createSequence</code> element</td>
                </tr>
            </tbody>
        </table>
        <h2>Related links</h2>
        <ul>
            <li><a href="../../../../enterprise/developer/dev-how-tos/configure-project-oracle-dbdefs.htm">How To: Configure a Project Using Oracle Schemas for DBdefs</a>
            </li>
            <li>Video 12 "Introduction to Subtitution Properties": <a href="../../../../enterprise/overview/how-enterprise-works.htm">How Liquibase Enterprise (fka DaticalDB) Works</a></li>
        </ul>
    </body>
</html>