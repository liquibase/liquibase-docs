<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head>
    </head>
    <body>
        <ol>
            <li>
                <p MadCap:conditions="database.default">Create a text file called <code><a href="../../../../concepts/changelogs/home.html">changelog</a></code> (<code class="language-text">.sql</code>, <code class="language-text">.yaml</code>, <code class="language-text">.json</code>, or <code class="language-text">.xml</code>) in your project directory and add a <a href="../../../../concepts/changelogs/changeset.html">changeset</a>.
			</p>
                <p MadCap:conditions="database.default">If you already created a changelog using the <code><MadCap:xref href="../../../../commands/init/project.htm">init project</MadCap:xref></code> command, you can use that instead of creating a new file. When adding onto an existing changelog, be sure to only add the changeset and to not duplicate the changelog header.</p>
            </li>
            <div class="js-tabs" MadCap:conditions="database.default">
                <ul class="js-tablist" data-hx="h3">
                    <li class="js-tablist__item"><a href="#sql_example" id="label_sql_example" class="js-tablist__link">SQL example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#yaml_example" id="label_yaml_example" class="js-tablist__link">YAML example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#json_example" id="label_json_example" class="js-tablist__link">JSON example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#xml_example" id="label_xml_example" class="js-tablist__link">XML example</a>
                    </li>
                </ul>
                <div id="sql_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-sql">--liquibase formatted sql

--changeset your.name:1
CREATE TABLE test_table (test_id INT NOT NULL, test_column INT, PRIMARY KEY (test_id) NOT ENFORCED)</code></pre>
                    <p class="tip" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">Formatted SQL changelogs generated from Liquibase versions <b>before 4.2.0</b> might cause issues because of the lack of space after a double dash ( <code class="language-text">--</code> ). To fix this, add a space after the double dash. For example: <code class="language-text">--&#160;liquibase formatted sql</code> instead of <code class="language-text">--liquibase formatted sql</code> and <code class="language-text">--&#160;changeset myname:create-table</code> instead of <code class="language-text">--changeset myname:create-table</code>.</p>
                </div>
                <div id="yaml_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml">databaseChangeLog:
   - changeSet:
       id: 1
       author: your.name
       changes:
       - createTable:
           tableName: test_table
           columns:
           - column:
               name: test_id
               type: INT
               constraints:
                   primaryKey:  true
                   nullable:  false
           - column:
               name: test_column
               type: INT</code></pre>
                </div>
                <div id="json_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json">{
  "databaseChangeLog": [
    {
      "changeSet": {
        "id": "1",
        "author": "your.name",
        "changes": [
          {
            "createTable": {
              "tableName": "test_table",
              "columns": [
                {
                  "column": {
                    "name": "test_id",
                    "type": "INT",
                    "constraints": {
                      "primaryKey": true,
                      "nullable": false
                    }
                  }
                },
                {
                  "column": {
                    "name": "test_column",
                    "type": "INT"
                  }
                }
              ]
            }
          }
        ]
      }
    }
  ]
}</code></pre>
                </div>
                <div id="xml_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
<MadCap:snippetText src="../../code/liquibase-xsd-xml-changelog-closed.flsnp" />

    &lt;changeSet id="1" author="your.name"&gt;
        &lt;createTable tableName="test_table"&gt;
            &lt;column name="test_id" type="int"&gt;
                &lt;constraints primaryKey="true" nullable="false" /&gt;
            &lt;/column&gt;
            &lt;column name="test_column" type="int"/&gt;
        &lt;/createTable&gt;
    &lt;/changeSet&gt;

&lt;/databaseChangeLog&gt;</code></pre>
                </div>
            </div>
            <li MadCap:conditions="database.amazon-dynamodb">
                <p>Create a text file called <code><a href="../../../../concepts/changelogs/home.html">changelog</a></code> (<code class="language-text">.yaml</code>, <code class="language-text">.json</code>, or <code class="language-text">.xml</code>) in your project directory and add a <a href="../../../../concepts/changelogs/changeset.html">changeset</a>.
			</p>
            </li>
            <div class="js-tabs" MadCap:conditions="database.amazon-dynamodb">
                <ul class="js-tablist" data-hx="h3">
                    <li class="js-tablist__item"><a href="#yaml_example" id="label_yaml_example" class="js-tablist__link">YAML example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#json_example" id="label_json_example" class="js-tablist__link">JSON example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#xml_example" id="label_xml_example" class="js-tablist__link">XML example</a>
                    </li>
                </ul>
                <div id="yaml_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml">databaseChangeLog:
  - changeSet:
      id: 1
      author: your.name
      changes:
        - createDynamoTable:
            tableName: Music3YAML
            billingMode: PROVISIONED
            tableClass: STANDARD
            deletionProtectionEnabled: false
            keySchema:
              hashAttributeName: Artist
              rangeAttributeName: SongTitle
            attributeDefinitions:
              - attributeDefinition:
                  attributeName: Artist
                  attributeType: S
              - attributeDefinition:
                  attributeName: SongTitle
                  attributeType: S
              - attributeDefinition:
                  attributeName: Album
                  attributeType: N
            provisionedThroughput:
                readCapacityUnits: 5
                writeCapacityUnits: 5
            localSecondaryIndexes:
                - localSecondaryIndex:
                    indexName: localSecondaryIndex
                    keySchema:
                      hashAttributeName: Artist
                      rangeAttributeName: Album
                    projection:
                        projectionType: INCLUDE
                        nonKeyAttributes:
                          - attributeName: SongTitle
            globalSecondaryIndexes:
                - globalSecondaryIndex:
                    indexName: SongTitleGlobalIndex
                    keySchema:
                      hashAttributeName: Artist
                      rangeAttributeName: SongTitle
                    projection:
                        projectionType: INCLUDE
                        nonKeyAttributes:
                          - attributeName: Album
                    provisionedThroughput:
                        readCapacityUnits: 5
                        writeCapacityUnits: 5
            streamSpecification:
              streamEnabled: true
              streamViewType: NEW_IMAGE
            sseSpecification:
              enabled: true
              sseType: KMS
            tags:
              - key: tag
                value: tagValue
              - key: tag2
                value: tagValue2
      rollback:
        deleteDynamoTable:
          tableName: Music3YAML</code></pre>
                </div>
                <div id="json_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json">{
  "databaseChangeLog": [
    {
      "changeSet": {
        "id": "1",
        "author": "your.name",
        "changes": [
          {
            "createDynamoTable": {
              "tableName": "Music3JSON",
              "billingMode": "PROVISIONED",
              "tableClass": "STANDARD",
              "deletionProtectionEnabled": false,
              "keySchema": {
                "hashAttributeName": "Artist",
                "rangeAttributeName": "SongTitle"
              },
              "attributeDefinitions": [
                {
                  "attributeDefinition": {
                    "attributeName": "Artist",
                    "attributeType": "S"
                  }
                },
                {
                  "attributeDefinition": {
                    "attributeName": "SongTitle",
                    "attributeType": "S"
                  }
                },
                {
                  "attributeDefinition": {
                    "attributeName": "Album",
                    "attributeType": "N"
                  }
                }
              ],
              "provisionedThroughput": {
                "readCapacityUnits": 5,
                "writeCapacityUnits": 5
              },
              "localSecondaryIndexes": [
                {
                  "localSecondaryIndex": {
                    "indexName": "localSecondaryIndex",
                    "keySchema": {
                      "hashAttributeName": "Artist",
                      "rangeAttributeName": "Album"
                    },
                    "projection": {
                      "projectionType": "INCLUDE",
                      "nonKeyAttributes": [
                        {
                          "attributeName": "SongTitle"
                        }
                      ]
                    }
                  }
                }
              ],
              "globalSecondaryIndexes": [
                {
                  "globalSecondaryIndex": {
                    "indexName": "SongTitleGlobalIndex",
                    "keySchema": {
                      "hashAttributeName": "Artist",
                      "rangeAttributeName": "SongTitle"
                    },
                    "projection": {
                      "projectionType": "INCLUDE",
                      "nonKeyAttributes": [
                        {
                          "attributeName": "Album"
                        }
                      ]
                    },
                    "provisionedThroughput": {
                      "readCapacityUnits": 5,
                      "writeCapacityUnits": 5
                    }
                  }
                }
              ],
              "sseSpecification": {
                "enable": true,
                "sseType": "KMS"
              },
              "streamSpecification": {
                "streamEnabled": true,
                "streamViewType": "NEW_IMAGE"
              },
              "tags": [
                {
                  "tag": {
                    "key": "tag",
                    "value": "tagValue"
                  }
                },
                {
                  "tag": {
                    "key": "tag2",
                    "value": "tagValue2"
                  }
                }
              ]
            }
          }
        ],
        "rollback": [
          {
            "deleteDynamoTable": {
              "tableName": "Music3JSON"
            }
          }
        ]
      }
    }
  ]
}</code></pre>
                </div>
                <div id="xml_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-xml"><MadCap:snippetText src="../../code/liquibase-xsd-xml-changelog-amazon-dynamodb.flsnp" />

    &lt;changeSet id="1" author="your.name"&gt;
        &lt;dynamodb:createDynamoTable tableName="Music3XML" billingMode="PROVISIONED" tableClass="STANDARD" deletionProtectionEnabled="false"&gt;
            &lt;dynamodb:keySchema hashAttributeName="Artist" rangeAttributeName="SongTitle"/&gt;
            &lt;dynamodb:attributeDefinitions&gt;
                &lt;dynamodb:attributeDefinition attributeName="Artist" attributeType="S"/&gt;
                &lt;dynamodb:attributeDefinition attributeName="SongTitle" attributeType="S"/&gt;
                &lt;dynamodb:attributeDefinition attributeName="Album" attributeType="N"/&gt;
            &lt;/dynamodb:attributeDefinitions&gt;
            &lt;dynamodb:provisionedThroughput readCapacityUnits="5" writeCapacityUnits="5"/&gt;
            &lt;dynamodb:localSecondaryIndexes&gt;
                &lt;dynamodb:localSecondaryIndex indexName="localSecondaryIndex"&gt;
                    &lt;dynamodb:keySchema hashAttributeName="Artist" rangeAttributeName="Album"/&gt;
                    &lt;dynamodb:projection projectionType="INCLUDE"&gt;
                        &lt;dynamodb:nonKeyAttributes attributeName="SongTitle"/&gt;
                    &lt;/dynamodb:projection&gt;
                &lt;/dynamodb:localSecondaryIndex&gt;
            &lt;/dynamodb:localSecondaryIndexes&gt;
            &lt;dynamodb:globalSecondaryIndexes&gt;
                &lt;dynamodb:globalSecondaryIndex indexName="SongTitleGlobalIndex"&gt;
                    &lt;dynamodb:keySchema hashAttributeName="Artist" rangeAttributeName="SongTitle"/&gt;
                    &lt;dynamodb:projection projectionType="INCLUDE"&gt;
                        &lt;dynamodb:nonKeyAttributes attributeName="Album"/&gt;
                    &lt;/dynamodb:projection&gt;
                    &lt;dynamodb:provisionedThroughput readCapacityUnits="5" writeCapacityUnits="5"/&gt;
                &lt;/dynamodb:globalSecondaryIndex&gt;
            &lt;/dynamodb:globalSecondaryIndexes&gt;
            &lt;dynamodb:tags&gt;
                &lt;dynamodb:tag key="tag" value="tagValue"/&gt;
                &lt;dynamodb:tag key="tag2" value="tagValue2"/&gt;
            &lt;/dynamodb:tags&gt;
            &lt;dynamodb:streamSpecification streamEnabled="true" streamViewType="NEW_IMAGE"/&gt;
            &lt;dynamodb:sseSpecification enabled="true" sseType="KMS"/&gt;
        &lt;/dynamodb:createDynamoTable&gt;

        &lt;rollback&gt;
            &lt;dynamodb:deleteDynamoTable tableName="Music3XML"/&gt;
        &lt;/rollback&gt;
    &lt;/changeSet&gt;

&lt;/databaseChangeLog&gt;</code></pre>
                </div>
            </div>
            <li MadCap:conditions="database.databricks">Create a text file called <code><a href="../../../../concepts/changelogs/home.html">changelog</a></code> (<code class="language-text">.yaml</code>, <code class="language-text">.json</code>, or <code class="language-text">.xml</code>) in your project directory and add a <a href="../../../../concepts/changelogs/changeset.html">changeset</a>.</li>
            <div class="js-tabs" MadCap:conditions="database.databricks">
                <ul class="js-tablist" data-hx="h3">
                    <li class="js-tablist__item"><a href="#yaml_example" id="label_yaml_example" class="js-tablist__link">YAML example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#json_example" id="label_json_example" class="js-tablist__link">JSON example</a>
                    </li>
                    <li class="js-tablist__item"><a href="#xml_example" id="label_xml_example" class="js-tablist__link">XML example</a>
                    </li>
                </ul>
                <div id="yaml_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml">databaseChangeLog:
  - changeSet:
      id: 1
      author: your.name
      changes:
        - createTable:
            tableName: test_table_properties
            columns:
              - column:
                  name: id
                  type: int
                  constraints:
                    primaryKey: true
                    nullable: false
              - column:
                  name: some_column
                  type: int
            extendedTableProperties:
              clusterColumns: id, some_column
              tableFormat: delta
              tableLocation: s3://databricks-external-folder/test_table_properties
              tblProperties: 'this.is.my.key'=12,'this.is.my.key2'=true
      rollback:
        dropTable:
          tableName: test_table_properties</code></pre>
                </div>
                <div id="json_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json">{
  "databaseChangeLog": [
    {
      "changeSet": {
        "id": "1",
        "author": "your.name",
        "changes": [
          {
            "createTable": {
              "tableName": "test_table_properties",
              "columns": [
                {
                  "column": {
                    "name": "id",
                    "type": "int",
                    "constraints": {
                      "primaryKey": "true",
                      "nullable": "false"
                    }
                  }
                },
                {
                  "column": {
                    "name": "some_column",
                    "type": "int"
                  }
                }
              ],
              "extendedTableProperties": {
                "clusterColumns": "id, some_column",
                "tableFormat": "delta",
                "tableLocation": "s3://databricks-external-folder/test_table_properties",
                "tblProperties": "'this.is.my.key'=12,'this.is.my.key2'=true"
              }
            }
          }
        ],
        "rollback": [
          {
            "dropTable": {
              "tableName": "test_table_properties"
            }
          }
        ]
      }
    }
  ]
}</code></pre>
                </div>
                <div id="xml_example" class="js-tabcontent"><pre xml:space="preserve"><code class="language-xml"><MadCap:snippetText src="../../code/liquibase-xsd-xml-changelog-databricks.flsnp" />

    &lt;changeSet id="1" author="your.name"&gt;
        &lt;createTable tableName="test_table_properties"&gt;
            &lt;column name="id" type="int" &gt;
                &lt;constraints primaryKey="true" nullable="false"/&gt;
            &lt;/column&gt;
            &lt;column name="some_column" type="int"/&gt;

            &lt;databricks:extendedTableProperties clusterColumns="id, some_column"
                                                tableFormat="delta"
                                                tableLocation="s3://databricks-external-folder/test_table_properties"
                                                tblProperties="'this.is.my.key'=12,'this.is.my.key2'=true"/&gt;
        &lt;/createTable&gt;

        &lt;rollback&gt;
            &lt;dropTable tableName="test_table_properties"/&gt;
        &lt;/rollback&gt;
    &lt;/changeSet&gt;

&lt;/databaseChangeLog&gt;</code></pre>
                </div>
            </div>
            <li MadCap:conditions="database.mongodb">Create a text file called <code><a href="../../../../concepts/changelogs/home.html">changelog</a></code> (<code class="language-text">.js</code>, <code class="language-text">.yaml</code>, <code class="language-text">.json</code>, or <code class="language-text">.xml</code>) in your project directory and add a <a href="../../../../concepts/changelogs/changeset.html">changeset</a>.</li>
            <MadCap:snippetBlock src="database-mongodb-changelog-formats.flsnp" MadCap:conditions="database.mongodb" />
            <MadCap:snippetBlock src="database-mongodb-modeled-changelogs.flsnp" MadCap:conditions="database.mongodb" />
            <li>Navigate to your project folder in the CLI and run the Liquibase&#160;<code><MadCap:xref href="../../../../commands/change-tracking/status.htm">status</MadCap:xref></code> command to see whether the connection is successful:</li><pre xml:space="preserve" MadCap:conditions="database.default"><code class="language-text">liquibase status --username=test --password=test --changelog-file=&lt;changelog.xml&gt;</code></pre><pre xml:space="preserve" MadCap:conditions="database.amazon-dynamodb"><code class="language-text">liquibase status --changelog-file=&lt;changelog.xml&gt;</code></pre>
            <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">You can specify arguments in the CLI or keep them in the <a href="../../../../concepts/connections/creating-config-properties.html"><MadCap:variable name="General.Liquibase"></MadCap:variable> properties file</a>.</p>
            <p>If your connection is successful, you'll see a message like this:</p><pre><code class="language-text">4 changesets have not been applied to &lt;your_connection_url&gt;
Liquibase command 'status' was executed successfully. </code></pre>
            <p MadCap:conditions="database.databricks">If you receive this error, the version of Java that you're using doesn't include the required SSL certificate.</p>
            <p MadCap:conditions="database.databricks"><code class="language-text">Connection could not be created to jdbc:databricks://...; with driver 
com.databricks.client.jdbc.Driver.  

[Databricks][JDBCDriver](500593) Communication link failure. Failed to connect to server. 
Reason: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: 
PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: 
unable to find valid certification path to requested target.</code>
            </p>
            <p MadCap:conditions="database.databricks">To resolve this error, upgrade Java to a more recent version.  </p>
            <li MadCap:conditions="database.default">Inspect the deployment SQL with the <code><MadCap:xref href="../../../../commands/update/update-sql.htm">update-sql</MadCap:xref></code> command:</li><pre xml:space="preserve" MadCap:conditions="database.default"><code class="language-text">liquibase update-sql --changelog-file=&lt;changelog.xml&gt;</code></pre>
            <p MadCap:conditions="database.default">If the SQL that Liquibase generates isn't what you expect, you should review your changelog file and make any necessary adjustments.</p>
            <li>Then execute these changes to your database with the <code><MadCap:xref href="../../../../commands/update/update.html">update</MadCap:xref></code> command:</li><pre xml:space="preserve"><code class="language-text">liquibase update --changelog-file=&lt;changelog.xml&gt;</code></pre>
            <p>If your <code class="language-text">update</code> is successful, Liquibase runs each changeset and displays a summary message ending with:</p><pre xml:space="preserve"><code class="language-text">Liquibase: Update has been successful.
Liquibase command 'update' was executed successfully.</code></pre>
            <li>From a database UI tool, ensure that your database contains the <code class="language-text" MadCap:conditions="database.default">test_table</code><code class="language-text" MadCap:conditions="database.amazon-dynamodb">Music3&lt;format&gt;</code><code class="language-text" MadCap:conditions="database.mongodb">myCollection</code> object you added along with the <MadCap:xref href="../../../../concepts/tracking-tables/databasechangelog-table.html" MadCap:conditions="database.default,database.amazon-dynamodb">[%=General.databasechangelog%] table</MadCap:xref><a href="../../../../concepts/tracking-tables/databasechangelog-table.html" MadCap:conditions="database.mongodb"><MadCap:variable name="General.databasechangelog" /> collection</a> and <MadCap:xref href="../../../../concepts/tracking-tables/databasechangeloglock-table.html" MadCap:conditions="database.default,database.amazon-dynamodb">[%=General.databasechangeloglock%] table</MadCap:xref><a href="../../../../concepts/tracking-tables/databasechangeloglock-table.html" MadCap:conditions="database.mongodb"><MadCap:variable name="General.databasechangeloglock" /> collection</a>.</li>
            <p class="tip" MadCap:conditions="database.mongodb" MadCap:autonum="&lt;b&gt;Tip: &lt;/b&gt;">You can use <a href="https://www.mongodb.com/products/compass">MongoDB Compass</a> to easily view collections in your database. For example, run the commands <code class="language-text">use myDatabase</code> and <code class="language-text">db.myCollection.find()</code>.</p>
        </ol>
        <p>Now you're ready to start deploying database changes with Liquibase!</p>
    </body>
</html>