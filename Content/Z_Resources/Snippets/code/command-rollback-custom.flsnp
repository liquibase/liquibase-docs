<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head>
    </head>
    <body>
        <h3>Custom rollbacks</h3>
        <p> Liquibase cannot automatically roll back all <MadCap:variable name="General.changetypes" />s. For example, Liquibase cannot automatically roll back <code><MadCap:xref href="../../../change-types/drop-table.html">dropTable</MadCap:xref></code> changes because the inverse SQL could be more than one statement.</p>
        <p>In these cases, you must specify custom rollback syntax in your changelog for every changeset that you might want to roll back. This way, when you run the <code class="language-text">rollback</code> command, Liquibase knows what to do.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">When rolling back stored logic, Liquibase does not restore the previously stored version. Instead, Liquibase rolls back to the exact file/code specified in the custom rollback.</p>
        <p>If you'd like to create a rollback that points to logic stored in an SQL file, use the sqlFile Change Type. For more information and example, see the <MadCap:xref href="../../../change-types/sql-file.html">sqlFile</MadCap:xref> article.</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#sql_example_custom_generic" id="label_sql_example_custom_generic" class="js-tablist__link">SQL example</a>
                </li>
                <li class="js-tablist__item"><a href="#yaml_example_custom_generic" id="label_yaml_example_custom_generic" class="js-tablist__link">YAML example</a>
                </li>
                <li class="js-tablist__item"><a href="#json_example_custom_generic" id="label_json_example_custom_generic" class="js-tablist__link">JSON example</a>
                </li>
                <li class="js-tablist__item"><a href="#xml_example_custom_generic" id="label_xml_example_custom_generic" class="js-tablist__link">XML example</a>
                </li>
            </ul>
            <div id="sql_example_custom_generic" class="js-tabcontent">
                <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Liquibase does not support automatic rollback for any Formatted SQL changesets. To roll back Formatted SQL&#160;changes, you must <b>always</b> specify a custom rollback.</p><pre xml:space="preserve"><code class="language-sql">--changeset liquibaseuser:1
create table testTable ( id int primary key, name varchar(255) );
--rollback drop table testTable;

--changeset liquibaseuser:2
insert into testTable values ('1','The First', 'Country')
insert into testTable values ('2','The Second', 'Country2')
--rollback delete from testTable where id='1'
--rollback delete from testTable where id='2'</code></pre>
                <p>In Liquibase 4.19.0 and later, you can specify multiple rollback statements in a block comment:</p><pre xml:space="preserve"><code class="language-sql">--changeset liquibaseuser:2
insert into testTable values ('1','The First', 'Country')
insert into testTable values ('2','The Second', 'Country2')
/* liquibase rollback
rollback delete from testTable where id='1'
rollback delete from testTable where id='2'
*/</code></pre>
                <MadCap:snippetBlock src="../text/liquibase-rollback-rollback-sql-file.flsnp" />
            </div>
            <div id="yaml_example_custom_generic" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml" data-lang="yaml">databaseChangeLog:
- changeSet:
    id: 2
    author: liquibaseuser
    changes:
    - dropTable:
        tableName: person
    rollback:
      createTable:
        catalogName: cat
        columns:
        - column:
          name: address
          type: varchar(255)
        remarks: A String
        schemaName: public
        tableName: person</code></pre>
                <p>For more information, see <MadCap:xref href="../../../concepts/changelogs/yaml-format.html">Example Changelogs:  YAML Format</MadCap:xref>.</p>
            </div>
            <div id="json_example_custom_generic" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json" data-lang="json">{
  "databaseChangeLog": [
    {
      "changeSet": {
        "id": "2",
        "author": "liquibaseuser",
        "changes": [
          {
            "dropTable": {
              "tableName": "person"
            }
          }
        ],
        "rollback": [
          {
            "createTable": {
              "catalogName": "cat",
              "columns": [
                {
                  "column": {
                    "name": "address",
                    "type": "varchar(255)"
                  }
                }
              ],
              "remarks": "A String",
              "schemaName": "public",
              "tableName": "person"
            }
          }
        ]
      }
    }
  ]
}</code></pre>
                <p>For more information, see <MadCap:xref href="../../../concepts/changelogs/json-format.html">Example Changelogs: JSON Format</MadCap:xref>.</p>
            </div>
            <div id="xml_example_custom_generic" class="js-tabcontent"><pre xml:space="preserve"><code class="language-xml" data-lang="xml"><MadCap:snippetText src="liquibase-xsd-xml-changelog-closed.flsnp" />

    &lt;changeSet author="liquibaseuser" id="2"&gt;
        &lt;dropTable tableName="person"/&gt;

        &lt;rollback&gt;
            &lt;createTable catalogName="department"
                  remarks="A String"
                  schemaName="public"
                  tableName="person"
                &lt;column name="address" type="varchar(255)"/&gt;
            &lt;/createTable&gt;
        &lt;/rollback&gt;
  &lt;/changeSet&gt;

&lt;/databaseChangeLog&gt;</code></pre>
                <p>For more information, see <MadCap:xref href="../../../concepts/changelogs/xml-format.html">Example Changelogs: XML Format</MadCap:xref>.</p>
            </div>
        </div>
        <h3>Override default rollback commands</h3>
        <p>The <code>&lt;rollback&gt;</code> tag describes how to roll back a change using SQL statements, <MadCap:variable name="General.changetypes" />s, or a reference to a previous changeset. You can use any <MadCap:variable name="General.changetypes" /> in the <code>&lt;rollback&gt;</code> element, such as <MadCap:xref href="../../../change-types/drop-table.html">dropTable</MadCap:xref>, <MadCap:xref href="../../../change-types/sql.html">sql</MadCap:xref>, and <MadCap:xref href="../../../change-types/sql-file.html">sqlFile</MadCap:xref>:</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#yaml_example_override_default" id="label_yaml_example_override_default" class="js-tablist__link">YAML example</a>
                </li>
                <li class="js-tablist__item"><a href="#json_example_override_default" id="label_json_example_override_default" class="js-tablist__link">JSON example</a>
                </li>
                <li class="js-tablist__item"><a href="#xml_example_override_default" id="label_xml_example_override_default" class="js-tablist__link">XML example</a>
                </li>
            </ul>
            <div id="yaml_example_override_default" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: 1
    author: liquibaseuser
    changes:
      - createTable:
          tableName: testTable
          columns:
            - column:
                name: id
    rollback:
      - dropTable:
          tableName: testTable</code></pre>
            </div>
            <div id="json_example_override_default" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": 1,
    "author": "liquibaseuser",
    "changes": [
      {
        "createTable": {
          "tableName": "testTable"
        }
      }
    ],
    "rollback": [
      {
        "dropTable": {
          "tableName": "testTable"
        }
      }
    ]
  }
}</code></pre>
            </div>
            <div id="xml_example_override_default" class="js-tabcontent"><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="1" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        &lt;dropTable tableName="testTable"/&gt;
    &lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p>Alternatively, you can have raw SQL in the content part of the <code>&lt;rollback&gt;</code> element.  For example:</p><pre><code class="language-xml">&lt;changeSet id="1" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        drop table testTable
    &lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p>Liquibase treats the raw SQL within <code>&lt;rollback&gt;</code> the same as in the <code>&lt;sql&gt;</code>&#160;<MadCap:variable name="General.changetypes" />, with <code>stripComments</code> set to <code>true</code>, <code>splitStatements</code> set to <code>true</code>, and <code>endDelimiter</code> set to <code>;</code>. For more details, see the XML example from the <MadCap:xref href="../../../change-types/sql.html">sql</MadCap:xref> documentation.</p>
            </div>
        </div>
        <h3>Multiple rollbacks</h3>
        <p>You can also specify multiple <MadCap:variable name="General.changetypes" />s within a single <code>&lt;rollback&gt;</code>&#160;statement or across multiple <code>&lt;rollback&gt;</code> statements:</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#yaml_example_multiple_rollbacks" id="label_yaml_example_multiple_rollbacks" class="js-tablist__link">YAML example</a>
                </li>
                <li class="js-tablist__item"><a href="#json_example_multiple_rollbacks" id="label_json_example_multiple_rollbacks" class="js-tablist__link">JSON example</a>
                </li>
                <li class="js-tablist__item"><a href="#xml_example_multiple_rollbacks" id="label_xml_example_multiple_rollbacks" class="js-tablist__link">XML example</a>
                </li>
            </ul>
            <div id="yaml_example_multiple_rollbacks" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: multiRollbackTest
    author: liquibaseuser
    changes:
      - createTable:
          tableName: multiRollback1
          columns:
            - column:
                name: id
      - createTable:
          tableName: multiRollback2
          columns:
            - column:
                name: id
      - createTable:
          tableName: multiRollback3
          columns:
            - column:
                name: id
    rollback:
      - dropTable:
          tableName: multiRollback1
      - dropTable:
          tableName: multiRollback2
    rollback:
      - dropTable:
          tableName: multiRollback3</code></pre>
            </div>
            <div id="json_example_multiple_rollbacks" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": multiRollbackTest,
    "author": "liquibaseuser",
    "changes": [
      {
        "createTable": {
          "tableName": "multiRollback1",
          "columns": [
            {
              "column": {
                "name": "id"
              }
            }
          ]
        },
        "createTable": {
          "tableName": "multiRollback2"
          "columns": [
            {
              "column": {
                "name": "id"
              }
            }
          ]
        },
        "createTable": {
          "tableName": "multiRollback3"
          "columns": [
            {
              "column": {
                "name": "id"
              }
            }
          ]
        }
      }
    ],
    "rollback": [
      {
        "dropTable": {
          "tableName": "multiRollback1"
        },
        "dropTable": {
          "tableName": "multiRollback2"
        }
      }
    ],
    "rollback": [
      {
        "dropTable": {
          "tableName": "multiRollback3"
        }
      }
    ],
  }
}</code></pre>
            </div>
            <div id="xml_example_multiple_rollbacks" class="js-tabcontent">
                <p><MadCap:variable name="General.changetypes" /> syntax:</p><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="multiRollbackTest" author="liquibaseuser"&gt;
    &lt;createTable tableName="multiRollback1"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback2"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback3"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        &lt;dropTable tableName="multiRollback1"/&gt;
        &lt;dropTable tableName="multiRollback2"/&gt;
    &lt;/rollback&gt;
    &lt;rollback&gt;
      &lt;dropTable tableName="multiRollback3"/&gt;
    &lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p>Raw SQL:</p><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="multiRollbackTest" author="liquibaseuser"&gt;
    &lt;createTable tableName="multiRollback1"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback2"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback3"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        drop table multiRollback1;
        drop table multiRollback2;
    &lt;/rollback&gt;
    &lt;rollback&gt;drop table multiRollback3&lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
            </div>
        </div>
        <h3>Directly reference changeset</h3>
        <p>The following example shows how you can use a <code>&lt;rollback&gt;</code> tag to reference the changeset that originally created a statement. This example uses changeset <code>2</code> to implement rollback logic  against changeset <code>1</code>:</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#sql_example_reference_changeset" id="label_sql_example_reference_changeset" class="js-tablist__link">SQL example</a>
                </li>
                <li class="js-tablist__item"><a href="#yaml_example_reference_changeset" id="label_yaml_example_reference_changeset" class="js-tablist__link">YAML example</a>
                </li>
                <li class="js-tablist__item"><a href="#json_example_reference_changeset" id="label_json_example_reference_changeset" class="js-tablist__link">JSON example</a>
                </li>
                <li class="js-tablist__item"><a href="#xml_example_reference_changeset" id="label_xml_example_reference_changeset" class="js-tablist__link">XML example</a>
                </li>
            </ul>
            <div id="sql_example_reference_changeset" class="js-tabcontent"><pre xml:space="preserve"><code class="language-sql">--changeset liquibaseuser:1
create table testTable ( id int primary key, name varchar(255) );

--changeset liquibaseuser:2
--rollback drop table testTable;
--rollback changesetId:1 changesetAuthor:liquibaseuser changesetPath:optional/path/to/myChangeLog.sql</code></pre>
            </div>
            <div id="yaml_example_reference_changeset" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: 1
    author: liquibaseuser
    changes:
      - createTable:
          tableName: testTable
          columns:
            - column:
                name: id
- changeSet:
    id: 2
    author: liquibaseuser
    rollback:
      - dropTable:
          tableName: testTable
      changeSetId: 1
      changeSetAuthor: liquibaseuser
      changeSetPath: optional/path/to/myChangeLog.yaml</code></pre>
            </div>
            <div id="json_example_reference_changeset" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": 1,
    "author": "liquibaseuser",
    "changes": [
      {
        "createTable": {
          "tableName": "testTable",
          "columns": [
            {
              "column": {
                "name": "id",
                "type": "varchar(255)"
              }
            }
          ]
        }
      }
    ]
{
  "changeSet": {
    "id": 2,
    "author": "liquibaseuser",
    "rollback": [
      {
        "dropTable": {
          "tableName": "testTable"
        }
      },
      "changeSetId": "1",
      "changeSetAuthor": "liquibaseuser",
      "changeSetPath": "optional/path/to/myChangeLog.json"
    ]
  }
}</code></pre>
            </div>
            <div id="xml_example_reference_changeset" class="js-tabcontent"><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="1" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"/&gt;
        &lt;column name="id" type="varchar(255)"/&gt;
    &lt;/createTable&gt;
&lt;/changeSet&gt;

&lt;changeSet id="2" author="liquibaseuser"&gt;
    &lt;dropTable tableName="testTable"/&gt;
    &lt;rollback changesetId="1" changesetAuthor="liquibaseuser" changesetPath="optional/path/to/myChangeLog.xml"/&gt;
&lt;/changeSet&gt;</code></pre>
            </div>
        </div>
        <h3>Empty rollback statements</h3>
        <p>If you do not want to revert a change in a rollback mode, use either the keyword <code>empty</code> or the keyword <code>not required</code> inside the <code>rollback</code> tag. In XML, YAML, and JSON changelogs, you can also use an empty string inside the <code>rollback</code> tag.</p>
        <div class="js-tabs">
            <ul class="js-tablist" data-hx="h3">
                <li class="js-tablist__item"><a href="#sql_example_empty" id="label_sql_example_empty" class="js-tablist__link">SQL example</a>
                </li>
                <li class="js-tablist__item"><a href="#yaml_example_empty" id="label_yaml_example_empty" class="js-tablist__link">YAML example</a>
                </li>
                <li class="js-tablist__item"><a href="#json_example_empty" id="label_json_example_empty" class="js-tablist__link">JSON example</a>
                </li>
                <li class="js-tablist__item"><a href="#xml_example_empty" id="label_xml_example_empty" class="js-tablist__link">XML example</a>
                </li>
            </ul>
            <div id="sql_example_empty" class="js-tabcontent"><pre xml:space="preserve"><code class="language-sql">--changeset liquibaseuser:1
create table testTable ( id int primary key, name varchar(255) );
--rollback empty</code></pre>
            </div>
            <div id="yaml_example_empty" class="js-tabcontent"><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: 1
    author: liquibase
    changes:
      - createTable:
          tableName: testTable
          columns:
            - column:
                name: id
                type: int
    rollback: empty</code></pre>
                <p>You can also use an empty string (<code>rollback: ""</code>) or an empty array (<code>rollback: []</code>).</p>
            </div>
            <div id="json_example_empty" class="js-tabcontent"><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": 1,
    "author": "example",
    "changes": [
      {
        "createTable": {
          "tableName": "testTable",
          "columns": [
            {
              "column": {
                "name": "id",
                "type": "int"
              }
            }
          ]
        }
      }
    ],
    "rollback": "empty"
  }
}</code></pre>
                <p>You can also use an empty string (<code>"rollback": ""</code>) or an empty array (<code>"rollback": []</code>).</p>
            </div>
            <div id="xml_example_empty" class="js-tabcontent"><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="3" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;empty&lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p>You can also use an empty string (<code>&lt;rollback&gt;&lt;/rollback&gt;</code>) or  a self-closing-tag (<code>&lt;rollback/&gt;</code>).</p>
            </div>
        </div>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The <code><MadCap:xref href="../../../change-types/output.html">output</MadCap:xref></code>&#160;<MadCap:variable name="General.changetypes" /> support automatic rollbacks.</p>
    </body>
</html>