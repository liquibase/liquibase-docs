<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head>
    </head>
    <body>
        <h3>Formatted SQL</h3>
        <p><MadCap:variable name="General.Liquibase" /> does not support an automatic rollback for formatted SQL <MadCap:variable name="General.changeset" />s. Also, some <MadCap:variable name="General.changetypes" />s have no corresponding <code>rollback</code> commands that can be automatically generated by <MadCap:variable name="General.Liquibase" />. In these cases, you should add custom rollback statements to the <MadCap:variable name="General.changeset" />s if you want to use <code>rollback</code> commands. For example, in formatted SQL:</p><pre xml:space="preserve"><code class="language-sql">--changeset liquibaseuser:1
create table testTable ( id int primary key, name varchar(255) );
--rollback drop table testTable;
				
--changeset liquibaseuser:2
insert into testTable values ('1','The First', 'Country')
insert into testTable values ('2','The Second', 'Country2')
--rollback delete from testTable where id='1'
--rollback delete from testTable where id='2'</code></pre>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.19.0 and later, you can specify multiple rollback statements in a block comment:</p><pre xml:space="preserve"><code class="language-sql">--changeset liquibaseuser:2
insert into testTable values ('1','The First', 'Country')
insert into testTable values ('2','The Second', 'Country2')
/* liquibase rollback
rollback delete from testTable where id='1'
rollback delete from testTable where id='2'
*/</code></pre>
        <p>In <MadCap:variable name="General.Liquibase" /> 4.26.0 and later, you can also specify rollback SQL&#160;for a <MadCap:variable name="General.changeset" /> in a separate file using the <code>--rollbackSqlFile</code> statement:</p><pre><code class="language-sql">--changeset liquibase-user:1
DROP PROCEDURE hello_world;
--rollbackSqlFile:release_1.0/rollback_45895.sql</code></pre>
        <p>For more information, see <MadCap:xref href="../../../concepts/changelogs/sql-format.html">Example Changelogs: SQL Format</MadCap:xref>.</p>
        <h3>Override default rollback commands</h3>
        <p>The <code>&lt;rollback&gt;</code> tag describes how to roll back a change using SQL statements, <MadCap:variable name="General.changetypes" />s, or a reference to a previous <MadCap:variable name="General.changeset" />. You can use any <MadCap:variable name="General.changetypes" /> in the <code>&lt;rollback&gt;</code> element, such as <MadCap:xref href="../../../change-types/drop-table.html">dropTable</MadCap:xref>, <MadCap:xref href="../../../change-types/sql.html">sql</MadCap:xref>, and <MadCap:xref href="../../../change-types/sql-file.html">sqlFile</MadCap:xref>:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">XML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-xml">&lt;changeSet id="1" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        &lt;dropTable tableName="testTable"/&gt;
    &lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p>Alternatively, you can have raw SQL in the content part of the <code>&lt;rollback&gt;</code> element.  For example:</p><pre><code class="language-xml">&lt;changeSet id="1" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        drop table testTable
    &lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p><MadCap:variable name="General.Liquibase" /> treats the raw SQL within <code>&lt;rollback&gt;</code> the same as in the <code>&lt;sql&gt;</code>&#160;<MadCap:variable name="General.changetypes" />, with <code>stripComments</code> set to <code>true</code>, <code>splitStatements</code> set to <code>true</code>, and <code>endDelimiter</code> set to <code>;</code>. For more details, see the XML example from the <MadCap:xref href="../../../change-types/sql.html">sql</MadCap:xref> documentation.</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">YAML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: 1
    author: liquibaseuser
    changes:
      - createTable:
          tableName: testTable
          columns:
            - column:
                name: id
    rollback:
      - dropTable:
          tableName: testTable</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">JSON</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": 1,
    "author": "liquibaseuser",
    "changes": [
      {
        "createTable": {
          "tableName": "testTable"
        }
      }
    ],
    "rollback": [
      {
        "dropTable": {
          "tableName": "testTable"
        }
      }
    ]
  }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h3>Multiple rollbacks</h3>
        <p>You can also specify multiple <MadCap:variable name="General.changetypes" />s within a single <code>&lt;rollback&gt;</code>&#160;statement or across multiple <code>&lt;rollback&gt;</code> statements:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">XML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p><MadCap:variable name="General.changetypes" /> syntax:</p><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="multiRollbackTest" author="liquibaseuser"&gt;
    &lt;createTable tableName="multiRollback1"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback2"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback3"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        &lt;dropTable tableName="multiRollback1"/&gt;
        &lt;dropTable tableName="multiRollback2"/&gt;
    &lt;/rollback&gt;
    &lt;rollback&gt;
      &lt;dropTable tableName="multiRollback3"/&gt;
    &lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p>Raw SQL:</p><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="multiRollbackTest" author="liquibaseuser"&gt;
    &lt;createTable tableName="multiRollback1"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback2"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;createTable tableName="multiRollback3"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;
        drop table multiRollback1;
        drop table multiRollback2;
    &lt;/rollback&gt;
    &lt;rollback&gt;drop table multiRollback3&lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">YAML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: multiRollbackTest
    author: liquibaseuser
    changes:
      - createTable:
          tableName: multiRollback1
          columns:
            - column:
                name: id
      - createTable:
          tableName: multiRollback2
          columns:
            - column:
                name: id
      - createTable:
          tableName: multiRollback3
          columns:
            - column:
                name: id
    rollback:
      - dropTable:
          tableName: multiRollback1
      - dropTable:
          tableName: multiRollback2
    rollback:
      - dropTable:
          tableName: multiRollback3</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">JSON</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": multiRollbackTest,
    "author": "liquibaseuser",
    "changes": [
      {
        "createTable": {
          "tableName": "multiRollback1",
          "columns": [
            {
              "column": {
                "name": "id"
              }
            }
          ]
        },
        "createTable": {
          "tableName": "multiRollback2"
          "columns": [
            {
              "column": {
                "name": "id"
              }
            }
          ]
        },
        "createTable": {
          "tableName": "multiRollback3"
          "columns": [
            {
              "column": {
                "name": "id"
              }
            }
          ]
        }
      }
    ],
    "rollback": [
      {
        "dropTable": {
          "tableName": "multiRollback1"
        },
        "dropTable": {
          "tableName": "multiRollback2"
        }
      }
    ],
    "rollback": [
      {
        "dropTable": {
          "tableName": "multiRollback3"
        }
      }
    ],
  }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h3>Directly reference <MadCap:variable name="General.changeset" /></h3>
        <p>The following example shows how you can use a <code>&lt;rollback&gt;</code> tag to reference the <MadCap:variable name="General.changeset" /> that originally created a statement. This example uses <MadCap:variable name="General.changeset" /> <code>2</code> to implement rollback logic  against <MadCap:variable name="General.changeset" /> <code>1</code>:</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">SQL</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-sql">--changeset liquibaseuser:1
create table testTable ( id int primary key, name varchar(255) );

--changeset liquibaseuser:2
--rollback drop table testTable;
--rollback changesetId:1 changesetAuthor:liquibaseuser changesetPath:optional/path/to/myChangeLog.sql</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">XML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre><code class="language-xml">&lt;changeSet id="1" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"/&gt;
        &lt;column name="id" type="varchar(255)"/&gt;
    &lt;/createTable&gt;
&lt;/changeSet&gt;

&lt;changeSet id="2" author="liquibaseuser"&gt;
    &lt;dropTable tableName="testTable"/&gt;
    &lt;rollback changesetId="1" changesetAuthor="liquibaseuser" changesetPath="optional/path/to/myChangeLog.xml"/&gt;
&lt;/changeSet&gt;</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">YAML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: 1
    author: liquibaseuser
    changes:
      - createTable:
          tableName: testTable
          columns:
            - column:
                name: id
- changeSet:
    id: 2
    author: liquibaseuser
    rollback:
      - dropTable:
          tableName: testTable
      changesetId: 1
      changesetAuthor: liquibaseuser
      changesetpath: optional/path/to/myChangeLog.yaml</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">JSON</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": 1,
    "author": "liquibaseuser",
    "changes": [
      {
        "createTable": {
          "tableName": "testTable",
          "columns": [
            {
              "column": {
                "name": "id",
                "type": "varchar(255)"
              }
            }
          ]
        }
      }
    ]
{
  "changeSet": {
    "id": 2,
    "author": "liquibaseuser",
    "rollback": [
      {
        "dropTable": {
          "tableName": "testTable"
        }
      },
      "changesetId": "1",
      "changesetAuthor": "liquibaseuser",
      "changesetPath": "optional/path/to/myChangeLog.json"
    ]
  }
}</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <h3>Empty rollback statements</h3>
        <p>If you do not want to revert a change in a rollback mode, use either the keyword <code>empty</code> or the keyword <code>not required</code> inside the <code>rollback</code> tag. In XML, YAML, and JSON <MadCap:variable name="General.changelog" />s, you can also use an empty string inside the <code>rollback</code> tag.</p>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">SQL</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-sql">--changeset liquibaseuser:1
create table testTable ( id int primary key, name varchar(255) );
--rollback empty</code></pre>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">XML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-xml">&lt;changeSet id="3" author="liquibaseuser"&gt;
    &lt;createTable tableName="testTable"&gt;
        &lt;column name="id" type="int"/&gt;
    &lt;/createTable&gt;
    &lt;rollback&gt;empty&lt;/rollback&gt;
&lt;/changeSet&gt;</code></pre>
                <p>You can also use an empty string (<code>&lt;rollback&gt;&lt;/rollback&gt;</code>) or  a self-closing-tag (<code>&lt;rollback/&gt;</code>).</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">YAML</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-yaml">- changeSet:
    id: 1
    author: liquibase
    changes:
      - createTable:
          tableName: testTable
          columns:
            - column:
                name: id
                type: int
    rollback: empty</code></pre>
                <p>You can also use an empty string (<code>rollback: ""</code>).</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot style="font-size: 1.1em;">JSON</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody><pre xml:space="preserve"><code class="language-json">{
  "changeSet": {
    "id": 1,
    "author": "example",
    "changes": [
      {
        "createTable": {
          "tableName": "testTable",
          "columns": [
            {
              "column": {
                "name": "id",
                "type": "int"
              }
            }
          ]
        }
      }
    ],
    "rollback": "empty"
  }
}</code></pre>
                <p>You can also use an empty string (<code>"rollback": ""</code>).</p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The <code><MadCap:xref href="../../../change-types/empty.html">&lt;empty/&gt;</MadCap:xref></code> and <code><MadCap:xref href="../../../change-types/output.html">&lt;output/&gt;</MadCap:xref></code>&#160;<MadCap:variable name="General.changetypes" />s support automatic rollbacks.</p>
    </body>
</html>