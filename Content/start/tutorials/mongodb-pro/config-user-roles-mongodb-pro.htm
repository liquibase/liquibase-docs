<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/start/tutorials/mongodb/mongodb-pro-user-roles.html" />
        <meta name="description" content="You can access data and commands through role-based authorization in the MongoDB Pro Extension." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <MadCap:snippetBlock src="../../../Z_Resources/Snippets/images/icon-pro-top.flsnp" />
        <h1>Configuring User Roles for MongoDB Pro</h1>
        <p>The <MadCap:variable name="General.Liquibase" /> <a href="home.htm">MongoDB Pro Extension</a> accesses MongoDB as a user and respects all MongoDB role-based security structures. That means that you must provide sufficient privileges to the user ID that <MadCap:variable name="General.Liquibase" /> is using so that <MadCap:variable name="General.Liquibase" /> can operate the way you want.</p>
        <p>This guide discusses two approaches to creating a user with sufficient privileges for <MadCap:variable name="General.Liquibase" /> and the MongoDB Pro Extension to perform all of their functionality.  The two methods include the <a href="https://www.mongodb.com/docs/manual/reference/built-in-roles/">built-in roles</a> method and the <a href="https://www.mongodb.com/docs/manual/core/security-user-defined-roles/">user-defined role</a> method. It is possible to create more restrictive setups, but depending on which restrictions are imposed, some <MadCap:variable name="General.Liquibase" /> and Mongo DB Pro Extension features may not work.<br /></p>
        <h2>Role requirements</h2>
        <p>The two methods to create a user with privileges for <MadCap:variable name="General.Liquibase" /> include the <a href="https://www.mongodb.com/docs/manual/reference/built-in-roles/">built-in roles</a> method and the <a href="https://www.mongodb.com/docs/manual/core/security-user-defined-roles/">user-defined role</a> method. The built-in role method allows you to provide different levels of access commonly needed in a database system. The user-defined role method allows for custom role creation when the built-in roles cannot describe the privileges necessary for the job.</p>
        <h3>Permissions: roles required to manage non-administrative database changes</h3>
        <p>The minimum required roles and permissions for <MadCap:variable name="General.Liquibase" /> to manage changes to non-system collections and the <code>system.js</code> collection are:</p>
        <ul>
            <li><code>readWrite</code>
            </li>
            <li><code>collMod</code>
            </li>
        </ul>
        <h3>Roles Required to Manage Administrative Tasks</h3>
        <ul>
            <li><code>readWrite</code>
            </li>
            <li><code>dbAdmin</code>
            </li>
        </ul>
        <p>As a MongoDB administrator, you have the ability to create a user using these standard roles or you can create your own custom roles. <MadCap:variable name="General.Liquibase" /> supports both approaches as long as the resulting permissions meet the above requirements.</p>
        <h2>Built-in roles method</h2>
        <p>This method allows you to create a user that has <code>readWrite</code> and <code>dbAdmin</code> roles. when <code>dbAdmin</code> roles are enabled, this user can run the <MadCap:variable name="General.LBPro" /> MongoDB&#160;extension directly from the administrative perspective. As mentioned above, the built-in role method allows you to provide different levels of access commonly needed in a database system. If you need a user to have administrative access, use this guide.</p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">Without <b><code>dbAdmin</code></b> role permissions, you cannot run the MongoDB Pro extension from the administrative perspective.</p>
        <p>Create a user with the built-in <code>readWrite</code> and <code>dbAdmin</code> roles by executing the following code in one of two ways:</p>
        <ol>
            <li>With your own user, password, and database content, use Mongo Shell directly in MongoDB to execute the code.</li>
            <li>With your own user, password, and database content, add this code as part of the Docker <code>init-script</code> if you use Docker to start your database.</li>
        </ol><pre xml:space="preserve"><code class="language-json">db.createUser(
    {
        user: "lbuser",
        pwd: "password",
        roles: [
            {
                role: "readWrite",
                db: "yourdb"
            },
            {
                role: "dbAdmin",
                db: "yourdb"
            }
        ]
    }
);</code></pre>
        <h2>User-defined roles method</h2>
        <p>This method allows you to create a custom user-defined role which is inherited from the <code>readWrite</code> role.  If a user does not need the <code>dbAdmin</code> role for security purposes, use this method.</p>
        <p>Create a role with <code>readWrite</code> with only one additional <code>collMod</code> privilege by executing the two sections of code in one of two ways: <br /></p>
        <ul>
            <li>With your own user, password, and database content, use Mongo Shell directly in MongoDB to execute the code.</li>
            <li>With your own user, password, and database content, add this code as part of the Docker <code>init-script</code> if you use Docker to start your database.</li>
        </ul>
        <ol>
            <li>This section allows you to create a role with the specific action:</li><pre xml:space="preserve"><code class="language-json">db.createRole(
    {
        role: "liquibase_role",
        privileges: [{resource: {db: 'yourdb', collection: ''}, actions: ['collMod']}],
        roles: [
            { role: "readWrite", db: "yourdb" }
        ]
    }
)</code></pre>
            <li>Assign the roles to your new created user:</li><pre xml:space="preserve"><code class="language-json">db.createUser(
    {
        user: "lbuser",
        pwd: "password",
        roles: [
            {
                role: "liquibase_role",
                db: "yourdb"
            }
        ]
    }
);</code></pre>
        </ol>
        <h2>Related links</h2>
        <ul>
            <li><a href="https://www.mongodb.com/docs/manual/reference/built-in-roles/#database-user-roles">MongoDB Built-In Roles</a>
            </li>
            <li><a href="https://www.mongodb.com/docs/manual/core/security-user-defined-roles/">MongoDB User-Defined Roles</a>
            </li>
        </ul>
    </body>
</html>