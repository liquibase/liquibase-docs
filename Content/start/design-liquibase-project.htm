<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="True">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/start/design-liquibase-project.html" />
        <meta name="description" content="Reference information and best practices on how to design your Liquibase project and structure your changelogs." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Design Your <MadCap:variable name="General.Liquibase" /> Project</h1>
        <p>Your <a href="../concepts/changelogs/home.html"><MadCap:variable name="General.changelog" /></a> is the core of your <MadCap:variable name="General.Liquibase" /> project. While you can use one <MadCap:variable name="General.changelog" /> for all your deployments, this may not scale well. Instead, you can use multiple <MadCap:variable name="General.changelog" />s for different purposes. To organize multiple <MadCap:variable name="General.changelog" />s, you can use the <code><MadCap:xref href="../change-types/include.html">include</MadCap:xref></code> and <code><MadCap:xref href="../change-types/includeall.html">includeAll</MadCap:xref></code> tags to create a root (main/parent) <MadCap:variable name="General.changelog" /> and one or more nested (child) <MadCap:variable name="General.changelog" />s. This document explains some best practices on structuring your <MadCap:variable name="General.changelog" />s.</p>
        <h2>Prerequisites</h2>
        <p>If you're new to <MadCap:variable name="General.Liquibase" />, make sure you understand the fundamentals before creating your own project:</p>
        <ol>
            <li>
                <MadCap:xref href="install/home.htm">Install [%=General.Liquibase%]</MadCap:xref> – Download <MadCap:variable name="General.Liquibase" /> on your machine</li>
            <li>
                <MadCap:xref href="home.htm">Get Started with [%=General.Liquibase%]</MadCap:xref> – Learn how to use <MadCap:variable name="General.Liquibase" /> with an example database</li>
        </ol>
        <h2>Create a project</h2>
        <p>The Get Started guide linked previously shows you how <MadCap:variable name="General.Liquibase" /> deployments work using a sample database and <MadCap:variable name="General.changelog" />. However, your organization's needs go beyond a demonstration. To create a new <MadCap:variable name="General.Liquibase" /> project, run the <code><MadCap:xref href="../commands/init/project.htm">init project</MadCap:xref></code> command in your command line:</p><pre><code class="language-text">liquibase init project</code></pre>
        <p>This generates a new <MadCap:variable name="General.changelog" /> and <a href="../concepts/connections/creating-config-properties.html"><code><MadCap:variable name="General.liquiPropFile" /></code> file</a> that you can customize and expand. You can use the default settings or specify your own. For more information on command arguments, see the <code>init project</code> page.</p>
        <h2>Choose a schema design pattern</h2>
        <p>You can use <MadCap:variable name="General.Liquibase" /> in two ways:</p>
        <ul>
            <li><b>Shared schema:</b> All developers work in a single, shared database schema</li>
            <li><b>Multi-schema:</b>&#160;Each team works in a different database schema</li>
        </ul>
        <p>To choose what's best for your organization, consider the processes your developers currently use to deploy changes to the database.</p>
        <h3>Shared schema</h3>
        <p>Using a single schema can simplify your database structure and standardization process. However, a large single-schema database with complex object structures may require you to write long queries that negatively affect performance.</p>
        <p>Everyone sharing a schema must agree on a deployment process. One model is to keep all schema content in a single repository owned by one team. When other teams want to make changes, they submit pull requests from their source control tool. Alternatively, each team can work in their own directory in the schema and try to minimize cross-team dependencies.</p>
        <h3>Multiple schemas</h3>
        <p>Using multiple schemas may make it easier to organize your data, prevent conflicts with source control merges or broken dependencies, help you store data backups, and let you customize user and application permissions for each schema.</p>
        <p>However, using multiple schemas means you may have to duplicate some of your data, which can make consistency more difficult. Depending on your automation tooling and workflow, you may also need to call <MadCap:variable name="General.Liquibase" /> multiple times to send your code to production, which requires extra maintenance from your DevOps team.</p>
        <h2>Choose a <MadCap:variable name="General.changelog" /> structure</h2>
        <p>It is a best practice to create a simple root <MadCap:variable name="General.changelog" /> that you don't modify directly. Instead, define nested <MadCap:variable name="General.changelog" />s with the <code><MadCap:xref href="../change-types/include.html">include</MadCap:xref></code> and <code><MadCap:xref href="../change-types/includeall.html">includeAll</MadCap:xref></code> tags and make changes to them. You can modify and deploy the nested <MadCap:variable name="General.changelog" />s independently or deploy all changes in a single <code><MadCap:xref href="../commands/update/update.html">update</MadCap:xref></code> from the root <MadCap:variable name="General.changelog" />.</p>
        <MadCap:snippetBlock src="../Z_Resources/Snippets/note/changelog-include-includeall-root.flsnp" />
        <p>There are two common <MadCap:variable name="General.changelog" /> design patterns, <b>object-oriented</b> and <b>release-oriented</b>. The design you choose should correspond to the structure of your existing code repository and workflow.</p>
        <h3>Object-oriented</h3>
        <p>In an object-oriented <MadCap:variable name="General.changelog" /> structure, you create one <MadCap:variable name="General.changelog" /> per object or object type. For example:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.yaml
        changelog-index.sql
        changelog-procedure.sql
        changelog-table.sql
        changelog-view.sql</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.yaml</code> which contains <code>include</code> tags referencing <code>changelog-index.sql</code>, <code>changelog-procedure.sql</code>, <code>changelog-table.sql</code>, and <code>changelog-view.sql</code>.</p>
        <p>Alternatively, you&#160;can create directories for each type of object, each containing one or more <MadCap:variable name="General.changelog" />s per particular database object:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.yaml
        changelog-indexes
          my-favorite-index.sql
          that-other-index.sql
        changelog-tables
          employees.sql
          customers.sql</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.yaml</code> which contains <code>includeAll</code> tags referencing the directories <code>/changelog-indexes</code> and <code>/changelog-tables</code>. The <MadCap:variable name="General.changelog" />s you modify regularly are contained in the nested directories rather than in the overarching <code>/changelog</code> directory.</p>
        <p>An object-oriented <MadCap:variable name="General.changelog" /> format allows you to easily see changes made over time to specific objects (like a particular table) or groups of objects (like all tables in your database). It also makes it easier to roll back changes to particular objects without worrying about unrelated changes in the <MadCap:variable name="General.changelog" />.</p>
        <p>If all your developers work in the same <MadCap:variable name="General.changelog" />, they may experience frequent source control merge conflicts. However, if developers work in different <MadCap:variable name="General.changelog" />s for each object, they may be less likely to overwrite each other's code.</p>
        <h3>Release-oriented</h3>
        <p>In a release-oriented <MadCap:variable name="General.changelog" /> structure, you create one <MadCap:variable name="General.changelog" /> per release or release group. For example:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.yaml
        changelog-1.0.sql
        changelog-1.1.sql
        changelog-2.0.sql</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.yaml</code> which contains <code>include</code> tags referencing <code>changelog-1.0.sql</code>, <code>changelog-1.1.sql</code>, and <code>changelog-2.0.sql</code>.</p>
        <p>Alternatively, you can create directories for each major release (or other release group), each containing one or more <MadCap:variable name="General.changelog" />s per minor release:</p><pre xml:space="preserve"><code class="language-text" data-lang="text">com
  example
    db
      changelog
        changelog-root.yaml
        changelog-1.X
          changelog-1.0.sql
          changelog-1.1.sql
        changelog-2.X
          changelog-2.0.sql</code></pre>
        <p>In this example, we have a root <MadCap:variable name="General.changelog" /> called <code>changelog-root.yaml</code> which contains <code>includeAll</code> tags referencing the directories <code>/changelog-1.X</code> and <code>/changelog-2.X</code>. The <MadCap:variable name="General.changelog" />s you modify for a particular release are contained in the nested directories rather than in the overarching <code>/changelog</code> directory.</p>
        <p>A release-oriented <MadCap:variable name="General.changelog" /> structure lets you bundle all content associated with a release in one place. However, this design can be difficult to maintain. If you want to see changes made to a particular object over time, the release-oriented structure requires you to look in multiple locations for that information.</p>
        <p>Additionally, having a single <MadCap:variable name="General.changelog" /> per release (even minor release) may lead to more frequent source control merge conflicts. You can solve this by creating multiple <MadCap:variable name="General.changelog" />s within each release directory, such as <code>/changelog-1.0/indexes.sql</code> and <code>/changelog-1.0/tables.sql</code>. However, this structure may be more complicated to navigate and maintain than a pure object-oriented <MadCap:variable name="General.changelog" /> design.</p>
        <h2>Prepare for deployment</h2>
        <ul>
            <li>When you use the <code>includeAll</code> tag in your root <MadCap:variable name="General.changelog" />, you must ensure your file naming convention is consistent. <MadCap:variable name="General.Liquibase" /> sorts pending scripts in alphanumeric order and then deploys them in that order.</li>
            <li>You can specify filtering logic to control which <MadCap:variable name="General.changeset" />s in your <MadCap:variable name="General.changelog" /> are executed at runtime by using  <a href="../concepts/changelogs/preconditions.html">preconditions</a>, <a href="../concepts/changelogs/attributes/contexts.html">contexts</a>, <a href="../concepts/changelogs/attributes/labels.html">labels</a>, and other <MadCap:variable name="General.changelog" /> <MadCap:variable name="General.Param/Attribute" />s like <code><MadCap:xref href="../concepts/changelogs/attributes/run-always.htm">runAlways</MadCap:xref></code> and <code><MadCap:xref href="../concepts/changelogs/attributes/runonchange.htm">runOnChange</MadCap:xref></code>. For more information, see <MadCap:xref href="../concepts/changelogs/attributes/home.htm">Changelog [%=General.Param/Attr/Uppercased%]s</MadCap:xref>.</li>
            <li MadCap:conditions="Default.EXCLUDE">When you publish updates to your software, it is a best practice to release separate artifacts for each step in your development pipeline, such as artifacts for <code>dev</code>, <code>qa</code>, and <code>prod</code>. You can easily version artifacts and run checks on them with automation tools. Alternatively or in addition, you can use contexts to group <MadCap:variable name="General.changeset" />s into environments and labels to mark <MadCap:variable name="General.changeset" />s as belong to specific features. Simulating environments with branches in source control is <b>not recommended</b>.</li>
        </ul>
        <h2>Next steps</h2>
        <ol>
            <li>
                <MadCap:xref href="tutorials/home.html">[%=General.Liquibase%] Database Tutorials</MadCap:xref> – Configure <MadCap:variable name="General.Liquibase" /> to work with your own database</li>
            <li>
                <MadCap:xref href="../concepts/bestpractices.html">Best Practices</MadCap:xref> – Read about best practices to follow with <MadCap:variable name="General.Liquibase" /></li>
        </ol>
    </body>
</html>