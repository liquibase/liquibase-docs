<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False" MadCap:conditions="Default.EXCLUDE">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/workflows/liquibase-community/using-the-jenkins-pipeline-stage-with-spinnaker.html" />
        <meta name="description" content="This page explains how to use Liquibase with the Spinnaker Jenkins pipeline stage." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Using the Jenkins Pipeline Stage with Spinnaker</h1>
        <p>You can launch Jenkins jobs to run <MadCap:variable name="General.Liquibase" /> and perform database updates in a Spinnaker while using a Jenkins pipeline stage.</p>
        <p>The following diagram shows the Jenkins pipeline stage calling a Jenkins job which executes <MadCap:variable name="General.Liquibase" /> commands on a Jenkins subordinate.</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Jenkins_diagram.png" />
        </p>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">The procedure mentioned in this documentation has been built on top of the application created in the <a href="https://spinnaker.io/docs/setup/other_config/ci/jenkins/">Jenkins article</a>.</p>
        <h2>Setting up Spinnaker and the Jenkins pipeline stage</h2>
        <p>To configure Jenkins and Spinnaker, follow these steps:</p>
        <p><b>Step 1:</b> Make sure you <a href="https://spinnaker.io/docs/setup/other_config/ci/jenkins/">set up Jenkins and Spinnaker</a>.</p>
        <p><b>Step 2:</b> Configure a Jenkins master node using the API Token:</p>
        <ol>
            <li>Go to your Jenkins instance and select <b>Configure</b>.</li>
        </ol>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you are new to Jenkins, see <a href="https://www.jenkins.io/doc/book/getting-started/">Jenkins Documentation</a>.</p>
        <ol start="2">
            <li>Enter a full name, description, and API Token that you want to add:</li>
        </ol>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/api-token.png" />
        </p>
        <ol start="3">
            <li>Select <b>Save</b>.</li>
        </ol>
        <p><b>Step 3:</b> Deploy <code>package</code> and <code>deploy</code> jobs pre-configured so that Spinnaker can run those jobs.</p>
        <p>To deploy jobs, use examples of the <code><a href="https://www.jenkins.io/doc/book/pipeline/jenkinsfile/">Jenkinsfile</a></code> provided later in this documentation. After creating your <code>Jenkinsfile</code> and starting to configure a build, specify mode as a <code>Jenkinsfile</code> and enter the path to this file. The following example shows the path to a <code>Jenkinsfile</code> pointing to the root of the repository.</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Jenkins2.png" />
        </p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Jenkins3.png" />
        </p>
        <h3>Package operation</h3>
        <p>The <code>package</code> pipeline stage deploys changes to the DEV environment and produces a versioned artifact. The <code>package</code> job in Jenkins accepts three parameters – <code>USERNAME</code>, <code>PASSWORD</code>, and <code>ENV</code>:</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Pipeline_package.png" />
        </p>
        <p style="font-weight: bold;">The pseudo-code looks like this:</p>
        <ol>
            <li>Perform pre-check to ensure all tooling is installed and obtain the needed information about each tool’s version</li>
            <li>Check out a branch from a Git repository</li>
            <li>Deploy code to DEV database</li>
            <li>Create a versioned artifact</li>
        </ol>
        <p>The following is an example of the <code>Jenkinsfile</code> to package <MadCap:variable name="General.Liquibase" /> <MadCap:variable name="General.changeset" />s:</p><pre><code class="language-text">#!/usr/bin/env groovy
// Packager declarative pipeline
//
pipeline {
  agent {
	node {
	  label 'datical'
	   customWorkspace "/var/lib/jenkins/workspace/LB_mongo/1.Package-${BUILD_NUMBER}/"
	}
  }

  environment {
	GITURL="git@github.com:datical-customersuccess"
	PROJ_REPO="LB_mongo"
	PATH="$PATH:/opt/liquibase/lb_4.00"
  }
  
  stages {
     stage ('Precheck') {
		steps {
		   sh '''
		      ls -alh
		      pwd
		      whoami
			  which git
			  git --version
			  liquibase --version
			  git config --global user.email "jenkins@datical.com"
			  git config --global user.name "jenkins"
		  '''
	 } // steps
 } // stage 'precheck'

 stage ('Checkout') {
   steps {
	 // checkout Liquibase project from Repo
	 checkout([
	     $class: 'GitSCM',
	     branches: [[name: '*/master']],
	     doGenerateSubmoduleConfigurations: false,
	     extensions: [
		   [$class: 'RelativeTargetDirectory', relativeTargetDir: "${PROJ_REPO}"],
		   [$class: 'LocalBranch', localBranch: 'master']],
		submoduleCfg: [],
		userRemoteConfigs: [[url: "${GITURL}/${PROJ_REPO}.git"]]
	  ])
	  } // steps for checkout stages
  } // stage 'checkout'
    
  stage ('Branches'){
	 steps {
	 sh '''
	   #{ set +x; } 2&gt;/dev/null
 
	   cd ${PROJ_REPO}
	   echo "Current Directory:" `pwd`
	   git branch --set-upstream-to=origin/main main
	   git status
 
	 '''
	} // steps
  }   // Branches stage
    
  stage('Package SQL') {
	steps {
		     sh '''
		        #{ set +x; } 2&gt;/dev/null

		        echo "==== Running PackageSQL (using Liquibase::update) ===="
		        cd ${PROJ_REPO}
		        liquibase --url=mongodb://localhost:27017/${ENV}    \
		        --username=${USERNAME}     \
		        --password=${PASSWORD}     \
		        --log-level=info            \
		        update
		      '''
	}   // steps ... 
  }  // stage 'Package SQL'
 
  stage('Artifact') {
	steps {
	  sh '''
		 #{ set +x; } 2&gt;/dev/null
    
		 echo
		 echo "==== Creating ${BUILD_NUMBER}.zip ===="
		 zip -q -r ${BUILD_NUMBER}.zip *
		 #mv *.zip ..
    
		 echo
		 echo "=====FINISHED===="
	  '''
		// upload artifacts to Artifactory
		script {
		    def server = Artifactory.server 'ArtifactoryServer'
			def uploadSpec = """{
			  "files": [
				{
				 "pattern": "*.zip",
				 "target": "${REPOSITORY_BASE}/${BRANCH}/database/",
				 "flat" : "false"
				}
			   ]
			  }"""
			  server.upload(uploadSpec)

		} // steps for Artifact
     } // stage artifact
      
   }   // stages
   post {
	 always {
		//archiveArtifacts "**/daticaldb.log, **/Reports/**, **/Logs/**, **/Snapshots/**"
		sh '''
		   ls -alh
		'''
		}  
	  }
   }     // pipeline</code></pre>
        <h3>Deploy operation</h3>
        <p>The <code>deploy</code> pipeline stage pulls down the specific artifact version and deploys it to a target database environment. The deploy job in Jenkins accepts four parameters – <code>USERNAME</code>, <code>PASSWORD</code>, <code>ENV</code>, and <code>ARTIFACT_VERSION</code>:</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Pipeline_deploy.png" />
        </p>
        <p style="font-weight: bold;">The pseudo-code looks like this:</p>
        <ol>
            <li>Perform pre-check to ensure all tooling is installed and obtain necessary information about each tool’s version</li>
            <li>Check out a specific version of the artifact</li>
            <li>Deploy code to a target database</li>
        </ol>
        <p>The following is an example of the <code>Jenkinsfile</code> to deploy a <MadCap:variable name="General.Liquibase" /> change:</p><pre><code class="language-text">#!/usr/bin/env groovy
// Deploy declarative pipeline
//
pipeline {
  agent {
	node {
	  label 'datical'
	  customWorkspace "/var/lib/jenkins/workspace/LB_mongo/2.Deploy-${BUILD_NUMBER}/"
	}
  }

  environment {
	TARGET_DB="${params.TARGET_DB}"
	ARTIFACT_VERSION="${params.ARTIFACT_VERSION}"
	PATH="$PATH:/opt/liquibase/lb_4.00"
	PROJ_DIR="LB_mongo"
  }
  
  stages {
	 stage ('Precheck') {
		steps {
		   sh '''
		      ls -alh
		      pwd
		      whoami
		      liquibase --version
		   '''
		} // steps
	} // stage 'precheck'

	stage('Retrieve Artifact') {
	  steps {
	   // download artifact from Artifactory
	   script {
			def server = Artifactory.server 'ArtifactoryServer'
			def downloadSpec = """
			{
			 "files": [
			   {
				"target": "${PROJ_DDB}/",
				"pattern": "${REPOSITORY_BASE}/${BRANCH}/database/${ARTIFACT_VERSION}.zip",
				"explode": "true",
				"flat" : "false"
				}
			   ]
			  }
			  """
			 server.download(downloadSpec)
           }
		} // steps for Artifact
	} // stage artifact 
    
	stage('Status Check') {
	  steps {
		  sh '''
		     set +x
		     if [ ${TARGET_DB} == proddb ]
		     then
		        cd ${PROJ_DIR}
		        echo "Checking if changes have been deployed to Test"
				if liquibase --url=mongodb://localhost:27017/testdb   \
							 --username=${USERNAME}         \
						     --password=${PASSWORD}         \
								status | grep -q "is up to date"; then
					echo "Changes have been applied"
				else
					echo "=========== FAILURE! ================="
					echo "Changes have not been applied to test"
					echo "All changes must be applied to test before Prod"
					echo "======================================"
					exit 1
				fi
			fi
			'''
		} // Steps
	} // Status Check

	stage('Deploy SQL') {
	  steps {
		   sh '''
		       #{ set +x; } 2&gt;/dev/null
			   echo
                
		       echo "==== Running Deploy (using Liquibase::update) ===="
		       cd ${PROJ_DIR}
			   liquibase --url=mongodb://localhost:27017/${${ENV}  \
					     --username=${USERNAME}              \
						 --password=${PASSWORD}              \
		                 --log-level=info 		      \
			          update
			'''
		}   // steps ... 
	}  // stage 'Deploy SQL'
 
 }   // stages
 post {
	always {
		// Jenkins Artifacts
		//archiveArtifacts "**/daticaldb.log, **/Reports/**, **/Logs/**, **/Snapshots/**"
		sh '''
			ls -alh
		'''
	  } //always 
	}  // post
 }  // pipeline</code></pre>
        <p><b>Step 4:</b> Apply Jenkins API Token in Spinnaker:</p><pre><code class="language-text"># Access Halyard pod
export HAL_POD=$(kubectl -n spinnaker get pod -l app=halyard -oname | cut -d'/' -f 2)
kubectl -n spinnaker exec -it ${HAL_POD} bash
				
# Halyard command to enable Jenkins
hal config ci jenkins enable
				
# export environment variables
export BASEURL=http://&lt;jenkinsmaster&gt;.datical.net:8080
export USERNAME=admin
export PASSWORD=&lt;API Token&gt;
hal config ci jenkins master add &lt;name_of_your_jenkins_master&gt; --address $BASEURL --username $USERNAME --password $PASSWORD

# apply changes to Halyard
hal deploy apply</code></pre>
        <p><b>Step 5:</b> In Spinnaker, perform the following:</p>
        <ol>
            <li>Go to <b>Applications</b>, select <b>Actions</b>, and then select <b>Create Application</b></li>
        </ol>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Spinnaker_workflow6.png" />
        </p>
        <ol start="2">
            <li>Select <b>Create Pipeline or Strategy</b> to create a pipeline in the application</li>
        </ol>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Spinnaker_workflow3.png" />
        </p>
        <ol start="3">
            <li>Configure a Jenkins pipeline stage by adding the following parameters:</li>
        </ol>
        <ul>
            <li>Controller</li>
            <li>Job</li>
            <li>Property File</li>
            <li>Artifact Version</li>
            <li>Target Database</li>
        </ul>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Spinnaker_workflow4.png" />
        </p>
        <p><b>Step 6:</b> Select <b>Start Manual Execution</b> to run the pipeline</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Spinnaker_workflow5.png" />
        </p>
        <p>You can confirm an execution of the job by going to Jenkins and viewing the console output.</p>
        <h2>Pipeline as code (JSON)</h2>
        <p>As all Spinnaker jobs are based on JSON, see JSON for jobs you used if you want to manage your Spinnaker pipeline as a code:</p>
        <h3>The <code>package</code> pipeline stage:</h3>
        <p>Input parameters to a Jenkins <code>package</code> job include database credentials (<code>USERNAME</code> and <code>PASSWORD</code>) and the name of the target database (<code>ENV</code>):</p><pre><code class="language-json">"stages": [
	{
	  "continuePipeline": false,
	  "failPipeline": true,
	  "job": "LB/job/1.Package",
	  "master": "jenkins-master",
	  "name": "LB_1_Package",
	  "parameters": {
	      "USERNAME": "lbusername",
	      "PASSWORD": "lbpassword",
		  "ENV": "devdb"
	  },
	  "refId": "1",
	  "requisiteStageRefIds": [],
	  "type": "jenkins"
	}
  ]</code></pre>
        <h3>The <code>deploy</code> pipeline stage:</h3>
        <p>Input parameters to a Jenkins <code>deploy</code> job include database credentials (<code>USERNAME</code> and <code>PASSWORD</code>), the name of the target database (<code>ENV</code>), and the artifact version:</p><pre><code class="language-json">"stages": [
	{
	  "continuePipeline": false,
	  "failPipeline": true,
	  "job": "LB/job/1.Package",
	  "master": "jenkins-master",
	  "name": "LB_2_Deploy",
	  "parameters": {
		 "USERNAME": "lbusername",
		 "PASSWORD": "lbpassword",
		 "ENV": "proddb",
		 "ARTIFACT_VERSION": "13"
	   },
	   "refId": "2",
	   "requisiteStageRefIds": [
		 "1"
	   ],
	   "type": "jenkins"
	 }
   ]</code></pre>
        <h2>Related Links</h2>
        <ul>
            <li><a href="https://spinnaker.io/docs/setup/other_config/">Configure Everything Else</a>
            </li>
            <li><a href="https://spinnaker.io/docs/setup/other_config/spin/">Set up the Spin CLI</a>
            </li>
            <li><a href="https://spinnaker.io/docs/guides/user/pipeline/triggers/jenkins/">Triggering Pipelines with Jenkins</a>
            </li>
        </ul>
    </body>
</html>