<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" MadCap:searchable="False" MadCap:conditions="Default.EXCLUDE">
    <head><title><MadCap:variable name="Heading.Level1" /></title>
        <link rel="canonical" href="https://docs.liquibase.com/workflows/liquibase-community/using-the-run-job-pipeline-stage-with-spinnaker.html" />
        <meta name="description" content="This page explains how to use Liquibase with the Spinnaker Run Job pipeline stage." />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </head>
    <body>
        <h1>Using the Run Job Pipeline Stage with Spinnaker</h1>
        <p>Spinnaker can execute <MadCap:variable name="General.Liquibase" /> using the official <a href="https://hub.docker.com/r/liquibase/liquibase"><MadCap:variable name="General.Liquibase" /> Docker image</a>. The following diagram shows the Run Job pipeline stage executing a docker run to perform database updates:</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/docker.png" alt="" title="" />
        </p>
        <h2>Setting up Spinnaker and the Run Job pipeline stage</h2>
        <p><b>Step 1:</b> Make sure that you installed Spinnaker. You can use the <a href="https://github.com/armory/minnaker">Spinnaker Quick Start</a> provided by <a href="https://www.armory.io/">Armory</a>.</p>
        <p><b>Step 2:</b> Configure the Run Job pipeline stage by <a href="https://spinnaker.io/setup/install/providers/docker-registry/">setting up a docker registry</a> so that Spinnaker can access the images to run.</p>
        <p><b>Step 3:</b> Use the following manifest source text (YAML):</p><pre><code class="language-yaml">apiVersion: batch/v1
kind: Job
metadata:
 name: liquibase-runner
spec:
 backoffLimit: 0
 template:
   spec:
     containers:
        - args:
        - '--classpath=/workspace/example/changelogs'
        - '--changelog-file=samplechangelog.h2.sql'
        - '--username=liqubase'
        - '--password=password'
        - '--url=jdbc:sqlserver://&lt;IP OR HOSTNAME&gt;:1433;database=&lt;database name&gt;'
        - update
        image: 'index.docker.io/liquibase/liquibase:4.1'
        name: liquibase
        volumeMounts:
          - mountPath: /workspace
            name: workspace
        initContainers:
          - command:
              - git
              - clone
              - '--single-branch'
              - '--branch'
              - $(BRANCH)
              - $(REPO)
              - /workspace
            env:
              - name: BRANCH
                value: main
              - name: REPO
                value: 'https://github.com/liquibase/liquibase-github-action-example'
            image: alpine/git
            name: git
            volumeMounts:
              - mountPath: /workspace
                name: workspace
        restartPolicy: Never
        volumes:
          - emptyDir: {}
            name: workspace</code></pre>
        <p>The following parameters are hard coded for reference:</p>
        <ul>
            <li>BRANCH: main</li>
            <li>REPO: <a href="https://github.com/liquibase/liquibase-github-action-example">https://github.com/liquibase/liquibase-github-action-example</a></li>
        </ul>
        <p class="note" MadCap:autonum="&lt;b&gt;Note: &lt;/b&gt;">If you use an Oracle database, use the sample JDBC URL for Oracle: <code>--url=jdbc:oracle:thin:@&lt;IP OR HOSTNAME&gt;:&lt;PORT&gt;/&lt;SERVICE NAME OR SID&gt;</code>. The format for the JDBC URL for MSSQL Server is the following: <code>--url=jdbc:sqlserver://&lt;IP OR HOSTNAME&gt;:&gt;:&lt;PORT&gt;;database=&lt;database name&gt;</code>.</p>
        <p>Once you have created the job, you will see the following in Spinnaker:</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Spinnaker_workflow.png" alt="" title="" />
        </p>
        <p><b>Step 4:</b> Select <b>Start Manual Execution</b> in the upper-right corner of the pipeline. Now, you will see a <MadCap:variable name="General.Liquibase" /> <code>update</code> in the Spinnaker console:</p>
        <p>
            <img src="../../Z_Resources/Images/Screenshots/workflows/Spinnaker_console.png" alt="" title="" />
        </p>
        <h2>Pipeline as code (JSON)</h2>
        <p>As all Spinnaker jobs are based on JSON, see JSON for the job you used if you want to manage your Spinnaker pipeline as a code:</p><pre><code class="language-json">{
 "keepWaitingPipelines": false,
 "lastModifiedBy": "admin",
 "limitConcurrent": true,
 "spelEvaluator": "v4",
 "stages": [
   {
	 "account": "spinnaker",
	 "alias": "runJob",
	 "application": "liquibasejenkins",
	 "cloudProvider": "kubernetes",
	 "credentials": "spinnaker",
	 "manifest": {
	   "apiVersion": "batch/v1",
	   "kind": "Job",
	   "metadata": {
		 "name": "liquibase-runner"
	   },
		"spec": {
		  "backoffLimit": 0,
		  "template": {
		    "spec": {
		      "containers": [
		        {
		          "args": [
		            "--classpath=/workspace/example/changelogs",
					"--changelog-file=samplechangelog.h2.sql",
					"--username=liqubase",
					"--password=password",
					"--url=jdbc:h2:file:./H2_project/h2tutorial",
					"update"
				  ],
				  "image": "index.docker.io/liquibase/liquibase:4.1",
				  "name": "liquibase",
				  "volumeMounts": [
		            {
		              "mountPath": "/workspace",
					  "name": "workspace"
		            }
				  ]
		        }
		      ],
		      "initContainers": [
		        {
		          "command": [
					"git",
					"clone",
					"--single-branch",
					"--branch",
					"$(BRANCH)",
					"$(REPO)",
					"/workspace"
				  ],
			      "env": [
		            {
		               "name": "BRANCH",
		               "value": "main"
		            },
		            {
		               "name": "REPO",
		               "value": "https://github.com/liquibase/liquibase-github-action-example"
		            }
		          ],
				  "image": "alpine/git",
		          "name": "git",
		          "volumeMounts": [
		            {
		              "mountPath": "/workspace",
		              "name": "workspace"
		            }
		          ]
		        }
		      ],
		      "restartPolicy": "Never",
		      "volumes": [
		        {
				  "emptyDir": {},
				  "name": "workspace"
				}
			  ]
		    }
		  }
		}
	  },
	  "name": "Run Job (Manifest)",
	  "refId": "1",
	  "requisiteStageRefIds": [],
	  "source": "text",
	  "type": "runJobManifest"
	 }
   ],
   "triggers": [],
   "updateTs": "1603738482000"
}</code></pre>
        <h2>Related Links</h2>
        <ul>
            <li><a href="https://blog.spinnaker.io/extending-spinnaker-with-kubernetes-and-containers-5d16ec810d81">Extending Spinnaker with Kubernetes and Containers</a>
            </li>
        </ul>
    </body>
</html>